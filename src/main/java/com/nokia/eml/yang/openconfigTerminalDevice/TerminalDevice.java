/* 
 * @(#)TerminalDevice.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-terminal-device", revision: "2017-07-08".
 */

package com.nokia.eml.yang.openconfigTerminalDevice;

import com.nokia.eml.yang.openconfigTerminalDevice.OcOptTerm;
import com.nokia.eml.yang.openconfigTerminalDevice.terminalDevice.Config;
import com.nokia.eml.yang.openconfigTerminalDevice.terminalDevice.LogicalChannels;
import com.nokia.eml.yang.openconfigTerminalDevice.terminalDevice.OperationalModes;
import com.nokia.eml.yang.openconfigTerminalDevice.terminalDevice.State;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/terminal-device
 * generated to "src/com/nokia/eml/yang/openconfigTerminalDevice/terminal-device"
 * <p>
 * See line 1093 in
 * /root/nokia-yang/optical-transport/openconfig-terminal-device.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class TerminalDevice extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "config".
     */
    public Config config = null;

    /**
     * Field for child container "state".
     */
    public State state = null;

    /**
     * Field for child container "logical-channels".
     */
    public LogicalChannels logicalChannels = null;

    /**
     * Field for child container "operational-modes".
     */
    public OperationalModes operationalModes = null;

    /**
     * Constructor for an empty TerminalDevice object.
     */
    public TerminalDevice() {
        super(OcOptTerm.NAMESPACE, "terminal-device");
        setDefaultPrefix();
        setPrefix(OcOptTerm.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public TerminalDevice clone() {
        return (TerminalDevice)cloneContent(new TerminalDevice());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public TerminalDevice cloneShallow() {
        return (TerminalDevice)cloneShallowContent(new TerminalDevice());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "config",
            "state",
            "logical-channels",
            "operational-modes",
        };
    }

    /* Access methods for container child: "config". */

    /**
     * Adds container entry "config", using an existing object.
     * @param config The object to add.
     * @return The added child.
     */
    public Config addConfig(Config config) throws JNCException {
        this.config = config;
        insertChild(config, childrenNames());
        return config;
    }

    /**
     * Adds container entry "config".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Config addConfig() throws JNCException {
        Config config = new Config();
        this.config = config;
        insertChild(config, childrenNames());
        return config;
    }

    /**
     * Deletes container entry "config".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteConfig() throws JNCException {
        this.config = null;
        String path = "config";
        return delete(path);
    }

    /* Access methods for container child: "state". */

    /**
     * Adds container entry "state", using an existing object.
     * @param state The object to add.
     * @return The added child.
     */
    public State addState(State state) throws JNCException {
        this.state = state;
        insertChild(state, childrenNames());
        return state;
    }

    /**
     * Adds container entry "state".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public State addState() throws JNCException {
        State state = new State();
        this.state = state;
        insertChild(state, childrenNames());
        return state;
    }

    /**
     * Deletes container entry "state".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteState() throws JNCException {
        this.state = null;
        String path = "state";
        return delete(path);
    }

    /* Access methods for container child: "logical-channels". */

    /**
     * Adds container entry "logicalChannels", using an existing object.
     * @param logicalChannels The object to add.
     * @return The added child.
     */
    public LogicalChannels addLogicalChannels(LogicalChannels logicalChannels)
            throws JNCException {
        this.logicalChannels = logicalChannels;
        insertChild(logicalChannels, childrenNames());
        return logicalChannels;
    }

    /**
     * Adds container entry "logicalChannels".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public LogicalChannels addLogicalChannels() throws JNCException {
        LogicalChannels logicalChannels = new LogicalChannels();
        this.logicalChannels = logicalChannels;
        insertChild(logicalChannels, childrenNames());
        return logicalChannels;
    }

    /**
     * Deletes container entry "logicalChannels".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteLogicalChannels() throws JNCException {
        this.logicalChannels = null;
        String path = "logical-channels";
        return delete(path);
    }

    /* Access methods for container child: "operational-modes". */

    /**
     * Adds container entry "operationalModes", using an existing object.
     * @param operationalModes The object to add.
     * @return The added child.
     */
    public OperationalModes addOperationalModes(OperationalModes operationalModes)
            throws JNCException {
        this.operationalModes = operationalModes;
        insertChild(operationalModes, childrenNames());
        return operationalModes;
    }

    /**
     * Adds container entry "operationalModes".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public OperationalModes addOperationalModes() throws JNCException {
        OperationalModes operationalModes = new OperationalModes();
        this.operationalModes = operationalModes;
        insertChild(operationalModes, childrenNames());
        return operationalModes;
    }

    /**
     * Deletes container entry "operationalModes".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteOperationalModes() throws JNCException {
        this.operationalModes = null;
        String path = "operational-modes";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Config) config = (Config)child;
        else if (child instanceof State) state = (State)child;
        else if (child instanceof LogicalChannels) logicalChannels = (LogicalChannels)child;
        else if (child instanceof OperationalModes) operationalModes = (OperationalModes)child;
    }

}

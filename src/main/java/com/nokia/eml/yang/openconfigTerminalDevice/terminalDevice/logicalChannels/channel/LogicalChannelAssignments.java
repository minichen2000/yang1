/* 
 * @(#)LogicalChannelAssignments.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-terminal-device", revision: "2017-07-08".
 */

package com.nokia.eml.yang.openconfigTerminalDevice.terminalDevice.logicalChannels.channel;

import com.nokia.eml.yang.openconfigTerminalDevice.OcOptTerm;
import com.nokia.eml.yang.openconfigTerminalDevice.terminalDevice.logicalChannels.channel.logicalChannelAssignments.Assignment;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/terminal-device
 * generated to "src/com/nokia/eml/yang/openconfigTerminalDevice/terminalDevice/logicalChannels/channel/logical-channel-assignments"
 * <p>
 * See line 540 in
 * /root/nokia-yang/optical-transport/openconfig-terminal-device.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class LogicalChannelAssignments extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty LogicalChannelAssignments object.
     */
    public LogicalChannelAssignments() {
        super(OcOptTerm.NAMESPACE, "logical-channel-assignments");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public LogicalChannelAssignments clone() {
        return (LogicalChannelAssignments)cloneContent(new LogicalChannelAssignments());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public LogicalChannelAssignments cloneShallow() {
        return (LogicalChannelAssignments)cloneShallowContent(new LogicalChannelAssignments());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "assignment",
        };
    }

    /* Access methods for list child: "assignment". */

    /**
     * Gets list entry "assignment", with specified keys.
     * @param indexValue Key argument of child.
     */
    public Assignment getAssignment(YangUInt32 indexValue) throws JNCException {
        String path = "assignment[index='" + indexValue + "']";
        return (Assignment)searchOne(path);
    }

    /**
     * Gets list entry "assignment", with specified keys.
     * The keys are specified as strings.
     * @param indexValue Key argument of child.
     */
    public Assignment getAssignment(String indexValue) throws JNCException {
        String path = "assignment[index='" + indexValue + "']";
        return (Assignment)searchOne(path);
    }

    /**
     * Iterator method for the list "assignment".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator assignmentIterator() {
        return new ElementChildrenIterator(children, "assignment");
    }

    /**
     * Adds list entry "assignment", using an existing object.
     * @param assignment The object to add.
     * @return The added child.
     */
    public Assignment addAssignment(Assignment assignment) throws JNCException {
        insertChild(assignment, childrenNames());
        return assignment;
    }

    /**
     * Adds list entry "assignment", with specified keys.
     * @param indexValue Key argument of child.
     * @return The added child.
     */
    public Assignment addAssignment(YangUInt32 indexValue) throws JNCException {
        Assignment assignment = new Assignment(indexValue);
        return addAssignment(assignment);
    }

    /**
     * Adds list entry "assignment", with specified keys.
     * The keys are specified as strings.
     * @param indexValue Key argument of child.
     * @return The added child.
     */
    public Assignment addAssignment(String indexValue) throws JNCException {
        Assignment assignment = new Assignment(indexValue);
        return addAssignment(assignment);
    }

    /**
     * Adds list entry "assignment".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Assignment addAssignment() throws JNCException {
        Assignment assignment = new Assignment();
        insertChild(assignment, childrenNames());
        return assignment;
    }

    /**
     * Deletes list entry "assignment", with specified keys.
     * @param indexValue Key argument of child.
     */
    public void deleteAssignment(YangUInt32 indexValue) throws JNCException {
        String path = "assignment[index='" + indexValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "assignment", with specified keys.
     * The keys are specified as strings.
     * @param indexValue Key argument of child.
     */
    public void deleteAssignment(String indexValue) throws JNCException {
        String path = "assignment[index='" + indexValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

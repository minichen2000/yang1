/* 
 * @(#)State.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-terminal-device", revision: "2017-07-08".
 */

package com.nokia.eml.yang.openconfigTerminalDevice.terminalDevice.logicalChannels.channel.otn;

import com.nokia.eml.yang.ietfYangTypes.Counter64;
import com.nokia.eml.yang.openconfigTerminalDevice.OcOptTerm;
import com.nokia.eml.yang.openconfigTerminalDevice.terminalDevice.logicalChannels.channel.otn.state.Esnr;
import com.nokia.eml.yang.openconfigTerminalDevice.terminalDevice.logicalChannels.channel.otn.state.PostFecBer;
import com.nokia.eml.yang.openconfigTerminalDevice.terminalDevice.logicalChannels.channel.otn.state.PreFecBer;
import com.nokia.eml.yang.openconfigTerminalDevice.terminalDevice.logicalChannels.channel.otn.state.QValue;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

import java.math.BigInteger;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/terminal-device
 * generated to "src/com/nokia/eml/yang/openconfigTerminalDevice/terminalDevice/logicalChannels/channel/otn/state"
 * <p>
 * See line 338 in
 * /root/nokia-yang/optical-transport/openconfig-terminal-device.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class State extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "pre-fec-ber".
     */
    public PreFecBer preFecBer = null;

    /**
     * Field for child container "post-fec-ber".
     */
    public PostFecBer postFecBer = null;

    /**
     * Field for child container "q-value".
     */
    public QValue qValue = null;

    /**
     * Field for child container "esnr".
     */
    public Esnr esnr = null;

    /**
     * Constructor for an empty State object.
     */
    public State() {
        super(OcOptTerm.NAMESPACE, "state");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public State clone() {
        return (State)cloneContent(new State());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public State cloneShallow() {
        return (State)cloneShallowContent(new State());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "tti-msg-transmit",
            "tti-msg-expected",
            "tti-msg-auto",
            "tti-msg-recv",
            "rdi-msg",
            "errored-seconds",
            "severely-errored-seconds",
            "unavailable-seconds",
            "code-violations",
            "fec-uncorrectable-words",
            "fec-corrected-bytes",
            "fec-corrected-bits",
            "background-block-errors",
            "pre-fec-ber",
            "post-fec-ber",
            "q-value",
            "esnr",
        };
    }

    /* Access methods for optional leaf child: "tti-msg-transmit". */

    /**
     * Gets the value for child leaf "tti-msg-transmit".
     * @return The value of the leaf.
     */
    public YangString getTtiMsgTransmitValue() throws JNCException {
        return (YangString)getValue("tti-msg-transmit");
    }

    /**
     * Sets the value for child leaf "tti-msg-transmit",
     * using instance of generated typedef class.
     * @param ttiMsgTransmitValue The value to set.
     * @param ttiMsgTransmitValue used during instantiation.
     */
    public void setTtiMsgTransmitValue(YangString ttiMsgTransmitValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "tti-msg-transmit",
            ttiMsgTransmitValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tti-msg-transmit",
     * using a String value.
     * @param ttiMsgTransmitValue used during instantiation.
     */
    public void setTtiMsgTransmitValue(String ttiMsgTransmitValue)
            throws JNCException {
        setTtiMsgTransmitValue(new YangString(ttiMsgTransmitValue));
    }

    /**
     * Unsets the value for child leaf "tti-msg-transmit".
     */
    public void unsetTtiMsgTransmitValue() throws JNCException {
        delete("tti-msg-transmit");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tti-msg-transmit" leaf will not have a value.
     */
    public void addTtiMsgTransmit() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "tti-msg-transmit",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tti-msg-transmit" with operation "replace".
     */
    public void markTtiMsgTransmitReplace() throws JNCException {
        markLeafReplace("ttiMsgTransmit");
    }

    /**
     * Marks the leaf "tti-msg-transmit" with operation "merge".
     */
    public void markTtiMsgTransmitMerge() throws JNCException {
        markLeafMerge("ttiMsgTransmit");
    }

    /**
     * Marks the leaf "tti-msg-transmit" with operation "create".
     */
    public void markTtiMsgTransmitCreate() throws JNCException {
        markLeafCreate("ttiMsgTransmit");
    }

    /**
     * Marks the leaf "tti-msg-transmit" with operation "delete".
     */
    public void markTtiMsgTransmitDelete() throws JNCException {
        markLeafDelete("ttiMsgTransmit");
    }

    /* Access methods for optional leaf child: "tti-msg-expected". */

    /**
     * Gets the value for child leaf "tti-msg-expected".
     * @return The value of the leaf.
     */
    public YangString getTtiMsgExpectedValue() throws JNCException {
        return (YangString)getValue("tti-msg-expected");
    }

    /**
     * Sets the value for child leaf "tti-msg-expected",
     * using instance of generated typedef class.
     * @param ttiMsgExpectedValue The value to set.
     * @param ttiMsgExpectedValue used during instantiation.
     */
    public void setTtiMsgExpectedValue(YangString ttiMsgExpectedValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "tti-msg-expected",
            ttiMsgExpectedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tti-msg-expected",
     * using a String value.
     * @param ttiMsgExpectedValue used during instantiation.
     */
    public void setTtiMsgExpectedValue(String ttiMsgExpectedValue)
            throws JNCException {
        setTtiMsgExpectedValue(new YangString(ttiMsgExpectedValue));
    }

    /**
     * Unsets the value for child leaf "tti-msg-expected".
     */
    public void unsetTtiMsgExpectedValue() throws JNCException {
        delete("tti-msg-expected");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tti-msg-expected" leaf will not have a value.
     */
    public void addTtiMsgExpected() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "tti-msg-expected",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tti-msg-expected" with operation "replace".
     */
    public void markTtiMsgExpectedReplace() throws JNCException {
        markLeafReplace("ttiMsgExpected");
    }

    /**
     * Marks the leaf "tti-msg-expected" with operation "merge".
     */
    public void markTtiMsgExpectedMerge() throws JNCException {
        markLeafMerge("ttiMsgExpected");
    }

    /**
     * Marks the leaf "tti-msg-expected" with operation "create".
     */
    public void markTtiMsgExpectedCreate() throws JNCException {
        markLeafCreate("ttiMsgExpected");
    }

    /**
     * Marks the leaf "tti-msg-expected" with operation "delete".
     */
    public void markTtiMsgExpectedDelete() throws JNCException {
        markLeafDelete("ttiMsgExpected");
    }

    /* Access methods for optional leaf child: "tti-msg-auto". */

    /**
     * Gets the value for child leaf "tti-msg-auto".
     * @return The value of the leaf.
     */
    public YangBoolean getTtiMsgAutoValue() throws JNCException {
        return (YangBoolean)getValue("tti-msg-auto");
    }

    /**
     * Sets the value for child leaf "tti-msg-auto",
     * using instance of generated typedef class.
     * @param ttiMsgAutoValue The value to set.
     * @param ttiMsgAutoValue used during instantiation.
     */
    public void setTtiMsgAutoValue(YangBoolean ttiMsgAutoValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "tti-msg-auto",
            ttiMsgAutoValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tti-msg-auto",
     * using Java primitive values.
     * @param ttiMsgAutoValue used during instantiation.
     */
    public void setTtiMsgAutoValue(Boolean ttiMsgAutoValue) throws JNCException {
        setTtiMsgAutoValue(new YangBoolean(ttiMsgAutoValue));
    }

    /**
     * Sets the value for child leaf "tti-msg-auto",
     * using a String value.
     * @param ttiMsgAutoValue used during instantiation.
     */
    public void setTtiMsgAutoValue(String ttiMsgAutoValue) throws JNCException {
        setTtiMsgAutoValue(new YangBoolean(ttiMsgAutoValue));
    }

    /**
     * Unsets the value for child leaf "tti-msg-auto".
     */
    public void unsetTtiMsgAutoValue() throws JNCException {
        delete("tti-msg-auto");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tti-msg-auto" leaf will not have a value.
     */
    public void addTtiMsgAuto() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "tti-msg-auto",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tti-msg-auto" with operation "replace".
     */
    public void markTtiMsgAutoReplace() throws JNCException {
        markLeafReplace("ttiMsgAuto");
    }

    /**
     * Marks the leaf "tti-msg-auto" with operation "merge".
     */
    public void markTtiMsgAutoMerge() throws JNCException {
        markLeafMerge("ttiMsgAuto");
    }

    /**
     * Marks the leaf "tti-msg-auto" with operation "create".
     */
    public void markTtiMsgAutoCreate() throws JNCException {
        markLeafCreate("ttiMsgAuto");
    }

    /**
     * Marks the leaf "tti-msg-auto" with operation "delete".
     */
    public void markTtiMsgAutoDelete() throws JNCException {
        markLeafDelete("ttiMsgAuto");
    }

    /* Access methods for optional leaf child: "tti-msg-recv". */

    /**
     * Gets the value for child leaf "tti-msg-recv".
     * @return The value of the leaf.
     */
    public YangString getTtiMsgRecvValue() throws JNCException {
        return (YangString)getValue("tti-msg-recv");
    }

    /**
     * Sets the value for child leaf "tti-msg-recv",
     * using instance of generated typedef class.
     * @param ttiMsgRecvValue The value to set.
     * @param ttiMsgRecvValue used during instantiation.
     */
    public void setTtiMsgRecvValue(YangString ttiMsgRecvValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "tti-msg-recv",
            ttiMsgRecvValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tti-msg-recv",
     * using a String value.
     * @param ttiMsgRecvValue used during instantiation.
     */
    public void setTtiMsgRecvValue(String ttiMsgRecvValue) throws JNCException {
        setTtiMsgRecvValue(new YangString(ttiMsgRecvValue));
    }

    /**
     * Unsets the value for child leaf "tti-msg-recv".
     */
    public void unsetTtiMsgRecvValue() throws JNCException {
        delete("tti-msg-recv");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tti-msg-recv" leaf will not have a value.
     */
    public void addTtiMsgRecv() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "tti-msg-recv",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tti-msg-recv" with operation "replace".
     */
    public void markTtiMsgRecvReplace() throws JNCException {
        markLeafReplace("ttiMsgRecv");
    }

    /**
     * Marks the leaf "tti-msg-recv" with operation "merge".
     */
    public void markTtiMsgRecvMerge() throws JNCException {
        markLeafMerge("ttiMsgRecv");
    }

    /**
     * Marks the leaf "tti-msg-recv" with operation "create".
     */
    public void markTtiMsgRecvCreate() throws JNCException {
        markLeafCreate("ttiMsgRecv");
    }

    /**
     * Marks the leaf "tti-msg-recv" with operation "delete".
     */
    public void markTtiMsgRecvDelete() throws JNCException {
        markLeafDelete("ttiMsgRecv");
    }

    /* Access methods for optional leaf child: "rdi-msg". */

    /**
     * Gets the value for child leaf "rdi-msg".
     * @return The value of the leaf.
     */
    public YangString getRdiMsgValue() throws JNCException {
        return (YangString)getValue("rdi-msg");
    }

    /**
     * Sets the value for child leaf "rdi-msg",
     * using instance of generated typedef class.
     * @param rdiMsgValue The value to set.
     * @param rdiMsgValue used during instantiation.
     */
    public void setRdiMsgValue(YangString rdiMsgValue) throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "rdi-msg",
            rdiMsgValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "rdi-msg",
     * using a String value.
     * @param rdiMsgValue used during instantiation.
     */
    public void setRdiMsgValue(String rdiMsgValue) throws JNCException {
        setRdiMsgValue(new YangString(rdiMsgValue));
    }

    /**
     * Unsets the value for child leaf "rdi-msg".
     */
    public void unsetRdiMsgValue() throws JNCException {
        delete("rdi-msg");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "rdi-msg" leaf will not have a value.
     */
    public void addRdiMsg() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "rdi-msg",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "rdi-msg" with operation "replace".
     */
    public void markRdiMsgReplace() throws JNCException {
        markLeafReplace("rdiMsg");
    }

    /**
     * Marks the leaf "rdi-msg" with operation "merge".
     */
    public void markRdiMsgMerge() throws JNCException {
        markLeafMerge("rdiMsg");
    }

    /**
     * Marks the leaf "rdi-msg" with operation "create".
     */
    public void markRdiMsgCreate() throws JNCException {
        markLeafCreate("rdiMsg");
    }

    /**
     * Marks the leaf "rdi-msg" with operation "delete".
     */
    public void markRdiMsgDelete() throws JNCException {
        markLeafDelete("rdiMsg");
    }

    /* Access methods for optional leaf child: "errored-seconds". */

    /**
     * Gets the value for child leaf "errored-seconds".
     * @return The value of the leaf.
     */
    public Counter64 getErroredSecondsValue() throws JNCException {
        return (Counter64)getValue("errored-seconds");
    }

    /**
     * Sets the value for child leaf "errored-seconds",
     * using a JNC type value.
     * @param erroredSecondsValue The value to set.
     * @param erroredSecondsValue used during instantiation.
     */
    public void setErroredSecondsValue(Counter64 erroredSecondsValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "errored-seconds",
            erroredSecondsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "errored-seconds",
     * using Java primitive values.
     * @param erroredSecondsValue used during instantiation.
     */
    public void setErroredSecondsValue(BigInteger erroredSecondsValue)
            throws JNCException {
        setErroredSecondsValue(new Counter64(erroredSecondsValue));
    }

    /**
     * Sets the value for child leaf "errored-seconds",
     * using a String value.
     * @param erroredSecondsValue used during instantiation.
     */
    public void setErroredSecondsValue(String erroredSecondsValue)
            throws JNCException {
        setErroredSecondsValue(new Counter64(erroredSecondsValue));
    }

    /**
     * Unsets the value for child leaf "errored-seconds".
     */
    public void unsetErroredSecondsValue() throws JNCException {
        delete("errored-seconds");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "errored-seconds" leaf will not have a value.
     */
    public void addErroredSeconds() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "errored-seconds",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "errored-seconds" with operation "replace".
     */
    public void markErroredSecondsReplace() throws JNCException {
        markLeafReplace("erroredSeconds");
    }

    /**
     * Marks the leaf "errored-seconds" with operation "merge".
     */
    public void markErroredSecondsMerge() throws JNCException {
        markLeafMerge("erroredSeconds");
    }

    /**
     * Marks the leaf "errored-seconds" with operation "create".
     */
    public void markErroredSecondsCreate() throws JNCException {
        markLeafCreate("erroredSeconds");
    }

    /**
     * Marks the leaf "errored-seconds" with operation "delete".
     */
    public void markErroredSecondsDelete() throws JNCException {
        markLeafDelete("erroredSeconds");
    }

    /* Access methods for optional leaf child: "severely-errored-seconds". */

    /**
     * Gets the value for child leaf "severely-errored-seconds".
     * @return The value of the leaf.
     */
    public Counter64 getSeverelyErroredSecondsValue() throws JNCException {
        return (Counter64)getValue("severely-errored-seconds");
    }

    /**
     * Sets the value for child leaf "severely-errored-seconds",
     * using a JNC type value.
     * @param severelyErroredSecondsValue The value to set.
     * @param severelyErroredSecondsValue used during instantiation.
     */
    public void setSeverelyErroredSecondsValue(Counter64 severelyErroredSecondsValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "severely-errored-seconds",
            severelyErroredSecondsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "severely-errored-seconds",
     * using Java primitive values.
     * @param severelyErroredSecondsValue used during instantiation.
     */
    public void setSeverelyErroredSecondsValue(BigInteger severelyErroredSecondsValue)
            throws JNCException {
        setSeverelyErroredSecondsValue(new Counter64(severelyErroredSecondsValue));
    }

    /**
     * Sets the value for child leaf "severely-errored-seconds",
     * using a String value.
     * @param severelyErroredSecondsValue used during instantiation.
     */
    public void setSeverelyErroredSecondsValue(String severelyErroredSecondsValue)
            throws JNCException {
        setSeverelyErroredSecondsValue(new Counter64(severelyErroredSecondsValue));
    }

    /**
     * Unsets the value for child leaf "severely-errored-seconds".
     */
    public void unsetSeverelyErroredSecondsValue() throws JNCException {
        delete("severely-errored-seconds");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "severely-errored-seconds" leaf will not have a value.
     */
    public void addSeverelyErroredSeconds() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "severely-errored-seconds",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "severely-errored-seconds" with operation "replace".
     */
    public void markSeverelyErroredSecondsReplace() throws JNCException {
        markLeafReplace("severelyErroredSeconds");
    }

    /**
     * Marks the leaf "severely-errored-seconds" with operation "merge".
     */
    public void markSeverelyErroredSecondsMerge() throws JNCException {
        markLeafMerge("severelyErroredSeconds");
    }

    /**
     * Marks the leaf "severely-errored-seconds" with operation "create".
     */
    public void markSeverelyErroredSecondsCreate() throws JNCException {
        markLeafCreate("severelyErroredSeconds");
    }

    /**
     * Marks the leaf "severely-errored-seconds" with operation "delete".
     */
    public void markSeverelyErroredSecondsDelete() throws JNCException {
        markLeafDelete("severelyErroredSeconds");
    }

    /* Access methods for optional leaf child: "unavailable-seconds". */

    /**
     * Gets the value for child leaf "unavailable-seconds".
     * @return The value of the leaf.
     */
    public Counter64 getUnavailableSecondsValue() throws JNCException {
        return (Counter64)getValue("unavailable-seconds");
    }

    /**
     * Sets the value for child leaf "unavailable-seconds",
     * using a JNC type value.
     * @param unavailableSecondsValue The value to set.
     * @param unavailableSecondsValue used during instantiation.
     */
    public void setUnavailableSecondsValue(Counter64 unavailableSecondsValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "unavailable-seconds",
            unavailableSecondsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "unavailable-seconds",
     * using Java primitive values.
     * @param unavailableSecondsValue used during instantiation.
     */
    public void setUnavailableSecondsValue(BigInteger unavailableSecondsValue)
            throws JNCException {
        setUnavailableSecondsValue(new Counter64(unavailableSecondsValue));
    }

    /**
     * Sets the value for child leaf "unavailable-seconds",
     * using a String value.
     * @param unavailableSecondsValue used during instantiation.
     */
    public void setUnavailableSecondsValue(String unavailableSecondsValue)
            throws JNCException {
        setUnavailableSecondsValue(new Counter64(unavailableSecondsValue));
    }

    /**
     * Unsets the value for child leaf "unavailable-seconds".
     */
    public void unsetUnavailableSecondsValue() throws JNCException {
        delete("unavailable-seconds");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "unavailable-seconds" leaf will not have a value.
     */
    public void addUnavailableSeconds() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "unavailable-seconds",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "unavailable-seconds" with operation "replace".
     */
    public void markUnavailableSecondsReplace() throws JNCException {
        markLeafReplace("unavailableSeconds");
    }

    /**
     * Marks the leaf "unavailable-seconds" with operation "merge".
     */
    public void markUnavailableSecondsMerge() throws JNCException {
        markLeafMerge("unavailableSeconds");
    }

    /**
     * Marks the leaf "unavailable-seconds" with operation "create".
     */
    public void markUnavailableSecondsCreate() throws JNCException {
        markLeafCreate("unavailableSeconds");
    }

    /**
     * Marks the leaf "unavailable-seconds" with operation "delete".
     */
    public void markUnavailableSecondsDelete() throws JNCException {
        markLeafDelete("unavailableSeconds");
    }

    /* Access methods for optional leaf child: "code-violations". */

    /**
     * Gets the value for child leaf "code-violations".
     * @return The value of the leaf.
     */
    public Counter64 getCodeViolationsValue() throws JNCException {
        return (Counter64)getValue("code-violations");
    }

    /**
     * Sets the value for child leaf "code-violations",
     * using a JNC type value.
     * @param codeViolationsValue The value to set.
     * @param codeViolationsValue used during instantiation.
     */
    public void setCodeViolationsValue(Counter64 codeViolationsValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "code-violations",
            codeViolationsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "code-violations",
     * using Java primitive values.
     * @param codeViolationsValue used during instantiation.
     */
    public void setCodeViolationsValue(BigInteger codeViolationsValue)
            throws JNCException {
        setCodeViolationsValue(new Counter64(codeViolationsValue));
    }

    /**
     * Sets the value for child leaf "code-violations",
     * using a String value.
     * @param codeViolationsValue used during instantiation.
     */
    public void setCodeViolationsValue(String codeViolationsValue)
            throws JNCException {
        setCodeViolationsValue(new Counter64(codeViolationsValue));
    }

    /**
     * Unsets the value for child leaf "code-violations".
     */
    public void unsetCodeViolationsValue() throws JNCException {
        delete("code-violations");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "code-violations" leaf will not have a value.
     */
    public void addCodeViolations() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "code-violations",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "code-violations" with operation "replace".
     */
    public void markCodeViolationsReplace() throws JNCException {
        markLeafReplace("codeViolations");
    }

    /**
     * Marks the leaf "code-violations" with operation "merge".
     */
    public void markCodeViolationsMerge() throws JNCException {
        markLeafMerge("codeViolations");
    }

    /**
     * Marks the leaf "code-violations" with operation "create".
     */
    public void markCodeViolationsCreate() throws JNCException {
        markLeafCreate("codeViolations");
    }

    /**
     * Marks the leaf "code-violations" with operation "delete".
     */
    public void markCodeViolationsDelete() throws JNCException {
        markLeafDelete("codeViolations");
    }

    /* Access methods for optional leaf child: "fec-uncorrectable-words". */

    /**
     * Gets the value for child leaf "fec-uncorrectable-words".
     * @return The value of the leaf.
     */
    public Counter64 getFecUncorrectableWordsValue() throws JNCException {
        return (Counter64)getValue("fec-uncorrectable-words");
    }

    /**
     * Sets the value for child leaf "fec-uncorrectable-words",
     * using a JNC type value.
     * @param fecUncorrectableWordsValue The value to set.
     * @param fecUncorrectableWordsValue used during instantiation.
     */
    public void setFecUncorrectableWordsValue(Counter64 fecUncorrectableWordsValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "fec-uncorrectable-words",
            fecUncorrectableWordsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "fec-uncorrectable-words",
     * using Java primitive values.
     * @param fecUncorrectableWordsValue used during instantiation.
     */
    public void setFecUncorrectableWordsValue(BigInteger fecUncorrectableWordsValue)
            throws JNCException {
        setFecUncorrectableWordsValue(new Counter64(fecUncorrectableWordsValue));
    }

    /**
     * Sets the value for child leaf "fec-uncorrectable-words",
     * using a String value.
     * @param fecUncorrectableWordsValue used during instantiation.
     */
    public void setFecUncorrectableWordsValue(String fecUncorrectableWordsValue)
            throws JNCException {
        setFecUncorrectableWordsValue(new Counter64(fecUncorrectableWordsValue));
    }

    /**
     * Unsets the value for child leaf "fec-uncorrectable-words".
     */
    public void unsetFecUncorrectableWordsValue() throws JNCException {
        delete("fec-uncorrectable-words");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fec-uncorrectable-words" leaf will not have a value.
     */
    public void addFecUncorrectableWords() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "fec-uncorrectable-words",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "fec-uncorrectable-words" with operation "replace".
     */
    public void markFecUncorrectableWordsReplace() throws JNCException {
        markLeafReplace("fecUncorrectableWords");
    }

    /**
     * Marks the leaf "fec-uncorrectable-words" with operation "merge".
     */
    public void markFecUncorrectableWordsMerge() throws JNCException {
        markLeafMerge("fecUncorrectableWords");
    }

    /**
     * Marks the leaf "fec-uncorrectable-words" with operation "create".
     */
    public void markFecUncorrectableWordsCreate() throws JNCException {
        markLeafCreate("fecUncorrectableWords");
    }

    /**
     * Marks the leaf "fec-uncorrectable-words" with operation "delete".
     */
    public void markFecUncorrectableWordsDelete() throws JNCException {
        markLeafDelete("fecUncorrectableWords");
    }

    /* Access methods for optional leaf child: "fec-corrected-bytes". */

    /**
     * Gets the value for child leaf "fec-corrected-bytes".
     * @return The value of the leaf.
     */
    public Counter64 getFecCorrectedBytesValue() throws JNCException {
        return (Counter64)getValue("fec-corrected-bytes");
    }

    /**
     * Sets the value for child leaf "fec-corrected-bytes",
     * using a JNC type value.
     * @param fecCorrectedBytesValue The value to set.
     * @param fecCorrectedBytesValue used during instantiation.
     */
    public void setFecCorrectedBytesValue(Counter64 fecCorrectedBytesValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "fec-corrected-bytes",
            fecCorrectedBytesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "fec-corrected-bytes",
     * using Java primitive values.
     * @param fecCorrectedBytesValue used during instantiation.
     */
    public void setFecCorrectedBytesValue(BigInteger fecCorrectedBytesValue)
            throws JNCException {
        setFecCorrectedBytesValue(new Counter64(fecCorrectedBytesValue));
    }

    /**
     * Sets the value for child leaf "fec-corrected-bytes",
     * using a String value.
     * @param fecCorrectedBytesValue used during instantiation.
     */
    public void setFecCorrectedBytesValue(String fecCorrectedBytesValue)
            throws JNCException {
        setFecCorrectedBytesValue(new Counter64(fecCorrectedBytesValue));
    }

    /**
     * Unsets the value for child leaf "fec-corrected-bytes".
     */
    public void unsetFecCorrectedBytesValue() throws JNCException {
        delete("fec-corrected-bytes");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fec-corrected-bytes" leaf will not have a value.
     */
    public void addFecCorrectedBytes() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "fec-corrected-bytes",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "fec-corrected-bytes" with operation "replace".
     */
    public void markFecCorrectedBytesReplace() throws JNCException {
        markLeafReplace("fecCorrectedBytes");
    }

    /**
     * Marks the leaf "fec-corrected-bytes" with operation "merge".
     */
    public void markFecCorrectedBytesMerge() throws JNCException {
        markLeafMerge("fecCorrectedBytes");
    }

    /**
     * Marks the leaf "fec-corrected-bytes" with operation "create".
     */
    public void markFecCorrectedBytesCreate() throws JNCException {
        markLeafCreate("fecCorrectedBytes");
    }

    /**
     * Marks the leaf "fec-corrected-bytes" with operation "delete".
     */
    public void markFecCorrectedBytesDelete() throws JNCException {
        markLeafDelete("fecCorrectedBytes");
    }

    /* Access methods for optional leaf child: "fec-corrected-bits". */

    /**
     * Gets the value for child leaf "fec-corrected-bits".
     * @return The value of the leaf.
     */
    public Counter64 getFecCorrectedBitsValue() throws JNCException {
        return (Counter64)getValue("fec-corrected-bits");
    }

    /**
     * Sets the value for child leaf "fec-corrected-bits",
     * using a JNC type value.
     * @param fecCorrectedBitsValue The value to set.
     * @param fecCorrectedBitsValue used during instantiation.
     */
    public void setFecCorrectedBitsValue(Counter64 fecCorrectedBitsValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "fec-corrected-bits",
            fecCorrectedBitsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "fec-corrected-bits",
     * using Java primitive values.
     * @param fecCorrectedBitsValue used during instantiation.
     */
    public void setFecCorrectedBitsValue(BigInteger fecCorrectedBitsValue)
            throws JNCException {
        setFecCorrectedBitsValue(new Counter64(fecCorrectedBitsValue));
    }

    /**
     * Sets the value for child leaf "fec-corrected-bits",
     * using a String value.
     * @param fecCorrectedBitsValue used during instantiation.
     */
    public void setFecCorrectedBitsValue(String fecCorrectedBitsValue)
            throws JNCException {
        setFecCorrectedBitsValue(new Counter64(fecCorrectedBitsValue));
    }

    /**
     * Unsets the value for child leaf "fec-corrected-bits".
     */
    public void unsetFecCorrectedBitsValue() throws JNCException {
        delete("fec-corrected-bits");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fec-corrected-bits" leaf will not have a value.
     */
    public void addFecCorrectedBits() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "fec-corrected-bits",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "fec-corrected-bits" with operation "replace".
     */
    public void markFecCorrectedBitsReplace() throws JNCException {
        markLeafReplace("fecCorrectedBits");
    }

    /**
     * Marks the leaf "fec-corrected-bits" with operation "merge".
     */
    public void markFecCorrectedBitsMerge() throws JNCException {
        markLeafMerge("fecCorrectedBits");
    }

    /**
     * Marks the leaf "fec-corrected-bits" with operation "create".
     */
    public void markFecCorrectedBitsCreate() throws JNCException {
        markLeafCreate("fecCorrectedBits");
    }

    /**
     * Marks the leaf "fec-corrected-bits" with operation "delete".
     */
    public void markFecCorrectedBitsDelete() throws JNCException {
        markLeafDelete("fecCorrectedBits");
    }

    /* Access methods for optional leaf child: "background-block-errors". */

    /**
     * Gets the value for child leaf "background-block-errors".
     * @return The value of the leaf.
     */
    public Counter64 getBackgroundBlockErrorsValue() throws JNCException {
        return (Counter64)getValue("background-block-errors");
    }

    /**
     * Sets the value for child leaf "background-block-errors",
     * using a JNC type value.
     * @param backgroundBlockErrorsValue The value to set.
     * @param backgroundBlockErrorsValue used during instantiation.
     */
    public void setBackgroundBlockErrorsValue(Counter64 backgroundBlockErrorsValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "background-block-errors",
            backgroundBlockErrorsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "background-block-errors",
     * using Java primitive values.
     * @param backgroundBlockErrorsValue used during instantiation.
     */
    public void setBackgroundBlockErrorsValue(BigInteger backgroundBlockErrorsValue)
            throws JNCException {
        setBackgroundBlockErrorsValue(new Counter64(backgroundBlockErrorsValue));
    }

    /**
     * Sets the value for child leaf "background-block-errors",
     * using a String value.
     * @param backgroundBlockErrorsValue used during instantiation.
     */
    public void setBackgroundBlockErrorsValue(String backgroundBlockErrorsValue)
            throws JNCException {
        setBackgroundBlockErrorsValue(new Counter64(backgroundBlockErrorsValue));
    }

    /**
     * Unsets the value for child leaf "background-block-errors".
     */
    public void unsetBackgroundBlockErrorsValue() throws JNCException {
        delete("background-block-errors");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "background-block-errors" leaf will not have a value.
     */
    public void addBackgroundBlockErrors() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "background-block-errors",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "background-block-errors" with operation "replace".
     */
    public void markBackgroundBlockErrorsReplace() throws JNCException {
        markLeafReplace("backgroundBlockErrors");
    }

    /**
     * Marks the leaf "background-block-errors" with operation "merge".
     */
    public void markBackgroundBlockErrorsMerge() throws JNCException {
        markLeafMerge("backgroundBlockErrors");
    }

    /**
     * Marks the leaf "background-block-errors" with operation "create".
     */
    public void markBackgroundBlockErrorsCreate() throws JNCException {
        markLeafCreate("backgroundBlockErrors");
    }

    /**
     * Marks the leaf "background-block-errors" with operation "delete".
     */
    public void markBackgroundBlockErrorsDelete() throws JNCException {
        markLeafDelete("backgroundBlockErrors");
    }

    /* Access methods for container child: "pre-fec-ber". */

    /**
     * Adds container entry "preFecBer", using an existing object.
     * @param preFecBer The object to add.
     * @return The added child.
     */
    public PreFecBer addPreFecBer(PreFecBer preFecBer) throws JNCException {
        this.preFecBer = preFecBer;
        insertChild(preFecBer, childrenNames());
        return preFecBer;
    }

    /**
     * Adds container entry "preFecBer".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public PreFecBer addPreFecBer() throws JNCException {
        PreFecBer preFecBer = new PreFecBer();
        this.preFecBer = preFecBer;
        insertChild(preFecBer, childrenNames());
        return preFecBer;
    }

    /**
     * Deletes container entry "preFecBer".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deletePreFecBer() throws JNCException {
        this.preFecBer = null;
        String path = "pre-fec-ber";
        return delete(path);
    }

    /* Access methods for container child: "post-fec-ber". */

    /**
     * Adds container entry "postFecBer", using an existing object.
     * @param postFecBer The object to add.
     * @return The added child.
     */
    public PostFecBer addPostFecBer(PostFecBer postFecBer) throws JNCException {
        this.postFecBer = postFecBer;
        insertChild(postFecBer, childrenNames());
        return postFecBer;
    }

    /**
     * Adds container entry "postFecBer".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public PostFecBer addPostFecBer() throws JNCException {
        PostFecBer postFecBer = new PostFecBer();
        this.postFecBer = postFecBer;
        insertChild(postFecBer, childrenNames());
        return postFecBer;
    }

    /**
     * Deletes container entry "postFecBer".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deletePostFecBer() throws JNCException {
        this.postFecBer = null;
        String path = "post-fec-ber";
        return delete(path);
    }

    /* Access methods for container child: "q-value". */

    /**
     * Adds container entry "qValue", using an existing object.
     * @param qValue The object to add.
     * @return The added child.
     */
    public QValue addQValue(QValue qValue) throws JNCException {
        this.qValue = qValue;
        insertChild(qValue, childrenNames());
        return qValue;
    }

    /**
     * Adds container entry "qValue".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public QValue addQValue() throws JNCException {
        QValue qValue = new QValue();
        this.qValue = qValue;
        insertChild(qValue, childrenNames());
        return qValue;
    }

    /**
     * Deletes container entry "qValue".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteQValue() throws JNCException {
        this.qValue = null;
        String path = "q-value";
        return delete(path);
    }

    /* Access methods for container child: "esnr". */

    /**
     * Adds container entry "esnr", using an existing object.
     * @param esnr The object to add.
     * @return The added child.
     */
    public Esnr addEsnr(Esnr esnr) throws JNCException {
        this.esnr = esnr;
        insertChild(esnr, childrenNames());
        return esnr;
    }

    /**
     * Adds container entry "esnr".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Esnr addEsnr() throws JNCException {
        Esnr esnr = new Esnr();
        this.esnr = esnr;
        insertChild(esnr, childrenNames());
        return esnr;
    }

    /**
     * Deletes container entry "esnr".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteEsnr() throws JNCException {
        this.esnr = null;
        String path = "esnr";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof PreFecBer) preFecBer = (PreFecBer)child;
        else if (child instanceof PostFecBer) postFecBer = (PostFecBer)child;
        else if (child instanceof QValue) qValue = (QValue)child;
        else if (child instanceof Esnr) esnr = (Esnr)child;
    }

}

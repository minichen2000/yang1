/* 
 * @(#)Assignment.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-terminal-device", revision: "2017-07-08".
 */

package com.nokia.eml.yang.openconfigTerminalDevice.terminalDevice.logicalChannels.channel.logicalChannelAssignments;

import com.nokia.eml.yang.openconfigTerminalDevice.OcOptTerm;
import com.nokia.eml.yang.openconfigTerminalDevice.terminalDevice.logicalChannels.channel.logicalChannelAssignments.assignment.Config;
import com.nokia.eml.yang.openconfigTerminalDevice.terminalDevice.logicalChannels.channel.logicalChannelAssignments.assignment.State;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/terminal-device
 * generated to "src/com/nokia/eml/yang/openconfigTerminalDevice/terminalDevice/logicalChannels/channel/logicalChannelAssignments/assignment"
 * <p>
 * See line 546 in
 * /root/nokia-yang/optical-transport/openconfig-terminal-device.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class Assignment extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "config".
     */
    public Config config = null;

    /**
     * Field for child container "state".
     */
    public State state = null;

    /**
     * Constructor for an empty Assignment object.
     */
    public Assignment() {
        super(OcOptTerm.NAMESPACE, "assignment");
    }

    /**
     * Constructor for an initialized Assignment object,
     * 
     * @param indexValue Key argument of child.
     */
    public Assignment(YangUInt32 indexValue) throws JNCException {
        super(OcOptTerm.NAMESPACE, "assignment");
        Leaf index = new Leaf(OcOptTerm.NAMESPACE, "index");
        index.setValue(indexValue);
        insertChild(index, childrenNames());
    }

    /**
     * Constructor for an initialized Assignment object,
     * with String keys.
     * @param indexValue Key argument of child.
     */
    public Assignment(String indexValue) throws JNCException {
        super(OcOptTerm.NAMESPACE, "assignment");
        Leaf index = new Leaf(OcOptTerm.NAMESPACE, "index");
        index.setValue(new YangUInt32(indexValue));
        insertChild(index, childrenNames());
    }

    /**
     * Constructor for an initialized Assignment object,
     * with keys of built in Java types.
     * @param indexValue Key argument of child.
     */
    public Assignment(long indexValue) throws JNCException {
        super(OcOptTerm.NAMESPACE, "assignment");
        Leaf index = new Leaf(OcOptTerm.NAMESPACE, "index");
        index.setValue(new YangUInt32(indexValue));
        insertChild(index, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Assignment clone() {
        Assignment copy;
        try {
            copy = new Assignment(getIndexValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Assignment)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Assignment cloneShallow() {
        Assignment copy;
        try {
            copy = new Assignment(getIndexValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (Assignment)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "index",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "index",
            "config",
            "state",
        };
    }

    /* Access methods for leaf child: "index". */

    /**
     * Gets the value for child leaf "index".
     * @return The value of the leaf.
     */
    public YangUInt32 getIndexValue() throws JNCException {
        return (YangUInt32)getValue("index");
    }

    /**
     * Sets the value for child leaf "index",
     * using instance of generated typedef class.
     * @param indexValue The value to set.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(YangUInt32 indexValue) throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "index",
            indexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "index",
     * using Java primitive values.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(long indexValue) throws JNCException {
        setIndexValue(new YangUInt32(indexValue));
    }

    /**
     * Sets the value for child leaf "index",
     * using a String value.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(String indexValue) throws JNCException {
        setIndexValue(new YangUInt32(indexValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "index" leaf will not have a value.
     */
    public void addIndex() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "index",
            null,
            childrenNames());
    }

    /* Access methods for container child: "config". */

    /**
     * Adds container entry "config", using an existing object.
     * @param config The object to add.
     * @return The added child.
     */
    public Config addConfig(Config config) throws JNCException {
        this.config = config;
        insertChild(config, childrenNames());
        return config;
    }

    /**
     * Adds container entry "config".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Config addConfig() throws JNCException {
        Config config = new Config();
        this.config = config;
        insertChild(config, childrenNames());
        return config;
    }

    /**
     * Deletes container entry "config".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteConfig() throws JNCException {
        this.config = null;
        String path = "config";
        return delete(path);
    }

    /* Access methods for container child: "state". */

    /**
     * Adds container entry "state", using an existing object.
     * @param state The object to add.
     * @return The added child.
     */
    public State addState(State state) throws JNCException {
        this.state = state;
        insertChild(state, childrenNames());
        return state;
    }

    /**
     * Adds container entry "state".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public State addState() throws JNCException {
        State state = new State();
        this.state = state;
        insertChild(state, childrenNames());
        return state;
    }

    /**
     * Deletes container entry "state".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteState() throws JNCException {
        this.state = null;
        String path = "state";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Config) config = (Config)child;
        else if (child instanceof State) state = (State)child;
    }

}

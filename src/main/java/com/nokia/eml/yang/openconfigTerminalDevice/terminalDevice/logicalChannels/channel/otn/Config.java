/* 
 * @(#)Config.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-terminal-device", revision: "2017-07-08".
 */

package com.nokia.eml.yang.openconfigTerminalDevice.terminalDevice.logicalChannels.channel.otn;

import com.nokia.eml.yang.openconfigTerminalDevice.OcOptTerm;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/terminal-device
 * generated to "src/com/nokia/eml/yang/openconfigTerminalDevice/terminalDevice/logicalChannels/channel/otn/config"
 * <p>
 * See line 331 in
 * /root/nokia-yang/optical-transport/openconfig-terminal-device.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class Config extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Config object.
     */
    public Config() {
        super(OcOptTerm.NAMESPACE, "config");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Config clone() {
        return (Config)cloneContent(new Config());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Config cloneShallow() {
        return (Config)cloneShallowContent(new Config());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "tti-msg-transmit",
            "tti-msg-expected",
            "tti-msg-auto",
        };
    }

    /* Access methods for optional leaf child: "tti-msg-transmit". */

    /**
     * Gets the value for child leaf "tti-msg-transmit".
     * @return The value of the leaf.
     */
    public YangString getTtiMsgTransmitValue() throws JNCException {
        return (YangString)getValue("tti-msg-transmit");
    }

    /**
     * Sets the value for child leaf "tti-msg-transmit",
     * using instance of generated typedef class.
     * @param ttiMsgTransmitValue The value to set.
     * @param ttiMsgTransmitValue used during instantiation.
     */
    public void setTtiMsgTransmitValue(YangString ttiMsgTransmitValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "tti-msg-transmit",
            ttiMsgTransmitValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tti-msg-transmit",
     * using a String value.
     * @param ttiMsgTransmitValue used during instantiation.
     */
    public void setTtiMsgTransmitValue(String ttiMsgTransmitValue)
            throws JNCException {
        setTtiMsgTransmitValue(new YangString(ttiMsgTransmitValue));
    }

    /**
     * Unsets the value for child leaf "tti-msg-transmit".
     */
    public void unsetTtiMsgTransmitValue() throws JNCException {
        delete("tti-msg-transmit");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tti-msg-transmit" leaf will not have a value.
     */
    public void addTtiMsgTransmit() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "tti-msg-transmit",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tti-msg-transmit" with operation "replace".
     */
    public void markTtiMsgTransmitReplace() throws JNCException {
        markLeafReplace("ttiMsgTransmit");
    }

    /**
     * Marks the leaf "tti-msg-transmit" with operation "merge".
     */
    public void markTtiMsgTransmitMerge() throws JNCException {
        markLeafMerge("ttiMsgTransmit");
    }

    /**
     * Marks the leaf "tti-msg-transmit" with operation "create".
     */
    public void markTtiMsgTransmitCreate() throws JNCException {
        markLeafCreate("ttiMsgTransmit");
    }

    /**
     * Marks the leaf "tti-msg-transmit" with operation "delete".
     */
    public void markTtiMsgTransmitDelete() throws JNCException {
        markLeafDelete("ttiMsgTransmit");
    }

    /* Access methods for optional leaf child: "tti-msg-expected". */

    /**
     * Gets the value for child leaf "tti-msg-expected".
     * @return The value of the leaf.
     */
    public YangString getTtiMsgExpectedValue() throws JNCException {
        return (YangString)getValue("tti-msg-expected");
    }

    /**
     * Sets the value for child leaf "tti-msg-expected",
     * using instance of generated typedef class.
     * @param ttiMsgExpectedValue The value to set.
     * @param ttiMsgExpectedValue used during instantiation.
     */
    public void setTtiMsgExpectedValue(YangString ttiMsgExpectedValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "tti-msg-expected",
            ttiMsgExpectedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tti-msg-expected",
     * using a String value.
     * @param ttiMsgExpectedValue used during instantiation.
     */
    public void setTtiMsgExpectedValue(String ttiMsgExpectedValue)
            throws JNCException {
        setTtiMsgExpectedValue(new YangString(ttiMsgExpectedValue));
    }

    /**
     * Unsets the value for child leaf "tti-msg-expected".
     */
    public void unsetTtiMsgExpectedValue() throws JNCException {
        delete("tti-msg-expected");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tti-msg-expected" leaf will not have a value.
     */
    public void addTtiMsgExpected() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "tti-msg-expected",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tti-msg-expected" with operation "replace".
     */
    public void markTtiMsgExpectedReplace() throws JNCException {
        markLeafReplace("ttiMsgExpected");
    }

    /**
     * Marks the leaf "tti-msg-expected" with operation "merge".
     */
    public void markTtiMsgExpectedMerge() throws JNCException {
        markLeafMerge("ttiMsgExpected");
    }

    /**
     * Marks the leaf "tti-msg-expected" with operation "create".
     */
    public void markTtiMsgExpectedCreate() throws JNCException {
        markLeafCreate("ttiMsgExpected");
    }

    /**
     * Marks the leaf "tti-msg-expected" with operation "delete".
     */
    public void markTtiMsgExpectedDelete() throws JNCException {
        markLeafDelete("ttiMsgExpected");
    }

    /* Access methods for optional leaf child: "tti-msg-auto". */

    /**
     * Gets the value for child leaf "tti-msg-auto".
     * @return The value of the leaf.
     */
    public YangBoolean getTtiMsgAutoValue() throws JNCException {
        return (YangBoolean)getValue("tti-msg-auto");
    }

    /**
     * Sets the value for child leaf "tti-msg-auto",
     * using instance of generated typedef class.
     * @param ttiMsgAutoValue The value to set.
     * @param ttiMsgAutoValue used during instantiation.
     */
    public void setTtiMsgAutoValue(YangBoolean ttiMsgAutoValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "tti-msg-auto",
            ttiMsgAutoValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tti-msg-auto",
     * using Java primitive values.
     * @param ttiMsgAutoValue used during instantiation.
     */
    public void setTtiMsgAutoValue(Boolean ttiMsgAutoValue) throws JNCException {
        setTtiMsgAutoValue(new YangBoolean(ttiMsgAutoValue));
    }

    /**
     * Sets the value for child leaf "tti-msg-auto",
     * using a String value.
     * @param ttiMsgAutoValue used during instantiation.
     */
    public void setTtiMsgAutoValue(String ttiMsgAutoValue) throws JNCException {
        setTtiMsgAutoValue(new YangBoolean(ttiMsgAutoValue));
    }

    /**
     * Unsets the value for child leaf "tti-msg-auto".
     */
    public void unsetTtiMsgAutoValue() throws JNCException {
        delete("tti-msg-auto");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tti-msg-auto" leaf will not have a value.
     */
    public void addTtiMsgAuto() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "tti-msg-auto",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tti-msg-auto" with operation "replace".
     */
    public void markTtiMsgAutoReplace() throws JNCException {
        markLeafReplace("ttiMsgAuto");
    }

    /**
     * Marks the leaf "tti-msg-auto" with operation "merge".
     */
    public void markTtiMsgAutoMerge() throws JNCException {
        markLeafMerge("ttiMsgAuto");
    }

    /**
     * Marks the leaf "tti-msg-auto" with operation "create".
     */
    public void markTtiMsgAutoCreate() throws JNCException {
        markLeafCreate("ttiMsgAuto");
    }

    /**
     * Marks the leaf "tti-msg-auto" with operation "delete".
     */
    public void markTtiMsgAutoDelete() throws JNCException {
        markLeafDelete("ttiMsgAuto");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

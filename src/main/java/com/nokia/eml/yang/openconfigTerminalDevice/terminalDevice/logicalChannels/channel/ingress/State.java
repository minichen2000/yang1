/* 
 * @(#)State.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-terminal-device", revision: "2017-07-08".
 */

package com.nokia.eml.yang.openconfigTerminalDevice.terminalDevice.logicalChannels.channel.ingress;

import com.nokia.eml.yang.openconfigTerminalDevice.OcOptTerm;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementLeafListValueIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/terminal-device
 * generated to "src/com/nokia/eml/yang/openconfigTerminalDevice/terminalDevice/logicalChannels/channel/ingress/state"
 * <p>
 * See line 656 in
 * /root/nokia-yang/optical-transport/openconfig-terminal-device.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class State extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty State object.
     */
    public State() {
        super(OcOptTerm.NAMESPACE, "state");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public State clone() {
        return (State)cloneContent(new State());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public State cloneShallow() {
        return (State)cloneShallowContent(new State());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "transceiver",
            "physical-channel",
        };
    }

    /* Access methods for optional leaf child: "transceiver". */

    /**
     * Gets the value for child leaf "transceiver".
     * @return The value of the leaf.
     */
    public YangString getTransceiverValue() throws JNCException {
        return (YangString)getValue("transceiver");
    }

    /**
     * Sets the value for child leaf "transceiver",
     * using instance of generated typedef class.
     * @param transceiverValue The value to set.
     * @param transceiverValue used during instantiation.
     */
    public void setTransceiverValue(YangString transceiverValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "transceiver",
            transceiverValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "transceiver",
     * using a String value.
     * @param transceiverValue used during instantiation.
     */
    public void setTransceiverValue(String transceiverValue)
            throws JNCException {
        setTransceiverValue(new YangString(transceiverValue));
    }

    /**
     * Unsets the value for child leaf "transceiver".
     */
    public void unsetTransceiverValue() throws JNCException {
        delete("transceiver");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "transceiver" leaf will not have a value.
     */
    public void addTransceiver() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "transceiver",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "transceiver" with operation "replace".
     */
    public void markTransceiverReplace() throws JNCException {
        markLeafReplace("transceiver");
    }

    /**
     * Marks the leaf "transceiver" with operation "merge".
     */
    public void markTransceiverMerge() throws JNCException {
        markLeafMerge("transceiver");
    }

    /**
     * Marks the leaf "transceiver" with operation "create".
     */
    public void markTransceiverCreate() throws JNCException {
        markLeafCreate("transceiver");
    }

    /**
     * Marks the leaf "transceiver" with operation "delete".
     */
    public void markTransceiverDelete() throws JNCException {
        markLeafDelete("transceiver");
    }

    /* Access methods for optional leaf-list child: "physical-channel". */

    /**
     * Iterator method for the leaf-list "physical-channel".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator physicalChannelIterator() {
        return new ElementLeafListValueIterator(children, "physical-channel");
    }

    /**
     * Sets the value for child leaf-list "physical-channel",
     * using instance of generated typedef class.
     * @param physicalChannelValue The value to set.
     * @param physicalChannelValue used during instantiation.
     */
    public void setPhysicalChannelValue(YangUInt16 physicalChannelValue)
            throws JNCException {
        setLeafListValue(OcOptTerm.NAMESPACE,
            "physical-channel",
            physicalChannelValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "physical-channel",
     * using Java primitive values.
     * @param physicalChannelValue used during instantiation.
     */
    public void setPhysicalChannelValue(int physicalChannelValue)
            throws JNCException {
        setPhysicalChannelValue(new YangUInt16(physicalChannelValue));
    }

    /**
     * Sets the value for child leaf-list "physical-channel",
     * using a String value.
     * @param physicalChannelValue used during instantiation.
     */
    public void setPhysicalChannelValue(String physicalChannelValue)
            throws JNCException {
        setPhysicalChannelValue(new YangUInt16(physicalChannelValue));
    }

    /**
     * Deletes leaf-list entry "physicalChannel".
     * @param physicalChannelValue Value to delete.
     */
    public void deletePhysicalChannel(YangUInt16 physicalChannelValue)
            throws JNCException {
        String path = "physicalChannel[physicalChannelValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "physicalChannel".
     * The value is specified as a string.
     * @param physicalChannelValue Value to delete.
     */
    public void deletePhysicalChannel(String physicalChannelValue)
            throws JNCException {
        String path = "physicalChannel[physicalChannelValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "physical-channel" leaf-list will not have a value.
     */
    public void addPhysicalChannel() throws JNCException {
        setLeafListValue(OcOptTerm.NAMESPACE,
            "physical-channel",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "physical-channel" with operation "replace".
     * @param physicalChannelValue The value to mark
     */
    public void markPhysicalChannelReplace(YangUInt16 physicalChannelValue)
            throws JNCException {
        markLeafReplace("physicalChannel[name='" + physicalChannelValue + "']");
    }

    /**
     * Marks the leaf-list "physical-channel" with operation "replace".
     * @param physicalChannelValue The value to mark, given as a String
     */
    public void markPhysicalChannelReplace(String physicalChannelValue)
            throws JNCException {
        markLeafReplace("physicalChannel[name='" + physicalChannelValue + "']");
    }

    /**
     * Marks the leaf-list "physical-channel" with operation "merge".
     * @param physicalChannelValue The value to mark
     */
    public void markPhysicalChannelMerge(YangUInt16 physicalChannelValue)
            throws JNCException {
        markLeafMerge("physicalChannel[name='" + physicalChannelValue + "']");
    }

    /**
     * Marks the leaf-list "physical-channel" with operation "merge".
     * @param physicalChannelValue The value to mark, given as a String
     */
    public void markPhysicalChannelMerge(String physicalChannelValue)
            throws JNCException {
        markLeafMerge("physicalChannel[name='" + physicalChannelValue + "']");
    }

    /**
     * Marks the leaf-list "physical-channel" with operation "create".
     * @param physicalChannelValue The value to mark
     */
    public void markPhysicalChannelCreate(YangUInt16 physicalChannelValue)
            throws JNCException {
        markLeafCreate("physicalChannel[name='" + physicalChannelValue + "']");
    }

    /**
     * Marks the leaf-list "physical-channel" with operation "create".
     * @param physicalChannelValue The value to mark, given as a String
     */
    public void markPhysicalChannelCreate(String physicalChannelValue)
            throws JNCException {
        markLeafCreate("physicalChannel[name='" + physicalChannelValue + "']");
    }

    /**
     * Marks the leaf-list "physical-channel" with operation "delete".
     * @param physicalChannelValue The value to mark
     */
    public void markPhysicalChannelDelete(YangUInt16 physicalChannelValue)
            throws JNCException {
        markLeafDelete("physicalChannel[name='" + physicalChannelValue + "']");
    }

    /**
     * Marks the leaf-list "physical-channel" with operation "delete".
     * @param physicalChannelValue The value to mark, given as a String
     */
    public void markPhysicalChannelDelete(String physicalChannelValue)
            throws JNCException {
        markLeafDelete("physicalChannel[name='" + physicalChannelValue + "']");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

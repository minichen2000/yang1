/* 
 * @(#)State.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-interfaces", revision: "2018-01-05".
 */

package com.nokia.eml.yang.openconfigInterfaces.interfaces.interface_.subinterfaces.subinterface;

import com.nokia.eml.yang.openconfigInterfaces.OcIf;
import com.nokia.eml.yang.openconfigInterfaces.interfaces.interface_.subinterfaces.subinterface.state.Counters;
import com.nokia.eml.yang.openconfigTypes.Timeticks64;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;

import java.math.BigInteger;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/interfaces
 * generated to "src/com/nokia/eml/yang/openconfigInterfaces/interfaces/interface_/subinterfaces/subinterface/state"
 * <p>
 * See line 919 in
 * /root/nokia-yang/interfaces/openconfig-interfaces.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class State extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "counters".
     */
    public Counters counters = null;

    /**
     * Constructor for an empty State object.
     */
    public State() {
        super(OcIf.NAMESPACE, "state");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public State clone() {
        return (State)cloneContent(new State());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public State cloneShallow() {
        return (State)cloneShallowContent(new State());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "index",
            "description",
            "enabled",
            "name",
            "ifindex",
            "admin-status",
            "oper-status",
            "last-change",
            "counters",
        };
    }

    /* Access methods for optional leaf child: "index". */

    /**
     * Gets the value for child leaf "index".
     * @return The value of the leaf.
     */
    public YangUInt32 getIndexValue() throws JNCException {
        YangUInt32 index = (YangUInt32)getValue("index");
        if (index == null) {
            index = new YangUInt32("0");  // default
        }
        return index;
    }

    /**
     * Sets the value for child leaf "index",
     * using instance of generated typedef class.
     * @param indexValue The value to set.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(YangUInt32 indexValue) throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "index",
            indexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "index",
     * using Java primitive values.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(long indexValue) throws JNCException {
        setIndexValue(new YangUInt32(indexValue));
    }

    /**
     * Sets the value for child leaf "index",
     * using a String value.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(String indexValue) throws JNCException {
        setIndexValue(new YangUInt32(indexValue));
    }

    /**
     * Unsets the value for child leaf "index".
     */
    public void unsetIndexValue() throws JNCException {
        delete("index");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "index" leaf will not have a value.
     */
    public void addIndex() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "index",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "index" with operation "replace".
     */
    public void markIndexReplace() throws JNCException {
        markLeafReplace("index");
    }

    /**
     * Marks the leaf "index" with operation "merge".
     */
    public void markIndexMerge() throws JNCException {
        markLeafMerge("index");
    }

    /**
     * Marks the leaf "index" with operation "create".
     */
    public void markIndexCreate() throws JNCException {
        markLeafCreate("index");
    }

    /**
     * Marks the leaf "index" with operation "delete".
     */
    public void markIndexDelete() throws JNCException {
        markLeafDelete("index");
    }

    /* Access methods for optional leaf child: "description". */

    /**
     * Gets the value for child leaf "description".
     * @return The value of the leaf.
     */
    public YangString getDescriptionValue() throws JNCException {
        return (YangString)getValue("description");
    }

    /**
     * Sets the value for child leaf "description",
     * using instance of generated typedef class.
     * @param descriptionValue The value to set.
     * @param descriptionValue used during instantiation.
     */
    public void setDescriptionValue(YangString descriptionValue)
            throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "description",
            descriptionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "description",
     * using a String value.
     * @param descriptionValue used during instantiation.
     */
    public void setDescriptionValue(String descriptionValue)
            throws JNCException {
        setDescriptionValue(new YangString(descriptionValue));
    }

    /**
     * Unsets the value for child leaf "description".
     */
    public void unsetDescriptionValue() throws JNCException {
        delete("description");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "description" leaf will not have a value.
     */
    public void addDescription() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "description",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "description" with operation "replace".
     */
    public void markDescriptionReplace() throws JNCException {
        markLeafReplace("description");
    }

    /**
     * Marks the leaf "description" with operation "merge".
     */
    public void markDescriptionMerge() throws JNCException {
        markLeafMerge("description");
    }

    /**
     * Marks the leaf "description" with operation "create".
     */
    public void markDescriptionCreate() throws JNCException {
        markLeafCreate("description");
    }

    /**
     * Marks the leaf "description" with operation "delete".
     */
    public void markDescriptionDelete() throws JNCException {
        markLeafDelete("description");
    }

    /* Access methods for optional leaf child: "enabled". */

    /**
     * Gets the value for child leaf "enabled".
     * @return The value of the leaf.
     */
    public YangBoolean getEnabledValue() throws JNCException {
        YangBoolean enabled = (YangBoolean)getValue("enabled");
        if (enabled == null) {
            enabled = new YangBoolean("true");  // default
        }
        return enabled;
    }

    /**
     * Sets the value for child leaf "enabled",
     * using instance of generated typedef class.
     * @param enabledValue The value to set.
     * @param enabledValue used during instantiation.
     */
    public void setEnabledValue(YangBoolean enabledValue) throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "enabled",
            enabledValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enabled",
     * using Java primitive values.
     * @param enabledValue used during instantiation.
     */
    public void setEnabledValue(Boolean enabledValue) throws JNCException {
        setEnabledValue(new YangBoolean(enabledValue));
    }

    /**
     * Sets the value for child leaf "enabled",
     * using a String value.
     * @param enabledValue used during instantiation.
     */
    public void setEnabledValue(String enabledValue) throws JNCException {
        setEnabledValue(new YangBoolean(enabledValue));
    }

    /**
     * Unsets the value for child leaf "enabled".
     */
    public void unsetEnabledValue() throws JNCException {
        delete("enabled");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enabled" leaf will not have a value.
     */
    public void addEnabled() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "enabled",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enabled" with operation "replace".
     */
    public void markEnabledReplace() throws JNCException {
        markLeafReplace("enabled");
    }

    /**
     * Marks the leaf "enabled" with operation "merge".
     */
    public void markEnabledMerge() throws JNCException {
        markLeafMerge("enabled");
    }

    /**
     * Marks the leaf "enabled" with operation "create".
     */
    public void markEnabledCreate() throws JNCException {
        markLeafCreate("enabled");
    }

    /**
     * Marks the leaf "enabled" with operation "delete".
     */
    public void markEnabledDelete() throws JNCException {
        markLeafDelete("enabled");
    }

    /* Access methods for optional leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * Unsets the value for child leaf "name".
     */
    public void unsetNameValue() throws JNCException {
        delete("name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "name" with operation "replace".
     */
    public void markNameReplace() throws JNCException {
        markLeafReplace("name");
    }

    /**
     * Marks the leaf "name" with operation "merge".
     */
    public void markNameMerge() throws JNCException {
        markLeafMerge("name");
    }

    /**
     * Marks the leaf "name" with operation "create".
     */
    public void markNameCreate() throws JNCException {
        markLeafCreate("name");
    }

    /**
     * Marks the leaf "name" with operation "delete".
     */
    public void markNameDelete() throws JNCException {
        markLeafDelete("name");
    }

    /* Access methods for optional leaf child: "ifindex". */

    /**
     * Gets the value for child leaf "ifindex".
     * @return The value of the leaf.
     */
    public YangUInt32 getIfindexValue() throws JNCException {
        return (YangUInt32)getValue("ifindex");
    }

    /**
     * Sets the value for child leaf "ifindex",
     * using instance of generated typedef class.
     * @param ifindexValue The value to set.
     * @param ifindexValue used during instantiation.
     */
    public void setIfindexValue(YangUInt32 ifindexValue) throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "ifindex",
            ifindexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ifindex",
     * using Java primitive values.
     * @param ifindexValue used during instantiation.
     */
    public void setIfindexValue(long ifindexValue) throws JNCException {
        setIfindexValue(new YangUInt32(ifindexValue));
    }

    /**
     * Sets the value for child leaf "ifindex",
     * using a String value.
     * @param ifindexValue used during instantiation.
     */
    public void setIfindexValue(String ifindexValue) throws JNCException {
        setIfindexValue(new YangUInt32(ifindexValue));
    }

    /**
     * Unsets the value for child leaf "ifindex".
     */
    public void unsetIfindexValue() throws JNCException {
        delete("ifindex");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ifindex" leaf will not have a value.
     */
    public void addIfindex() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "ifindex",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ifindex" with operation "replace".
     */
    public void markIfindexReplace() throws JNCException {
        markLeafReplace("ifindex");
    }

    /**
     * Marks the leaf "ifindex" with operation "merge".
     */
    public void markIfindexMerge() throws JNCException {
        markLeafMerge("ifindex");
    }

    /**
     * Marks the leaf "ifindex" with operation "create".
     */
    public void markIfindexCreate() throws JNCException {
        markLeafCreate("ifindex");
    }

    /**
     * Marks the leaf "ifindex" with operation "delete".
     */
    public void markIfindexDelete() throws JNCException {
        markLeafDelete("ifindex");
    }

    /* Access methods for optional leaf child: "admin-status". */

    /**
     * Gets the value for child leaf "admin-status".
     * @return The value of the leaf.
     */
    public YangEnumeration getAdminStatusValue() throws JNCException {
        return (YangEnumeration)getValue("admin-status");
    }

    /**
     * Sets the value for child leaf "admin-status",
     * using instance of generated typedef class.
     * @param adminStatusValue The value to set.
     * @param adminStatusValue used during instantiation.
     */
    public void setAdminStatusValue(YangEnumeration adminStatusValue)
            throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "admin-status",
            adminStatusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "admin-status",
     * using a String value.
     * @param adminStatusValue used during instantiation.
     */
    public void setAdminStatusValue(String adminStatusValue)
            throws JNCException {
        setAdminStatusValue(new YangEnumeration(adminStatusValue, new String[] {
             "UP",
             "DOWN",
             "TESTING",
        }));
    }

    /**
     * Unsets the value for child leaf "admin-status".
     */
    public void unsetAdminStatusValue() throws JNCException {
        delete("admin-status");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "admin-status" leaf will not have a value.
     */
    public void addAdminStatus() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "admin-status",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "admin-status" with operation "replace".
     */
    public void markAdminStatusReplace() throws JNCException {
        markLeafReplace("adminStatus");
    }

    /**
     * Marks the leaf "admin-status" with operation "merge".
     */
    public void markAdminStatusMerge() throws JNCException {
        markLeafMerge("adminStatus");
    }

    /**
     * Marks the leaf "admin-status" with operation "create".
     */
    public void markAdminStatusCreate() throws JNCException {
        markLeafCreate("adminStatus");
    }

    /**
     * Marks the leaf "admin-status" with operation "delete".
     */
    public void markAdminStatusDelete() throws JNCException {
        markLeafDelete("adminStatus");
    }

    /* Access methods for optional leaf child: "oper-status". */

    /**
     * Gets the value for child leaf "oper-status".
     * @return The value of the leaf.
     */
    public YangEnumeration getOperStatusValue() throws JNCException {
        return (YangEnumeration)getValue("oper-status");
    }

    /**
     * Sets the value for child leaf "oper-status",
     * using instance of generated typedef class.
     * @param operStatusValue The value to set.
     * @param operStatusValue used during instantiation.
     */
    public void setOperStatusValue(YangEnumeration operStatusValue)
            throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "oper-status",
            operStatusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "oper-status",
     * using a String value.
     * @param operStatusValue used during instantiation.
     */
    public void setOperStatusValue(String operStatusValue) throws JNCException {
        setOperStatusValue(new YangEnumeration(operStatusValue, new String[] {
             "UP",
             "DOWN",
             "TESTING",
             "UNKNOWN",
             "DORMANT",
             "NOT_PRESENT",
             "LOWER_LAYER_DOWN",
        }));
    }

    /**
     * Unsets the value for child leaf "oper-status".
     */
    public void unsetOperStatusValue() throws JNCException {
        delete("oper-status");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "oper-status" leaf will not have a value.
     */
    public void addOperStatus() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "oper-status",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "oper-status" with operation "replace".
     */
    public void markOperStatusReplace() throws JNCException {
        markLeafReplace("operStatus");
    }

    /**
     * Marks the leaf "oper-status" with operation "merge".
     */
    public void markOperStatusMerge() throws JNCException {
        markLeafMerge("operStatus");
    }

    /**
     * Marks the leaf "oper-status" with operation "create".
     */
    public void markOperStatusCreate() throws JNCException {
        markLeafCreate("operStatus");
    }

    /**
     * Marks the leaf "oper-status" with operation "delete".
     */
    public void markOperStatusDelete() throws JNCException {
        markLeafDelete("operStatus");
    }

    /* Access methods for optional leaf child: "last-change". */

    /**
     * Gets the value for child leaf "last-change".
     * @return The value of the leaf.
     */
    public Timeticks64 getLastChangeValue() throws JNCException {
        return (Timeticks64)getValue("last-change");
    }

    /**
     * Sets the value for child leaf "last-change",
     * using a JNC type value.
     * @param lastChangeValue The value to set.
     * @param lastChangeValue used during instantiation.
     */
    public void setLastChangeValue(Timeticks64 lastChangeValue)
            throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "last-change",
            lastChangeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "last-change",
     * using Java primitive values.
     * @param lastChangeValue used during instantiation.
     */
    public void setLastChangeValue(BigInteger lastChangeValue)
            throws JNCException {
        setLastChangeValue(new Timeticks64(lastChangeValue));
    }

    /**
     * Sets the value for child leaf "last-change",
     * using a String value.
     * @param lastChangeValue used during instantiation.
     */
    public void setLastChangeValue(String lastChangeValue) throws JNCException {
        setLastChangeValue(new Timeticks64(lastChangeValue));
    }

    /**
     * Unsets the value for child leaf "last-change".
     */
    public void unsetLastChangeValue() throws JNCException {
        delete("last-change");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "last-change" leaf will not have a value.
     */
    public void addLastChange() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "last-change",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "last-change" with operation "replace".
     */
    public void markLastChangeReplace() throws JNCException {
        markLeafReplace("lastChange");
    }

    /**
     * Marks the leaf "last-change" with operation "merge".
     */
    public void markLastChangeMerge() throws JNCException {
        markLeafMerge("lastChange");
    }

    /**
     * Marks the leaf "last-change" with operation "create".
     */
    public void markLastChangeCreate() throws JNCException {
        markLeafCreate("lastChange");
    }

    /**
     * Marks the leaf "last-change" with operation "delete".
     */
    public void markLastChangeDelete() throws JNCException {
        markLeafDelete("lastChange");
    }

    /* Access methods for container child: "counters". */

    /**
     * Adds container entry "counters", using an existing object.
     * @param counters The object to add.
     * @return The added child.
     */
    public Counters addCounters(Counters counters) throws JNCException {
        this.counters = counters;
        insertChild(counters, childrenNames());
        return counters;
    }

    /**
     * Adds container entry "counters".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Counters addCounters() throws JNCException {
        Counters counters = new Counters();
        this.counters = counters;
        insertChild(counters, childrenNames());
        return counters;
    }

    /**
     * Deletes container entry "counters".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteCounters() throws JNCException {
        this.counters = null;
        String path = "counters";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Counters) counters = (Counters)child;
    }

}

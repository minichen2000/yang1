/* 
 * @(#)Subinterfaces.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-interfaces", revision: "2018-01-05".
 */

package com.nokia.eml.yang.openconfigInterfaces.interfaces.interface_;

import com.nokia.eml.yang.openconfigInterfaces.OcIf;
import com.nokia.eml.yang.openconfigInterfaces.interfaces.interface_.subinterfaces.Subinterface;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/interfaces
 * generated to "src/com/nokia/eml/yang/openconfigInterfaces/interfaces/interface_/subinterfaces"
 * <p>
 * See line 891 in
 * /root/nokia-yang/interfaces/openconfig-interfaces.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class Subinterfaces extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Subinterfaces object.
     */
    public Subinterfaces() {
        super(OcIf.NAMESPACE, "subinterfaces");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Subinterfaces clone() {
        return (Subinterfaces)cloneContent(new Subinterfaces());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Subinterfaces cloneShallow() {
        return (Subinterfaces)cloneShallowContent(new Subinterfaces());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "subinterface",
        };
    }

    /* Access methods for list child: "subinterface". */

    /**
     * Gets list entry "subinterface", with specified keys.
     * @param indexValue Key argument of child.
     */
    public Subinterface getSubinterface(YangUInt32 indexValue)
            throws JNCException {
        String path = "subinterface[index='" + indexValue + "']";
        return (Subinterface)searchOne(path);
    }

    /**
     * Gets list entry "subinterface", with specified keys.
     * The keys are specified as strings.
     * @param indexValue Key argument of child.
     */
    public Subinterface getSubinterface(String indexValue) throws JNCException {
        String path = "subinterface[index='" + indexValue + "']";
        return (Subinterface)searchOne(path);
    }

    /**
     * Iterator method for the list "subinterface".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator subinterfaceIterator() {
        return new ElementChildrenIterator(children, "subinterface");
    }

    /**
     * Adds list entry "subinterface", using an existing object.
     * @param subinterface The object to add.
     * @return The added child.
     */
    public Subinterface addSubinterface(Subinterface subinterface)
            throws JNCException {
        insertChild(subinterface, childrenNames());
        return subinterface;
    }

    /**
     * Adds list entry "subinterface", with specified keys.
     * @param indexValue Key argument of child.
     * @return The added child.
     */
    public Subinterface addSubinterface(YangUInt32 indexValue)
            throws JNCException {
        Subinterface subinterface = new Subinterface(indexValue);
        return addSubinterface(subinterface);
    }

    /**
     * Adds list entry "subinterface", with specified keys.
     * The keys are specified as strings.
     * @param indexValue Key argument of child.
     * @return The added child.
     */
    public Subinterface addSubinterface(String indexValue) throws JNCException {
        Subinterface subinterface = new Subinterface(indexValue);
        return addSubinterface(subinterface);
    }

    /**
     * Adds list entry "subinterface".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Subinterface addSubinterface() throws JNCException {
        Subinterface subinterface = new Subinterface();
        insertChild(subinterface, childrenNames());
        return subinterface;
    }

    /**
     * Deletes list entry "subinterface", with specified keys.
     * @param indexValue Key argument of child.
     */
    public void deleteSubinterface(YangUInt32 indexValue) throws JNCException {
        String path = "subinterface[index='" + indexValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "subinterface", with specified keys.
     * The keys are specified as strings.
     * @param indexValue Key argument of child.
     */
    public void deleteSubinterface(String indexValue) throws JNCException {
        String path = "subinterface[index='" + indexValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

/* 
 * @(#)State.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-interfaces", revision: "2018-01-05".
 */

package com.nokia.eml.yang.openconfigInterfaces.interfaces.interface_.ethernet;

import com.nokia.eml.yang.openconfigIfEthernet.OcEth;
import com.nokia.eml.yang.openconfigInterfaces.interfaces.interface_.ethernet.state.Counters;
import com.nokia.eml.yang.openconfigYangTypes.MacAddress;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangIdentityref;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/interfaces
 * generated to "src/com/nokia/eml/yang/openconfigInterfaces/interfaces/interface_/ethernet/state"
 * <p>
 * See line 326 in
 * /root/nokia-yang/interfaces/openconfig-if-ethernet.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class State extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "counters".
     */
    public Counters counters = null;

    /**
     * Constructor for an empty State object.
     */
    public State() {
        super(OcEth.NAMESPACE, "state");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public State clone() {
        return (State)cloneContent(new State());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public State cloneShallow() {
        return (State)cloneShallowContent(new State());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mac-address",
            "auto-negotiate",
            "duplex-mode",
            "port-speed",
            "enable-flow-control",
            "hw-mac-address",
            "negotiated-duplex-mode",
            "negotiated-port-speed",
            "counters",
        };
    }

    /* Access methods for optional leaf child: "mac-address". */

    /**
     * Gets the value for child leaf "mac-address".
     * @return The value of the leaf.
     */
    public MacAddress getMacAddressValue() throws JNCException {
        return (MacAddress)getValue("mac-address");
    }

    /**
     * Sets the value for child leaf "mac-address",
     * using a JNC type value.
     * @param macAddressValue The value to set.
     * @param macAddressValue used during instantiation.
     */
    public void setMacAddressValue(MacAddress macAddressValue)
            throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "mac-address",
            macAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mac-address",
     * using a String value.
     * @param macAddressValue used during instantiation.
     */
    public void setMacAddressValue(String macAddressValue) throws JNCException {
        setMacAddressValue(new MacAddress(macAddressValue));
    }

    /**
     * Unsets the value for child leaf "mac-address".
     */
    public void unsetMacAddressValue() throws JNCException {
        delete("mac-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mac-address" leaf will not have a value.
     */
    public void addMacAddress() throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "mac-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mac-address" with operation "replace".
     */
    public void markMacAddressReplace() throws JNCException {
        markLeafReplace("macAddress");
    }

    /**
     * Marks the leaf "mac-address" with operation "merge".
     */
    public void markMacAddressMerge() throws JNCException {
        markLeafMerge("macAddress");
    }

    /**
     * Marks the leaf "mac-address" with operation "create".
     */
    public void markMacAddressCreate() throws JNCException {
        markLeafCreate("macAddress");
    }

    /**
     * Marks the leaf "mac-address" with operation "delete".
     */
    public void markMacAddressDelete() throws JNCException {
        markLeafDelete("macAddress");
    }

    /* Access methods for optional leaf child: "auto-negotiate". */

    /**
     * Gets the value for child leaf "auto-negotiate".
     * @return The value of the leaf.
     */
    public YangBoolean getAutoNegotiateValue() throws JNCException {
        YangBoolean autoNegotiate = (YangBoolean)getValue("auto-negotiate");
        if (autoNegotiate == null) {
            autoNegotiate = new YangBoolean("true");  // default
        }
        return autoNegotiate;
    }

    /**
     * Sets the value for child leaf "auto-negotiate",
     * using instance of generated typedef class.
     * @param autoNegotiateValue The value to set.
     * @param autoNegotiateValue used during instantiation.
     */
    public void setAutoNegotiateValue(YangBoolean autoNegotiateValue)
            throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "auto-negotiate",
            autoNegotiateValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "auto-negotiate",
     * using Java primitive values.
     * @param autoNegotiateValue used during instantiation.
     */
    public void setAutoNegotiateValue(Boolean autoNegotiateValue)
            throws JNCException {
        setAutoNegotiateValue(new YangBoolean(autoNegotiateValue));
    }

    /**
     * Sets the value for child leaf "auto-negotiate",
     * using a String value.
     * @param autoNegotiateValue used during instantiation.
     */
    public void setAutoNegotiateValue(String autoNegotiateValue)
            throws JNCException {
        setAutoNegotiateValue(new YangBoolean(autoNegotiateValue));
    }

    /**
     * Unsets the value for child leaf "auto-negotiate".
     */
    public void unsetAutoNegotiateValue() throws JNCException {
        delete("auto-negotiate");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "auto-negotiate" leaf will not have a value.
     */
    public void addAutoNegotiate() throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "auto-negotiate",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "auto-negotiate" with operation "replace".
     */
    public void markAutoNegotiateReplace() throws JNCException {
        markLeafReplace("autoNegotiate");
    }

    /**
     * Marks the leaf "auto-negotiate" with operation "merge".
     */
    public void markAutoNegotiateMerge() throws JNCException {
        markLeafMerge("autoNegotiate");
    }

    /**
     * Marks the leaf "auto-negotiate" with operation "create".
     */
    public void markAutoNegotiateCreate() throws JNCException {
        markLeafCreate("autoNegotiate");
    }

    /**
     * Marks the leaf "auto-negotiate" with operation "delete".
     */
    public void markAutoNegotiateDelete() throws JNCException {
        markLeafDelete("autoNegotiate");
    }

    /* Access methods for optional leaf child: "duplex-mode". */

    /**
     * Gets the value for child leaf "duplex-mode".
     * @return The value of the leaf.
     */
    public YangEnumeration getDuplexModeValue() throws JNCException {
        return (YangEnumeration)getValue("duplex-mode");
    }

    /**
     * Sets the value for child leaf "duplex-mode",
     * using instance of generated typedef class.
     * @param duplexModeValue The value to set.
     * @param duplexModeValue used during instantiation.
     */
    public void setDuplexModeValue(YangEnumeration duplexModeValue)
            throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "duplex-mode",
            duplexModeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "duplex-mode",
     * using a String value.
     * @param duplexModeValue used during instantiation.
     */
    public void setDuplexModeValue(String duplexModeValue) throws JNCException {
        setDuplexModeValue(new YangEnumeration(duplexModeValue, new String[] {
             "FULL",
             "HALF",
        }));
    }

    /**
     * Unsets the value for child leaf "duplex-mode".
     */
    public void unsetDuplexModeValue() throws JNCException {
        delete("duplex-mode");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "duplex-mode" leaf will not have a value.
     */
    public void addDuplexMode() throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "duplex-mode",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "duplex-mode" with operation "replace".
     */
    public void markDuplexModeReplace() throws JNCException {
        markLeafReplace("duplexMode");
    }

    /**
     * Marks the leaf "duplex-mode" with operation "merge".
     */
    public void markDuplexModeMerge() throws JNCException {
        markLeafMerge("duplexMode");
    }

    /**
     * Marks the leaf "duplex-mode" with operation "create".
     */
    public void markDuplexModeCreate() throws JNCException {
        markLeafCreate("duplexMode");
    }

    /**
     * Marks the leaf "duplex-mode" with operation "delete".
     */
    public void markDuplexModeDelete() throws JNCException {
        markLeafDelete("duplexMode");
    }

    /* Access methods for optional leaf child: "port-speed". */

    /**
     * Gets the value for child leaf "port-speed".
     * @return The value of the leaf.
     */
    public YangIdentityref getPortSpeedValue() throws JNCException {
        return (YangIdentityref)getValue("port-speed");
    }

    /**
     * Sets the value for child leaf "port-speed",
     * using instance of generated typedef class.
     * @param portSpeedValue The value to set.
     * @param portSpeedValue used during instantiation.
     */
    public void setPortSpeedValue(YangIdentityref portSpeedValue)
            throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "port-speed",
            portSpeedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "port-speed",
     * using a String value.
     * @param portSpeedValue used during instantiation.
     */
    public void setPortSpeedValue(String portSpeedValue) throws JNCException {
        setPortSpeedValue(new YangIdentityref(portSpeedValue));
    }

    /**
     * Unsets the value for child leaf "port-speed".
     */
    public void unsetPortSpeedValue() throws JNCException {
        delete("port-speed");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "port-speed" leaf will not have a value.
     */
    public void addPortSpeed() throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "port-speed",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "port-speed" with operation "replace".
     */
    public void markPortSpeedReplace() throws JNCException {
        markLeafReplace("portSpeed");
    }

    /**
     * Marks the leaf "port-speed" with operation "merge".
     */
    public void markPortSpeedMerge() throws JNCException {
        markLeafMerge("portSpeed");
    }

    /**
     * Marks the leaf "port-speed" with operation "create".
     */
    public void markPortSpeedCreate() throws JNCException {
        markLeafCreate("portSpeed");
    }

    /**
     * Marks the leaf "port-speed" with operation "delete".
     */
    public void markPortSpeedDelete() throws JNCException {
        markLeafDelete("portSpeed");
    }

    /* Access methods for optional leaf child: "enable-flow-control". */

    /**
     * Gets the value for child leaf "enable-flow-control".
     * @return The value of the leaf.
     */
    public YangBoolean getEnableFlowControlValue() throws JNCException {
        YangBoolean enableFlowControl = (YangBoolean)getValue("enable-flow-control");
        if (enableFlowControl == null) {
            enableFlowControl = new YangBoolean("false");  // default
        }
        return enableFlowControl;
    }

    /**
     * Sets the value for child leaf "enable-flow-control",
     * using instance of generated typedef class.
     * @param enableFlowControlValue The value to set.
     * @param enableFlowControlValue used during instantiation.
     */
    public void setEnableFlowControlValue(YangBoolean enableFlowControlValue)
            throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "enable-flow-control",
            enableFlowControlValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enable-flow-control",
     * using Java primitive values.
     * @param enableFlowControlValue used during instantiation.
     */
    public void setEnableFlowControlValue(Boolean enableFlowControlValue)
            throws JNCException {
        setEnableFlowControlValue(new YangBoolean(enableFlowControlValue));
    }

    /**
     * Sets the value for child leaf "enable-flow-control",
     * using a String value.
     * @param enableFlowControlValue used during instantiation.
     */
    public void setEnableFlowControlValue(String enableFlowControlValue)
            throws JNCException {
        setEnableFlowControlValue(new YangBoolean(enableFlowControlValue));
    }

    /**
     * Unsets the value for child leaf "enable-flow-control".
     */
    public void unsetEnableFlowControlValue() throws JNCException {
        delete("enable-flow-control");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enable-flow-control" leaf will not have a value.
     */
    public void addEnableFlowControl() throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "enable-flow-control",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enable-flow-control" with operation "replace".
     */
    public void markEnableFlowControlReplace() throws JNCException {
        markLeafReplace("enableFlowControl");
    }

    /**
     * Marks the leaf "enable-flow-control" with operation "merge".
     */
    public void markEnableFlowControlMerge() throws JNCException {
        markLeafMerge("enableFlowControl");
    }

    /**
     * Marks the leaf "enable-flow-control" with operation "create".
     */
    public void markEnableFlowControlCreate() throws JNCException {
        markLeafCreate("enableFlowControl");
    }

    /**
     * Marks the leaf "enable-flow-control" with operation "delete".
     */
    public void markEnableFlowControlDelete() throws JNCException {
        markLeafDelete("enableFlowControl");
    }

    /* Access methods for optional leaf child: "hw-mac-address". */

    /**
     * Gets the value for child leaf "hw-mac-address".
     * @return The value of the leaf.
     */
    public MacAddress getHwMacAddressValue() throws JNCException {
        return (MacAddress)getValue("hw-mac-address");
    }

    /**
     * Sets the value for child leaf "hw-mac-address",
     * using a JNC type value.
     * @param hwMacAddressValue The value to set.
     * @param hwMacAddressValue used during instantiation.
     */
    public void setHwMacAddressValue(MacAddress hwMacAddressValue)
            throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "hw-mac-address",
            hwMacAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "hw-mac-address",
     * using a String value.
     * @param hwMacAddressValue used during instantiation.
     */
    public void setHwMacAddressValue(String hwMacAddressValue)
            throws JNCException {
        setHwMacAddressValue(new MacAddress(hwMacAddressValue));
    }

    /**
     * Unsets the value for child leaf "hw-mac-address".
     */
    public void unsetHwMacAddressValue() throws JNCException {
        delete("hw-mac-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "hw-mac-address" leaf will not have a value.
     */
    public void addHwMacAddress() throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "hw-mac-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "hw-mac-address" with operation "replace".
     */
    public void markHwMacAddressReplace() throws JNCException {
        markLeafReplace("hwMacAddress");
    }

    /**
     * Marks the leaf "hw-mac-address" with operation "merge".
     */
    public void markHwMacAddressMerge() throws JNCException {
        markLeafMerge("hwMacAddress");
    }

    /**
     * Marks the leaf "hw-mac-address" with operation "create".
     */
    public void markHwMacAddressCreate() throws JNCException {
        markLeafCreate("hwMacAddress");
    }

    /**
     * Marks the leaf "hw-mac-address" with operation "delete".
     */
    public void markHwMacAddressDelete() throws JNCException {
        markLeafDelete("hwMacAddress");
    }

    /* Access methods for optional leaf child: "negotiated-duplex-mode". */

    /**
     * Gets the value for child leaf "negotiated-duplex-mode".
     * @return The value of the leaf.
     */
    public YangEnumeration getNegotiatedDuplexModeValue() throws JNCException {
        return (YangEnumeration)getValue("negotiated-duplex-mode");
    }

    /**
     * Sets the value for child leaf "negotiated-duplex-mode",
     * using instance of generated typedef class.
     * @param negotiatedDuplexModeValue The value to set.
     * @param negotiatedDuplexModeValue used during instantiation.
     */
    public void setNegotiatedDuplexModeValue(YangEnumeration negotiatedDuplexModeValue)
            throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "negotiated-duplex-mode",
            negotiatedDuplexModeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "negotiated-duplex-mode",
     * using a String value.
     * @param negotiatedDuplexModeValue used during instantiation.
     */
    public void setNegotiatedDuplexModeValue(String negotiatedDuplexModeValue)
            throws JNCException {
        setNegotiatedDuplexModeValue(new YangEnumeration(negotiatedDuplexModeValue, new String[] {
             "FULL",
             "HALF",
        }));
    }

    /**
     * Unsets the value for child leaf "negotiated-duplex-mode".
     */
    public void unsetNegotiatedDuplexModeValue() throws JNCException {
        delete("negotiated-duplex-mode");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "negotiated-duplex-mode" leaf will not have a value.
     */
    public void addNegotiatedDuplexMode() throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "negotiated-duplex-mode",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "negotiated-duplex-mode" with operation "replace".
     */
    public void markNegotiatedDuplexModeReplace() throws JNCException {
        markLeafReplace("negotiatedDuplexMode");
    }

    /**
     * Marks the leaf "negotiated-duplex-mode" with operation "merge".
     */
    public void markNegotiatedDuplexModeMerge() throws JNCException {
        markLeafMerge("negotiatedDuplexMode");
    }

    /**
     * Marks the leaf "negotiated-duplex-mode" with operation "create".
     */
    public void markNegotiatedDuplexModeCreate() throws JNCException {
        markLeafCreate("negotiatedDuplexMode");
    }

    /**
     * Marks the leaf "negotiated-duplex-mode" with operation "delete".
     */
    public void markNegotiatedDuplexModeDelete() throws JNCException {
        markLeafDelete("negotiatedDuplexMode");
    }

    /* Access methods for optional leaf child: "negotiated-port-speed". */

    /**
     * Gets the value for child leaf "negotiated-port-speed".
     * @return The value of the leaf.
     */
    public YangIdentityref getNegotiatedPortSpeedValue() throws JNCException {
        return (YangIdentityref)getValue("negotiated-port-speed");
    }

    /**
     * Sets the value for child leaf "negotiated-port-speed",
     * using instance of generated typedef class.
     * @param negotiatedPortSpeedValue The value to set.
     * @param negotiatedPortSpeedValue used during instantiation.
     */
    public void setNegotiatedPortSpeedValue(YangIdentityref negotiatedPortSpeedValue)
            throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "negotiated-port-speed",
            negotiatedPortSpeedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "negotiated-port-speed",
     * using a String value.
     * @param negotiatedPortSpeedValue used during instantiation.
     */
    public void setNegotiatedPortSpeedValue(String negotiatedPortSpeedValue)
            throws JNCException {
        setNegotiatedPortSpeedValue(new YangIdentityref(negotiatedPortSpeedValue));
    }

    /**
     * Unsets the value for child leaf "negotiated-port-speed".
     */
    public void unsetNegotiatedPortSpeedValue() throws JNCException {
        delete("negotiated-port-speed");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "negotiated-port-speed" leaf will not have a value.
     */
    public void addNegotiatedPortSpeed() throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "negotiated-port-speed",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "negotiated-port-speed" with operation "replace".
     */
    public void markNegotiatedPortSpeedReplace() throws JNCException {
        markLeafReplace("negotiatedPortSpeed");
    }

    /**
     * Marks the leaf "negotiated-port-speed" with operation "merge".
     */
    public void markNegotiatedPortSpeedMerge() throws JNCException {
        markLeafMerge("negotiatedPortSpeed");
    }

    /**
     * Marks the leaf "negotiated-port-speed" with operation "create".
     */
    public void markNegotiatedPortSpeedCreate() throws JNCException {
        markLeafCreate("negotiatedPortSpeed");
    }

    /**
     * Marks the leaf "negotiated-port-speed" with operation "delete".
     */
    public void markNegotiatedPortSpeedDelete() throws JNCException {
        markLeafDelete("negotiatedPortSpeed");
    }

    /* Access methods for container child: "counters". */

    /**
     * Adds container entry "counters", using an existing object.
     * @param counters The object to add.
     * @return The added child.
     */
    public Counters addCounters(Counters counters) throws JNCException {
        this.counters = counters;
        insertChild(counters, childrenNames());
        return counters;
    }

    /**
     * Adds container entry "counters".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Counters addCounters() throws JNCException {
        Counters counters = new Counters();
        this.counters = counters;
        insertChild(counters, childrenNames());
        return counters;
    }

    /**
     * Deletes container entry "counters".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteCounters() throws JNCException {
        this.counters = null;
        String path = "counters";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Counters) counters = (Counters)child;
    }

}

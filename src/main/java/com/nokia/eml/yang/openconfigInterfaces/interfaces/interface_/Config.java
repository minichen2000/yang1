/* 
 * @(#)Config.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-interfaces", revision: "2018-01-05".
 */

package com.nokia.eml.yang.openconfigInterfaces.interfaces.interface_;

import com.nokia.eml.yang.openconfigInterfaces.OcIf;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangIdentityref;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/interfaces
 * generated to "src/com/nokia/eml/yang/openconfigInterfaces/interfaces/interface_/config"
 * <p>
 * See line 964 in
 * /root/nokia-yang/interfaces/openconfig-interfaces.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class Config extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Config object.
     */
    public Config() {
        super(OcIf.NAMESPACE, "config");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Config clone() {
        return (Config)cloneContent(new Config());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Config cloneShallow() {
        return (Config)cloneShallowContent(new Config());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "type",
            "mtu",
            "loopback-mode",
            "description",
            "enabled",
        };
    }

    /* Access methods for optional leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * Unsets the value for child leaf "name".
     */
    public void unsetNameValue() throws JNCException {
        delete("name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "name" with operation "replace".
     */
    public void markNameReplace() throws JNCException {
        markLeafReplace("name");
    }

    /**
     * Marks the leaf "name" with operation "merge".
     */
    public void markNameMerge() throws JNCException {
        markLeafMerge("name");
    }

    /**
     * Marks the leaf "name" with operation "create".
     */
    public void markNameCreate() throws JNCException {
        markLeafCreate("name");
    }

    /**
     * Marks the leaf "name" with operation "delete".
     */
    public void markNameDelete() throws JNCException {
        markLeafDelete("name");
    }

    /* Access methods for optional leaf child: "type". */

    /**
     * Gets the value for child leaf "type".
     * @return The value of the leaf.
     */
    public YangIdentityref getTypeValue() throws JNCException {
        return (YangIdentityref)getValue("type");
    }

    /**
     * Sets the value for child leaf "type",
     * using instance of generated typedef class.
     * @param typeValue The value to set.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(YangIdentityref typeValue) throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "type",
            typeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "type",
     * using a String value.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(String typeValue) throws JNCException {
        setTypeValue(new YangIdentityref(typeValue));
    }

    /**
     * Unsets the value for child leaf "type".
     */
    public void unsetTypeValue() throws JNCException {
        delete("type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "type" leaf will not have a value.
     */
    public void addType() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "type" with operation "replace".
     */
    public void markTypeReplace() throws JNCException {
        markLeafReplace("type");
    }

    /**
     * Marks the leaf "type" with operation "merge".
     */
    public void markTypeMerge() throws JNCException {
        markLeafMerge("type");
    }

    /**
     * Marks the leaf "type" with operation "create".
     */
    public void markTypeCreate() throws JNCException {
        markLeafCreate("type");
    }

    /**
     * Marks the leaf "type" with operation "delete".
     */
    public void markTypeDelete() throws JNCException {
        markLeafDelete("type");
    }

    /* Access methods for optional leaf child: "mtu". */

    /**
     * Gets the value for child leaf "mtu".
     * @return The value of the leaf.
     */
    public YangUInt16 getMtuValue() throws JNCException {
        return (YangUInt16)getValue("mtu");
    }

    /**
     * Sets the value for child leaf "mtu",
     * using instance of generated typedef class.
     * @param mtuValue The value to set.
     * @param mtuValue used during instantiation.
     */
    public void setMtuValue(YangUInt16 mtuValue) throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "mtu",
            mtuValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mtu",
     * using Java primitive values.
     * @param mtuValue used during instantiation.
     */
    public void setMtuValue(int mtuValue) throws JNCException {
        setMtuValue(new YangUInt16(mtuValue));
    }

    /**
     * Sets the value for child leaf "mtu",
     * using a String value.
     * @param mtuValue used during instantiation.
     */
    public void setMtuValue(String mtuValue) throws JNCException {
        setMtuValue(new YangUInt16(mtuValue));
    }

    /**
     * Unsets the value for child leaf "mtu".
     */
    public void unsetMtuValue() throws JNCException {
        delete("mtu");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mtu" leaf will not have a value.
     */
    public void addMtu() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "mtu",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mtu" with operation "replace".
     */
    public void markMtuReplace() throws JNCException {
        markLeafReplace("mtu");
    }

    /**
     * Marks the leaf "mtu" with operation "merge".
     */
    public void markMtuMerge() throws JNCException {
        markLeafMerge("mtu");
    }

    /**
     * Marks the leaf "mtu" with operation "create".
     */
    public void markMtuCreate() throws JNCException {
        markLeafCreate("mtu");
    }

    /**
     * Marks the leaf "mtu" with operation "delete".
     */
    public void markMtuDelete() throws JNCException {
        markLeafDelete("mtu");
    }

    /* Access methods for optional leaf child: "loopback-mode". */

    /**
     * Gets the value for child leaf "loopback-mode".
     * @return The value of the leaf.
     */
    public YangBoolean getLoopbackModeValue() throws JNCException {
        YangBoolean loopbackMode = (YangBoolean)getValue("loopback-mode");
        if (loopbackMode == null) {
            loopbackMode = new YangBoolean("false");  // default
        }
        return loopbackMode;
    }

    /**
     * Sets the value for child leaf "loopback-mode",
     * using instance of generated typedef class.
     * @param loopbackModeValue The value to set.
     * @param loopbackModeValue used during instantiation.
     */
    public void setLoopbackModeValue(YangBoolean loopbackModeValue)
            throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "loopback-mode",
            loopbackModeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "loopback-mode",
     * using Java primitive values.
     * @param loopbackModeValue used during instantiation.
     */
    public void setLoopbackModeValue(Boolean loopbackModeValue)
            throws JNCException {
        setLoopbackModeValue(new YangBoolean(loopbackModeValue));
    }

    /**
     * Sets the value for child leaf "loopback-mode",
     * using a String value.
     * @param loopbackModeValue used during instantiation.
     */
    public void setLoopbackModeValue(String loopbackModeValue)
            throws JNCException {
        setLoopbackModeValue(new YangBoolean(loopbackModeValue));
    }

    /**
     * Unsets the value for child leaf "loopback-mode".
     */
    public void unsetLoopbackModeValue() throws JNCException {
        delete("loopback-mode");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "loopback-mode" leaf will not have a value.
     */
    public void addLoopbackMode() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "loopback-mode",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "loopback-mode" with operation "replace".
     */
    public void markLoopbackModeReplace() throws JNCException {
        markLeafReplace("loopbackMode");
    }

    /**
     * Marks the leaf "loopback-mode" with operation "merge".
     */
    public void markLoopbackModeMerge() throws JNCException {
        markLeafMerge("loopbackMode");
    }

    /**
     * Marks the leaf "loopback-mode" with operation "create".
     */
    public void markLoopbackModeCreate() throws JNCException {
        markLeafCreate("loopbackMode");
    }

    /**
     * Marks the leaf "loopback-mode" with operation "delete".
     */
    public void markLoopbackModeDelete() throws JNCException {
        markLeafDelete("loopbackMode");
    }

    /* Access methods for optional leaf child: "description". */

    /**
     * Gets the value for child leaf "description".
     * @return The value of the leaf.
     */
    public YangString getDescriptionValue() throws JNCException {
        return (YangString)getValue("description");
    }

    /**
     * Sets the value for child leaf "description",
     * using instance of generated typedef class.
     * @param descriptionValue The value to set.
     * @param descriptionValue used during instantiation.
     */
    public void setDescriptionValue(YangString descriptionValue)
            throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "description",
            descriptionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "description",
     * using a String value.
     * @param descriptionValue used during instantiation.
     */
    public void setDescriptionValue(String descriptionValue)
            throws JNCException {
        setDescriptionValue(new YangString(descriptionValue));
    }

    /**
     * Unsets the value for child leaf "description".
     */
    public void unsetDescriptionValue() throws JNCException {
        delete("description");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "description" leaf will not have a value.
     */
    public void addDescription() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "description",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "description" with operation "replace".
     */
    public void markDescriptionReplace() throws JNCException {
        markLeafReplace("description");
    }

    /**
     * Marks the leaf "description" with operation "merge".
     */
    public void markDescriptionMerge() throws JNCException {
        markLeafMerge("description");
    }

    /**
     * Marks the leaf "description" with operation "create".
     */
    public void markDescriptionCreate() throws JNCException {
        markLeafCreate("description");
    }

    /**
     * Marks the leaf "description" with operation "delete".
     */
    public void markDescriptionDelete() throws JNCException {
        markLeafDelete("description");
    }

    /* Access methods for optional leaf child: "enabled". */

    /**
     * Gets the value for child leaf "enabled".
     * @return The value of the leaf.
     */
    public YangBoolean getEnabledValue() throws JNCException {
        YangBoolean enabled = (YangBoolean)getValue("enabled");
        if (enabled == null) {
            enabled = new YangBoolean("true");  // default
        }
        return enabled;
    }

    /**
     * Sets the value for child leaf "enabled",
     * using instance of generated typedef class.
     * @param enabledValue The value to set.
     * @param enabledValue used during instantiation.
     */
    public void setEnabledValue(YangBoolean enabledValue) throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "enabled",
            enabledValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enabled",
     * using Java primitive values.
     * @param enabledValue used during instantiation.
     */
    public void setEnabledValue(Boolean enabledValue) throws JNCException {
        setEnabledValue(new YangBoolean(enabledValue));
    }

    /**
     * Sets the value for child leaf "enabled",
     * using a String value.
     * @param enabledValue used during instantiation.
     */
    public void setEnabledValue(String enabledValue) throws JNCException {
        setEnabledValue(new YangBoolean(enabledValue));
    }

    /**
     * Unsets the value for child leaf "enabled".
     */
    public void unsetEnabledValue() throws JNCException {
        delete("enabled");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enabled" leaf will not have a value.
     */
    public void addEnabled() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "enabled",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enabled" with operation "replace".
     */
    public void markEnabledReplace() throws JNCException {
        markLeafReplace("enabled");
    }

    /**
     * Marks the leaf "enabled" with operation "merge".
     */
    public void markEnabledMerge() throws JNCException {
        markLeafMerge("enabled");
    }

    /**
     * Marks the leaf "enabled" with operation "create".
     */
    public void markEnabledCreate() throws JNCException {
        markLeafCreate("enabled");
    }

    /**
     * Marks the leaf "enabled" with operation "delete".
     */
    public void markEnabledDelete() throws JNCException {
        markLeafDelete("enabled");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

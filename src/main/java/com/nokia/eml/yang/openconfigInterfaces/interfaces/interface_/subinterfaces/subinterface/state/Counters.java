/* 
 * @(#)Counters.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-interfaces", revision: "2018-01-05".
 */

package com.nokia.eml.yang.openconfigInterfaces.interfaces.interface_.subinterfaces.subinterface.state;

import com.nokia.eml.yang.openconfigInterfaces.OcIf;
import com.nokia.eml.yang.openconfigTypes.Timeticks64;
import com.nokia.eml.yang.openconfigYangTypes.Counter64;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;

import java.math.BigInteger;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/interfaces
 * generated to "src/com/nokia/eml/yang/openconfigInterfaces/interfaces/interface_/subinterfaces/subinterface/state/counters"
 * <p>
 * See line 540 in
 * /root/nokia-yang/interfaces/openconfig-interfaces.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class Counters extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Counters object.
     */
    public Counters() {
        super(OcIf.NAMESPACE, "counters");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Counters clone() {
        return (Counters)cloneContent(new Counters());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Counters cloneShallow() {
        return (Counters)cloneShallowContent(new Counters());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "in-octets",
            "in-unicast-pkts",
            "in-broadcast-pkts",
            "in-multicast-pkts",
            "in-discards",
            "in-errors",
            "in-unknown-protos",
            "in-fcs-errors",
            "out-octets",
            "out-unicast-pkts",
            "out-broadcast-pkts",
            "out-multicast-pkts",
            "out-discards",
            "out-errors",
            "carrier-transitions",
            "last-clear",
        };
    }

    /* Access methods for optional leaf child: "in-octets". */

    /**
     * Gets the value for child leaf "in-octets".
     * @return The value of the leaf.
     */
    public Counter64 getInOctetsValue() throws JNCException {
        return (Counter64)getValue("in-octets");
    }

    /**
     * Sets the value for child leaf "in-octets",
     * using a JNC type value.
     * @param inOctetsValue The value to set.
     * @param inOctetsValue used during instantiation.
     */
    public void setInOctetsValue(Counter64 inOctetsValue) throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "in-octets",
            inOctetsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-octets",
     * using Java primitive values.
     * @param inOctetsValue used during instantiation.
     */
    public void setInOctetsValue(BigInteger inOctetsValue) throws JNCException {
        setInOctetsValue(new Counter64(inOctetsValue));
    }

    /**
     * Sets the value for child leaf "in-octets",
     * using a String value.
     * @param inOctetsValue used during instantiation.
     */
    public void setInOctetsValue(String inOctetsValue) throws JNCException {
        setInOctetsValue(new Counter64(inOctetsValue));
    }

    /**
     * Unsets the value for child leaf "in-octets".
     */
    public void unsetInOctetsValue() throws JNCException {
        delete("in-octets");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-octets" leaf will not have a value.
     */
    public void addInOctets() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "in-octets",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-octets" with operation "replace".
     */
    public void markInOctetsReplace() throws JNCException {
        markLeafReplace("inOctets");
    }

    /**
     * Marks the leaf "in-octets" with operation "merge".
     */
    public void markInOctetsMerge() throws JNCException {
        markLeafMerge("inOctets");
    }

    /**
     * Marks the leaf "in-octets" with operation "create".
     */
    public void markInOctetsCreate() throws JNCException {
        markLeafCreate("inOctets");
    }

    /**
     * Marks the leaf "in-octets" with operation "delete".
     */
    public void markInOctetsDelete() throws JNCException {
        markLeafDelete("inOctets");
    }

    /* Access methods for optional leaf child: "in-unicast-pkts". */

    /**
     * Gets the value for child leaf "in-unicast-pkts".
     * @return The value of the leaf.
     */
    public Counter64 getInUnicastPktsValue() throws JNCException {
        return (Counter64)getValue("in-unicast-pkts");
    }

    /**
     * Sets the value for child leaf "in-unicast-pkts",
     * using a JNC type value.
     * @param inUnicastPktsValue The value to set.
     * @param inUnicastPktsValue used during instantiation.
     */
    public void setInUnicastPktsValue(Counter64 inUnicastPktsValue)
            throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "in-unicast-pkts",
            inUnicastPktsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-unicast-pkts",
     * using Java primitive values.
     * @param inUnicastPktsValue used during instantiation.
     */
    public void setInUnicastPktsValue(BigInteger inUnicastPktsValue)
            throws JNCException {
        setInUnicastPktsValue(new Counter64(inUnicastPktsValue));
    }

    /**
     * Sets the value for child leaf "in-unicast-pkts",
     * using a String value.
     * @param inUnicastPktsValue used during instantiation.
     */
    public void setInUnicastPktsValue(String inUnicastPktsValue)
            throws JNCException {
        setInUnicastPktsValue(new Counter64(inUnicastPktsValue));
    }

    /**
     * Unsets the value for child leaf "in-unicast-pkts".
     */
    public void unsetInUnicastPktsValue() throws JNCException {
        delete("in-unicast-pkts");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-unicast-pkts" leaf will not have a value.
     */
    public void addInUnicastPkts() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "in-unicast-pkts",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-unicast-pkts" with operation "replace".
     */
    public void markInUnicastPktsReplace() throws JNCException {
        markLeafReplace("inUnicastPkts");
    }

    /**
     * Marks the leaf "in-unicast-pkts" with operation "merge".
     */
    public void markInUnicastPktsMerge() throws JNCException {
        markLeafMerge("inUnicastPkts");
    }

    /**
     * Marks the leaf "in-unicast-pkts" with operation "create".
     */
    public void markInUnicastPktsCreate() throws JNCException {
        markLeafCreate("inUnicastPkts");
    }

    /**
     * Marks the leaf "in-unicast-pkts" with operation "delete".
     */
    public void markInUnicastPktsDelete() throws JNCException {
        markLeafDelete("inUnicastPkts");
    }

    /* Access methods for optional leaf child: "in-broadcast-pkts". */

    /**
     * Gets the value for child leaf "in-broadcast-pkts".
     * @return The value of the leaf.
     */
    public Counter64 getInBroadcastPktsValue() throws JNCException {
        return (Counter64)getValue("in-broadcast-pkts");
    }

    /**
     * Sets the value for child leaf "in-broadcast-pkts",
     * using a JNC type value.
     * @param inBroadcastPktsValue The value to set.
     * @param inBroadcastPktsValue used during instantiation.
     */
    public void setInBroadcastPktsValue(Counter64 inBroadcastPktsValue)
            throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "in-broadcast-pkts",
            inBroadcastPktsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-broadcast-pkts",
     * using Java primitive values.
     * @param inBroadcastPktsValue used during instantiation.
     */
    public void setInBroadcastPktsValue(BigInteger inBroadcastPktsValue)
            throws JNCException {
        setInBroadcastPktsValue(new Counter64(inBroadcastPktsValue));
    }

    /**
     * Sets the value for child leaf "in-broadcast-pkts",
     * using a String value.
     * @param inBroadcastPktsValue used during instantiation.
     */
    public void setInBroadcastPktsValue(String inBroadcastPktsValue)
            throws JNCException {
        setInBroadcastPktsValue(new Counter64(inBroadcastPktsValue));
    }

    /**
     * Unsets the value for child leaf "in-broadcast-pkts".
     */
    public void unsetInBroadcastPktsValue() throws JNCException {
        delete("in-broadcast-pkts");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-broadcast-pkts" leaf will not have a value.
     */
    public void addInBroadcastPkts() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "in-broadcast-pkts",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-broadcast-pkts" with operation "replace".
     */
    public void markInBroadcastPktsReplace() throws JNCException {
        markLeafReplace("inBroadcastPkts");
    }

    /**
     * Marks the leaf "in-broadcast-pkts" with operation "merge".
     */
    public void markInBroadcastPktsMerge() throws JNCException {
        markLeafMerge("inBroadcastPkts");
    }

    /**
     * Marks the leaf "in-broadcast-pkts" with operation "create".
     */
    public void markInBroadcastPktsCreate() throws JNCException {
        markLeafCreate("inBroadcastPkts");
    }

    /**
     * Marks the leaf "in-broadcast-pkts" with operation "delete".
     */
    public void markInBroadcastPktsDelete() throws JNCException {
        markLeafDelete("inBroadcastPkts");
    }

    /* Access methods for optional leaf child: "in-multicast-pkts". */

    /**
     * Gets the value for child leaf "in-multicast-pkts".
     * @return The value of the leaf.
     */
    public Counter64 getInMulticastPktsValue() throws JNCException {
        return (Counter64)getValue("in-multicast-pkts");
    }

    /**
     * Sets the value for child leaf "in-multicast-pkts",
     * using a JNC type value.
     * @param inMulticastPktsValue The value to set.
     * @param inMulticastPktsValue used during instantiation.
     */
    public void setInMulticastPktsValue(Counter64 inMulticastPktsValue)
            throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "in-multicast-pkts",
            inMulticastPktsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-multicast-pkts",
     * using Java primitive values.
     * @param inMulticastPktsValue used during instantiation.
     */
    public void setInMulticastPktsValue(BigInteger inMulticastPktsValue)
            throws JNCException {
        setInMulticastPktsValue(new Counter64(inMulticastPktsValue));
    }

    /**
     * Sets the value for child leaf "in-multicast-pkts",
     * using a String value.
     * @param inMulticastPktsValue used during instantiation.
     */
    public void setInMulticastPktsValue(String inMulticastPktsValue)
            throws JNCException {
        setInMulticastPktsValue(new Counter64(inMulticastPktsValue));
    }

    /**
     * Unsets the value for child leaf "in-multicast-pkts".
     */
    public void unsetInMulticastPktsValue() throws JNCException {
        delete("in-multicast-pkts");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-multicast-pkts" leaf will not have a value.
     */
    public void addInMulticastPkts() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "in-multicast-pkts",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-multicast-pkts" with operation "replace".
     */
    public void markInMulticastPktsReplace() throws JNCException {
        markLeafReplace("inMulticastPkts");
    }

    /**
     * Marks the leaf "in-multicast-pkts" with operation "merge".
     */
    public void markInMulticastPktsMerge() throws JNCException {
        markLeafMerge("inMulticastPkts");
    }

    /**
     * Marks the leaf "in-multicast-pkts" with operation "create".
     */
    public void markInMulticastPktsCreate() throws JNCException {
        markLeafCreate("inMulticastPkts");
    }

    /**
     * Marks the leaf "in-multicast-pkts" with operation "delete".
     */
    public void markInMulticastPktsDelete() throws JNCException {
        markLeafDelete("inMulticastPkts");
    }

    /* Access methods for optional leaf child: "in-discards". */

    /**
     * Gets the value for child leaf "in-discards".
     * @return The value of the leaf.
     */
    public Counter64 getInDiscardsValue() throws JNCException {
        return (Counter64)getValue("in-discards");
    }

    /**
     * Sets the value for child leaf "in-discards",
     * using a JNC type value.
     * @param inDiscardsValue The value to set.
     * @param inDiscardsValue used during instantiation.
     */
    public void setInDiscardsValue(Counter64 inDiscardsValue)
            throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "in-discards",
            inDiscardsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-discards",
     * using Java primitive values.
     * @param inDiscardsValue used during instantiation.
     */
    public void setInDiscardsValue(BigInteger inDiscardsValue)
            throws JNCException {
        setInDiscardsValue(new Counter64(inDiscardsValue));
    }

    /**
     * Sets the value for child leaf "in-discards",
     * using a String value.
     * @param inDiscardsValue used during instantiation.
     */
    public void setInDiscardsValue(String inDiscardsValue) throws JNCException {
        setInDiscardsValue(new Counter64(inDiscardsValue));
    }

    /**
     * Unsets the value for child leaf "in-discards".
     */
    public void unsetInDiscardsValue() throws JNCException {
        delete("in-discards");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-discards" leaf will not have a value.
     */
    public void addInDiscards() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "in-discards",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-discards" with operation "replace".
     */
    public void markInDiscardsReplace() throws JNCException {
        markLeafReplace("inDiscards");
    }

    /**
     * Marks the leaf "in-discards" with operation "merge".
     */
    public void markInDiscardsMerge() throws JNCException {
        markLeafMerge("inDiscards");
    }

    /**
     * Marks the leaf "in-discards" with operation "create".
     */
    public void markInDiscardsCreate() throws JNCException {
        markLeafCreate("inDiscards");
    }

    /**
     * Marks the leaf "in-discards" with operation "delete".
     */
    public void markInDiscardsDelete() throws JNCException {
        markLeafDelete("inDiscards");
    }

    /* Access methods for optional leaf child: "in-errors". */

    /**
     * Gets the value for child leaf "in-errors".
     * @return The value of the leaf.
     */
    public Counter64 getInErrorsValue() throws JNCException {
        return (Counter64)getValue("in-errors");
    }

    /**
     * Sets the value for child leaf "in-errors",
     * using a JNC type value.
     * @param inErrorsValue The value to set.
     * @param inErrorsValue used during instantiation.
     */
    public void setInErrorsValue(Counter64 inErrorsValue) throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "in-errors",
            inErrorsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-errors",
     * using Java primitive values.
     * @param inErrorsValue used during instantiation.
     */
    public void setInErrorsValue(BigInteger inErrorsValue) throws JNCException {
        setInErrorsValue(new Counter64(inErrorsValue));
    }

    /**
     * Sets the value for child leaf "in-errors",
     * using a String value.
     * @param inErrorsValue used during instantiation.
     */
    public void setInErrorsValue(String inErrorsValue) throws JNCException {
        setInErrorsValue(new Counter64(inErrorsValue));
    }

    /**
     * Unsets the value for child leaf "in-errors".
     */
    public void unsetInErrorsValue() throws JNCException {
        delete("in-errors");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-errors" leaf will not have a value.
     */
    public void addInErrors() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "in-errors",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-errors" with operation "replace".
     */
    public void markInErrorsReplace() throws JNCException {
        markLeafReplace("inErrors");
    }

    /**
     * Marks the leaf "in-errors" with operation "merge".
     */
    public void markInErrorsMerge() throws JNCException {
        markLeafMerge("inErrors");
    }

    /**
     * Marks the leaf "in-errors" with operation "create".
     */
    public void markInErrorsCreate() throws JNCException {
        markLeafCreate("inErrors");
    }

    /**
     * Marks the leaf "in-errors" with operation "delete".
     */
    public void markInErrorsDelete() throws JNCException {
        markLeafDelete("inErrors");
    }

    /* Access methods for optional leaf child: "in-unknown-protos". */

    /**
     * Gets the value for child leaf "in-unknown-protos".
     * @return The value of the leaf.
     */
    public Counter64 getInUnknownProtosValue() throws JNCException {
        return (Counter64)getValue("in-unknown-protos");
    }

    /**
     * Sets the value for child leaf "in-unknown-protos",
     * using a JNC type value.
     * @param inUnknownProtosValue The value to set.
     * @param inUnknownProtosValue used during instantiation.
     */
    public void setInUnknownProtosValue(Counter64 inUnknownProtosValue)
            throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "in-unknown-protos",
            inUnknownProtosValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-unknown-protos",
     * using Java primitive values.
     * @param inUnknownProtosValue used during instantiation.
     */
    public void setInUnknownProtosValue(BigInteger inUnknownProtosValue)
            throws JNCException {
        setInUnknownProtosValue(new Counter64(inUnknownProtosValue));
    }

    /**
     * Sets the value for child leaf "in-unknown-protos",
     * using a String value.
     * @param inUnknownProtosValue used during instantiation.
     */
    public void setInUnknownProtosValue(String inUnknownProtosValue)
            throws JNCException {
        setInUnknownProtosValue(new Counter64(inUnknownProtosValue));
    }

    /**
     * Unsets the value for child leaf "in-unknown-protos".
     */
    public void unsetInUnknownProtosValue() throws JNCException {
        delete("in-unknown-protos");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-unknown-protos" leaf will not have a value.
     */
    public void addInUnknownProtos() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "in-unknown-protos",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-unknown-protos" with operation "replace".
     */
    public void markInUnknownProtosReplace() throws JNCException {
        markLeafReplace("inUnknownProtos");
    }

    /**
     * Marks the leaf "in-unknown-protos" with operation "merge".
     */
    public void markInUnknownProtosMerge() throws JNCException {
        markLeafMerge("inUnknownProtos");
    }

    /**
     * Marks the leaf "in-unknown-protos" with operation "create".
     */
    public void markInUnknownProtosCreate() throws JNCException {
        markLeafCreate("inUnknownProtos");
    }

    /**
     * Marks the leaf "in-unknown-protos" with operation "delete".
     */
    public void markInUnknownProtosDelete() throws JNCException {
        markLeafDelete("inUnknownProtos");
    }

    /* Access methods for optional leaf child: "in-fcs-errors". */

    /**
     * Gets the value for child leaf "in-fcs-errors".
     * @return The value of the leaf.
     */
    public Counter64 getInFcsErrorsValue() throws JNCException {
        return (Counter64)getValue("in-fcs-errors");
    }

    /**
     * Sets the value for child leaf "in-fcs-errors",
     * using a JNC type value.
     * @param inFcsErrorsValue The value to set.
     * @param inFcsErrorsValue used during instantiation.
     */
    public void setInFcsErrorsValue(Counter64 inFcsErrorsValue)
            throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "in-fcs-errors",
            inFcsErrorsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-fcs-errors",
     * using Java primitive values.
     * @param inFcsErrorsValue used during instantiation.
     */
    public void setInFcsErrorsValue(BigInteger inFcsErrorsValue)
            throws JNCException {
        setInFcsErrorsValue(new Counter64(inFcsErrorsValue));
    }

    /**
     * Sets the value for child leaf "in-fcs-errors",
     * using a String value.
     * @param inFcsErrorsValue used during instantiation.
     */
    public void setInFcsErrorsValue(String inFcsErrorsValue)
            throws JNCException {
        setInFcsErrorsValue(new Counter64(inFcsErrorsValue));
    }

    /**
     * Unsets the value for child leaf "in-fcs-errors".
     */
    public void unsetInFcsErrorsValue() throws JNCException {
        delete("in-fcs-errors");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-fcs-errors" leaf will not have a value.
     */
    public void addInFcsErrors() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "in-fcs-errors",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-fcs-errors" with operation "replace".
     */
    public void markInFcsErrorsReplace() throws JNCException {
        markLeafReplace("inFcsErrors");
    }

    /**
     * Marks the leaf "in-fcs-errors" with operation "merge".
     */
    public void markInFcsErrorsMerge() throws JNCException {
        markLeafMerge("inFcsErrors");
    }

    /**
     * Marks the leaf "in-fcs-errors" with operation "create".
     */
    public void markInFcsErrorsCreate() throws JNCException {
        markLeafCreate("inFcsErrors");
    }

    /**
     * Marks the leaf "in-fcs-errors" with operation "delete".
     */
    public void markInFcsErrorsDelete() throws JNCException {
        markLeafDelete("inFcsErrors");
    }

    /* Access methods for optional leaf child: "out-octets". */

    /**
     * Gets the value for child leaf "out-octets".
     * @return The value of the leaf.
     */
    public Counter64 getOutOctetsValue() throws JNCException {
        return (Counter64)getValue("out-octets");
    }

    /**
     * Sets the value for child leaf "out-octets",
     * using a JNC type value.
     * @param outOctetsValue The value to set.
     * @param outOctetsValue used during instantiation.
     */
    public void setOutOctetsValue(Counter64 outOctetsValue) throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "out-octets",
            outOctetsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-octets",
     * using Java primitive values.
     * @param outOctetsValue used during instantiation.
     */
    public void setOutOctetsValue(BigInteger outOctetsValue)
            throws JNCException {
        setOutOctetsValue(new Counter64(outOctetsValue));
    }

    /**
     * Sets the value for child leaf "out-octets",
     * using a String value.
     * @param outOctetsValue used during instantiation.
     */
    public void setOutOctetsValue(String outOctetsValue) throws JNCException {
        setOutOctetsValue(new Counter64(outOctetsValue));
    }

    /**
     * Unsets the value for child leaf "out-octets".
     */
    public void unsetOutOctetsValue() throws JNCException {
        delete("out-octets");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-octets" leaf will not have a value.
     */
    public void addOutOctets() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "out-octets",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-octets" with operation "replace".
     */
    public void markOutOctetsReplace() throws JNCException {
        markLeafReplace("outOctets");
    }

    /**
     * Marks the leaf "out-octets" with operation "merge".
     */
    public void markOutOctetsMerge() throws JNCException {
        markLeafMerge("outOctets");
    }

    /**
     * Marks the leaf "out-octets" with operation "create".
     */
    public void markOutOctetsCreate() throws JNCException {
        markLeafCreate("outOctets");
    }

    /**
     * Marks the leaf "out-octets" with operation "delete".
     */
    public void markOutOctetsDelete() throws JNCException {
        markLeafDelete("outOctets");
    }

    /* Access methods for optional leaf child: "out-unicast-pkts". */

    /**
     * Gets the value for child leaf "out-unicast-pkts".
     * @return The value of the leaf.
     */
    public Counter64 getOutUnicastPktsValue() throws JNCException {
        return (Counter64)getValue("out-unicast-pkts");
    }

    /**
     * Sets the value for child leaf "out-unicast-pkts",
     * using a JNC type value.
     * @param outUnicastPktsValue The value to set.
     * @param outUnicastPktsValue used during instantiation.
     */
    public void setOutUnicastPktsValue(Counter64 outUnicastPktsValue)
            throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "out-unicast-pkts",
            outUnicastPktsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-unicast-pkts",
     * using Java primitive values.
     * @param outUnicastPktsValue used during instantiation.
     */
    public void setOutUnicastPktsValue(BigInteger outUnicastPktsValue)
            throws JNCException {
        setOutUnicastPktsValue(new Counter64(outUnicastPktsValue));
    }

    /**
     * Sets the value for child leaf "out-unicast-pkts",
     * using a String value.
     * @param outUnicastPktsValue used during instantiation.
     */
    public void setOutUnicastPktsValue(String outUnicastPktsValue)
            throws JNCException {
        setOutUnicastPktsValue(new Counter64(outUnicastPktsValue));
    }

    /**
     * Unsets the value for child leaf "out-unicast-pkts".
     */
    public void unsetOutUnicastPktsValue() throws JNCException {
        delete("out-unicast-pkts");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-unicast-pkts" leaf will not have a value.
     */
    public void addOutUnicastPkts() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "out-unicast-pkts",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-unicast-pkts" with operation "replace".
     */
    public void markOutUnicastPktsReplace() throws JNCException {
        markLeafReplace("outUnicastPkts");
    }

    /**
     * Marks the leaf "out-unicast-pkts" with operation "merge".
     */
    public void markOutUnicastPktsMerge() throws JNCException {
        markLeafMerge("outUnicastPkts");
    }

    /**
     * Marks the leaf "out-unicast-pkts" with operation "create".
     */
    public void markOutUnicastPktsCreate() throws JNCException {
        markLeafCreate("outUnicastPkts");
    }

    /**
     * Marks the leaf "out-unicast-pkts" with operation "delete".
     */
    public void markOutUnicastPktsDelete() throws JNCException {
        markLeafDelete("outUnicastPkts");
    }

    /* Access methods for optional leaf child: "out-broadcast-pkts". */

    /**
     * Gets the value for child leaf "out-broadcast-pkts".
     * @return The value of the leaf.
     */
    public Counter64 getOutBroadcastPktsValue() throws JNCException {
        return (Counter64)getValue("out-broadcast-pkts");
    }

    /**
     * Sets the value for child leaf "out-broadcast-pkts",
     * using a JNC type value.
     * @param outBroadcastPktsValue The value to set.
     * @param outBroadcastPktsValue used during instantiation.
     */
    public void setOutBroadcastPktsValue(Counter64 outBroadcastPktsValue)
            throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "out-broadcast-pkts",
            outBroadcastPktsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-broadcast-pkts",
     * using Java primitive values.
     * @param outBroadcastPktsValue used during instantiation.
     */
    public void setOutBroadcastPktsValue(BigInteger outBroadcastPktsValue)
            throws JNCException {
        setOutBroadcastPktsValue(new Counter64(outBroadcastPktsValue));
    }

    /**
     * Sets the value for child leaf "out-broadcast-pkts",
     * using a String value.
     * @param outBroadcastPktsValue used during instantiation.
     */
    public void setOutBroadcastPktsValue(String outBroadcastPktsValue)
            throws JNCException {
        setOutBroadcastPktsValue(new Counter64(outBroadcastPktsValue));
    }

    /**
     * Unsets the value for child leaf "out-broadcast-pkts".
     */
    public void unsetOutBroadcastPktsValue() throws JNCException {
        delete("out-broadcast-pkts");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-broadcast-pkts" leaf will not have a value.
     */
    public void addOutBroadcastPkts() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "out-broadcast-pkts",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-broadcast-pkts" with operation "replace".
     */
    public void markOutBroadcastPktsReplace() throws JNCException {
        markLeafReplace("outBroadcastPkts");
    }

    /**
     * Marks the leaf "out-broadcast-pkts" with operation "merge".
     */
    public void markOutBroadcastPktsMerge() throws JNCException {
        markLeafMerge("outBroadcastPkts");
    }

    /**
     * Marks the leaf "out-broadcast-pkts" with operation "create".
     */
    public void markOutBroadcastPktsCreate() throws JNCException {
        markLeafCreate("outBroadcastPkts");
    }

    /**
     * Marks the leaf "out-broadcast-pkts" with operation "delete".
     */
    public void markOutBroadcastPktsDelete() throws JNCException {
        markLeafDelete("outBroadcastPkts");
    }

    /* Access methods for optional leaf child: "out-multicast-pkts". */

    /**
     * Gets the value for child leaf "out-multicast-pkts".
     * @return The value of the leaf.
     */
    public Counter64 getOutMulticastPktsValue() throws JNCException {
        return (Counter64)getValue("out-multicast-pkts");
    }

    /**
     * Sets the value for child leaf "out-multicast-pkts",
     * using a JNC type value.
     * @param outMulticastPktsValue The value to set.
     * @param outMulticastPktsValue used during instantiation.
     */
    public void setOutMulticastPktsValue(Counter64 outMulticastPktsValue)
            throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "out-multicast-pkts",
            outMulticastPktsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-multicast-pkts",
     * using Java primitive values.
     * @param outMulticastPktsValue used during instantiation.
     */
    public void setOutMulticastPktsValue(BigInteger outMulticastPktsValue)
            throws JNCException {
        setOutMulticastPktsValue(new Counter64(outMulticastPktsValue));
    }

    /**
     * Sets the value for child leaf "out-multicast-pkts",
     * using a String value.
     * @param outMulticastPktsValue used during instantiation.
     */
    public void setOutMulticastPktsValue(String outMulticastPktsValue)
            throws JNCException {
        setOutMulticastPktsValue(new Counter64(outMulticastPktsValue));
    }

    /**
     * Unsets the value for child leaf "out-multicast-pkts".
     */
    public void unsetOutMulticastPktsValue() throws JNCException {
        delete("out-multicast-pkts");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-multicast-pkts" leaf will not have a value.
     */
    public void addOutMulticastPkts() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "out-multicast-pkts",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-multicast-pkts" with operation "replace".
     */
    public void markOutMulticastPktsReplace() throws JNCException {
        markLeafReplace("outMulticastPkts");
    }

    /**
     * Marks the leaf "out-multicast-pkts" with operation "merge".
     */
    public void markOutMulticastPktsMerge() throws JNCException {
        markLeafMerge("outMulticastPkts");
    }

    /**
     * Marks the leaf "out-multicast-pkts" with operation "create".
     */
    public void markOutMulticastPktsCreate() throws JNCException {
        markLeafCreate("outMulticastPkts");
    }

    /**
     * Marks the leaf "out-multicast-pkts" with operation "delete".
     */
    public void markOutMulticastPktsDelete() throws JNCException {
        markLeafDelete("outMulticastPkts");
    }

    /* Access methods for optional leaf child: "out-discards". */

    /**
     * Gets the value for child leaf "out-discards".
     * @return The value of the leaf.
     */
    public Counter64 getOutDiscardsValue() throws JNCException {
        return (Counter64)getValue("out-discards");
    }

    /**
     * Sets the value for child leaf "out-discards",
     * using a JNC type value.
     * @param outDiscardsValue The value to set.
     * @param outDiscardsValue used during instantiation.
     */
    public void setOutDiscardsValue(Counter64 outDiscardsValue)
            throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "out-discards",
            outDiscardsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-discards",
     * using Java primitive values.
     * @param outDiscardsValue used during instantiation.
     */
    public void setOutDiscardsValue(BigInteger outDiscardsValue)
            throws JNCException {
        setOutDiscardsValue(new Counter64(outDiscardsValue));
    }

    /**
     * Sets the value for child leaf "out-discards",
     * using a String value.
     * @param outDiscardsValue used during instantiation.
     */
    public void setOutDiscardsValue(String outDiscardsValue)
            throws JNCException {
        setOutDiscardsValue(new Counter64(outDiscardsValue));
    }

    /**
     * Unsets the value for child leaf "out-discards".
     */
    public void unsetOutDiscardsValue() throws JNCException {
        delete("out-discards");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-discards" leaf will not have a value.
     */
    public void addOutDiscards() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "out-discards",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-discards" with operation "replace".
     */
    public void markOutDiscardsReplace() throws JNCException {
        markLeafReplace("outDiscards");
    }

    /**
     * Marks the leaf "out-discards" with operation "merge".
     */
    public void markOutDiscardsMerge() throws JNCException {
        markLeafMerge("outDiscards");
    }

    /**
     * Marks the leaf "out-discards" with operation "create".
     */
    public void markOutDiscardsCreate() throws JNCException {
        markLeafCreate("outDiscards");
    }

    /**
     * Marks the leaf "out-discards" with operation "delete".
     */
    public void markOutDiscardsDelete() throws JNCException {
        markLeafDelete("outDiscards");
    }

    /* Access methods for optional leaf child: "out-errors". */

    /**
     * Gets the value for child leaf "out-errors".
     * @return The value of the leaf.
     */
    public Counter64 getOutErrorsValue() throws JNCException {
        return (Counter64)getValue("out-errors");
    }

    /**
     * Sets the value for child leaf "out-errors",
     * using a JNC type value.
     * @param outErrorsValue The value to set.
     * @param outErrorsValue used during instantiation.
     */
    public void setOutErrorsValue(Counter64 outErrorsValue) throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "out-errors",
            outErrorsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-errors",
     * using Java primitive values.
     * @param outErrorsValue used during instantiation.
     */
    public void setOutErrorsValue(BigInteger outErrorsValue)
            throws JNCException {
        setOutErrorsValue(new Counter64(outErrorsValue));
    }

    /**
     * Sets the value for child leaf "out-errors",
     * using a String value.
     * @param outErrorsValue used during instantiation.
     */
    public void setOutErrorsValue(String outErrorsValue) throws JNCException {
        setOutErrorsValue(new Counter64(outErrorsValue));
    }

    /**
     * Unsets the value for child leaf "out-errors".
     */
    public void unsetOutErrorsValue() throws JNCException {
        delete("out-errors");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-errors" leaf will not have a value.
     */
    public void addOutErrors() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "out-errors",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-errors" with operation "replace".
     */
    public void markOutErrorsReplace() throws JNCException {
        markLeafReplace("outErrors");
    }

    /**
     * Marks the leaf "out-errors" with operation "merge".
     */
    public void markOutErrorsMerge() throws JNCException {
        markLeafMerge("outErrors");
    }

    /**
     * Marks the leaf "out-errors" with operation "create".
     */
    public void markOutErrorsCreate() throws JNCException {
        markLeafCreate("outErrors");
    }

    /**
     * Marks the leaf "out-errors" with operation "delete".
     */
    public void markOutErrorsDelete() throws JNCException {
        markLeafDelete("outErrors");
    }

    /* Access methods for optional leaf child: "carrier-transitions". */

    /**
     * Gets the value for child leaf "carrier-transitions".
     * @return The value of the leaf.
     */
    public Counter64 getCarrierTransitionsValue() throws JNCException {
        return (Counter64)getValue("carrier-transitions");
    }

    /**
     * Sets the value for child leaf "carrier-transitions",
     * using a JNC type value.
     * @param carrierTransitionsValue The value to set.
     * @param carrierTransitionsValue used during instantiation.
     */
    public void setCarrierTransitionsValue(Counter64 carrierTransitionsValue)
            throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "carrier-transitions",
            carrierTransitionsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "carrier-transitions",
     * using Java primitive values.
     * @param carrierTransitionsValue used during instantiation.
     */
    public void setCarrierTransitionsValue(BigInteger carrierTransitionsValue)
            throws JNCException {
        setCarrierTransitionsValue(new Counter64(carrierTransitionsValue));
    }

    /**
     * Sets the value for child leaf "carrier-transitions",
     * using a String value.
     * @param carrierTransitionsValue used during instantiation.
     */
    public void setCarrierTransitionsValue(String carrierTransitionsValue)
            throws JNCException {
        setCarrierTransitionsValue(new Counter64(carrierTransitionsValue));
    }

    /**
     * Unsets the value for child leaf "carrier-transitions".
     */
    public void unsetCarrierTransitionsValue() throws JNCException {
        delete("carrier-transitions");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "carrier-transitions" leaf will not have a value.
     */
    public void addCarrierTransitions() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "carrier-transitions",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "carrier-transitions" with operation "replace".
     */
    public void markCarrierTransitionsReplace() throws JNCException {
        markLeafReplace("carrierTransitions");
    }

    /**
     * Marks the leaf "carrier-transitions" with operation "merge".
     */
    public void markCarrierTransitionsMerge() throws JNCException {
        markLeafMerge("carrierTransitions");
    }

    /**
     * Marks the leaf "carrier-transitions" with operation "create".
     */
    public void markCarrierTransitionsCreate() throws JNCException {
        markLeafCreate("carrierTransitions");
    }

    /**
     * Marks the leaf "carrier-transitions" with operation "delete".
     */
    public void markCarrierTransitionsDelete() throws JNCException {
        markLeafDelete("carrierTransitions");
    }

    /* Access methods for optional leaf child: "last-clear". */

    /**
     * Gets the value for child leaf "last-clear".
     * @return The value of the leaf.
     */
    public Timeticks64 getLastClearValue() throws JNCException {
        return (Timeticks64)getValue("last-clear");
    }

    /**
     * Sets the value for child leaf "last-clear",
     * using a JNC type value.
     * @param lastClearValue The value to set.
     * @param lastClearValue used during instantiation.
     */
    public void setLastClearValue(Timeticks64 lastClearValue)
            throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "last-clear",
            lastClearValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "last-clear",
     * using Java primitive values.
     * @param lastClearValue used during instantiation.
     */
    public void setLastClearValue(BigInteger lastClearValue)
            throws JNCException {
        setLastClearValue(new Timeticks64(lastClearValue));
    }

    /**
     * Sets the value for child leaf "last-clear",
     * using a String value.
     * @param lastClearValue used during instantiation.
     */
    public void setLastClearValue(String lastClearValue) throws JNCException {
        setLastClearValue(new Timeticks64(lastClearValue));
    }

    /**
     * Unsets the value for child leaf "last-clear".
     */
    public void unsetLastClearValue() throws JNCException {
        delete("last-clear");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "last-clear" leaf will not have a value.
     */
    public void addLastClear() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "last-clear",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "last-clear" with operation "replace".
     */
    public void markLastClearReplace() throws JNCException {
        markLeafReplace("lastClear");
    }

    /**
     * Marks the leaf "last-clear" with operation "merge".
     */
    public void markLastClearMerge() throws JNCException {
        markLeafMerge("lastClear");
    }

    /**
     * Marks the leaf "last-clear" with operation "create".
     */
    public void markLastClearCreate() throws JNCException {
        markLeafCreate("lastClear");
    }

    /**
     * Marks the leaf "last-clear" with operation "delete".
     */
    public void markLastClearDelete() throws JNCException {
        markLeafDelete("lastClear");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

/* 
 * @(#)JInterface.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-interfaces", revision: "2018-01-05".
 */

package com.nokia.eml.yang.openconfigInterfaces.interfaces;

import com.nokia.eml.yang.openconfigInterfaces.OcIf;
import com.nokia.eml.yang.openconfigInterfaces.interfaces.interface_.Config;
import com.nokia.eml.yang.openconfigInterfaces.interfaces.interface_.Ethernet;
import com.nokia.eml.yang.openconfigInterfaces.interfaces.interface_.HoldTime;
import com.nokia.eml.yang.openconfigInterfaces.interfaces.interface_.State;
import com.nokia.eml.yang.openconfigInterfaces.interfaces.interface_.Subinterfaces;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.Leaf;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/interfaces
 * generated to "src/com/nokia/eml/yang/openconfigInterfaces/interfaces/interface"
 * <p>
 * See line 943 in
 * /root/nokia-yang/interfaces/openconfig-interfaces.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class JInterface extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "config".
     */
    public Config config = null;

    /**
     * Field for child container "state".
     */
    public State state = null;

    /**
     * Field for child container "hold-time".
     */
    public HoldTime holdTime = null;

    /**
     * Field for child container "subinterfaces".
     */
    public Subinterfaces subinterfaces = null;

    /**
     * Field for child container "ethernet".
     */
    public Ethernet ethernet = null;

    /**
     * Constructor for an empty JInterface object.
     */
    public JInterface() {
        super(OcIf.NAMESPACE, "interface");
    }

    /**
     * Constructor for an initialized JInterface object,
     * 
     * @param nameValue Key argument of child.
     */
    public JInterface(YangString nameValue) throws JNCException {
        super(OcIf.NAMESPACE, "interface");
        Leaf name = new Leaf(OcIf.NAMESPACE, "name");
        name.setValue(nameValue);
        insertChild(name, childrenNames());
    }

    /**
     * Constructor for an initialized JInterface object,
     * with String keys.
     * @param nameValue Key argument of child.
     */
    public JInterface(String nameValue) throws JNCException {
        super(OcIf.NAMESPACE, "interface");
        Leaf name = new Leaf(OcIf.NAMESPACE, "name");
        name.setValue(new YangString(nameValue));
        insertChild(name, childrenNames());
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public JInterface clone() {
        JInterface copy;
        try {
            copy = new JInterface(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (JInterface)cloneContent(copy);
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public JInterface cloneShallow() {
        JInterface copy;
        try {
            copy = new JInterface(getNameValue().toString());
        } catch (JNCException e) {
            copy = null;
        }
        return (JInterface)cloneShallowContent(copy);
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return new String[] {
            "name",
        };
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "config",
            "state",
            "hold-time",
            "subinterfaces",
            "ethernet",
        };
    }

    /* Access methods for leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(OcIf.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /* Access methods for container child: "config". */

    /**
     * Adds container entry "config", using an existing object.
     * @param config The object to add.
     * @return The added child.
     */
    public Config addConfig(Config config) throws JNCException {
        this.config = config;
        insertChild(config, childrenNames());
        return config;
    }

    /**
     * Adds container entry "config".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Config addConfig() throws JNCException {
        Config config = new Config();
        this.config = config;
        insertChild(config, childrenNames());
        return config;
    }

    /**
     * Deletes container entry "config".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteConfig() throws JNCException {
        this.config = null;
        String path = "config";
        return delete(path);
    }

    /* Access methods for container child: "state". */

    /**
     * Adds container entry "state", using an existing object.
     * @param state The object to add.
     * @return The added child.
     */
    public State addState(State state) throws JNCException {
        this.state = state;
        insertChild(state, childrenNames());
        return state;
    }

    /**
     * Adds container entry "state".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public State addState() throws JNCException {
        State state = new State();
        this.state = state;
        insertChild(state, childrenNames());
        return state;
    }

    /**
     * Deletes container entry "state".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteState() throws JNCException {
        this.state = null;
        String path = "state";
        return delete(path);
    }

    /* Access methods for container child: "hold-time". */

    /**
     * Adds container entry "holdTime", using an existing object.
     * @param holdTime The object to add.
     * @return The added child.
     */
    public HoldTime addHoldTime(HoldTime holdTime) throws JNCException {
        this.holdTime = holdTime;
        insertChild(holdTime, childrenNames());
        return holdTime;
    }

    /**
     * Adds container entry "holdTime".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public HoldTime addHoldTime() throws JNCException {
        HoldTime holdTime = new HoldTime();
        this.holdTime = holdTime;
        insertChild(holdTime, childrenNames());
        return holdTime;
    }

    /**
     * Deletes container entry "holdTime".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteHoldTime() throws JNCException {
        this.holdTime = null;
        String path = "hold-time";
        return delete(path);
    }

    /* Access methods for container child: "subinterfaces". */

    /**
     * Adds container entry "subinterfaces", using an existing object.
     * @param subinterfaces The object to add.
     * @return The added child.
     */
    public Subinterfaces addSubinterfaces(Subinterfaces subinterfaces)
            throws JNCException {
        this.subinterfaces = subinterfaces;
        insertChild(subinterfaces, childrenNames());
        return subinterfaces;
    }

    /**
     * Adds container entry "subinterfaces".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Subinterfaces addSubinterfaces() throws JNCException {
        Subinterfaces subinterfaces = new Subinterfaces();
        this.subinterfaces = subinterfaces;
        insertChild(subinterfaces, childrenNames());
        return subinterfaces;
    }

    /**
     * Deletes container entry "subinterfaces".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSubinterfaces() throws JNCException {
        this.subinterfaces = null;
        String path = "subinterfaces";
        return delete(path);
    }

    /* Access methods for container child: "ethernet". */

    /**
     * Adds container entry "ethernet", using an existing object.
     * @param ethernet The object to add.
     * @return The added child.
     */
    public Ethernet addEthernet(Ethernet ethernet) throws JNCException {
        this.ethernet = ethernet;
        insertChild(ethernet, childrenNames());
        return ethernet;
    }

    /**
     * Adds container entry "ethernet".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Ethernet addEthernet() throws JNCException {
        Ethernet ethernet = new Ethernet();
        this.ethernet = ethernet;
        insertChild(ethernet, childrenNames());
        return ethernet;
    }

    /**
     * Deletes container entry "ethernet".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteEthernet() throws JNCException {
        this.ethernet = null;
        String path = "ethernet";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Config) config = (Config)child;
        else if (child instanceof State) state = (State)child;
        else if (child instanceof HoldTime) holdTime = (HoldTime)child;
        else if (child instanceof Subinterfaces) subinterfaces = (Subinterfaces)child;
        else if (child instanceof Ethernet) ethernet = (Ethernet)child;
    }

}

/* 
 * @(#)Interfaces.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-lldp", revision: "2016-05-16".
 */

package com.nokia.eml.yang.openconfigLldp.lldp;

import com.nokia.eml.yang.openconfigInterfaces.BaseInterfaceRef;
import com.nokia.eml.yang.openconfigLldp.OcLldp;
import com.nokia.eml.yang.openconfigLldp.lldp.interfaces.JInterface;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/lldp
 * generated to "src/com/nokia/eml/yang/openconfigLldp/lldp/interfaces"
 * <p>
 * See line 513 in
 * /root/nokia-yang/lldp/openconfig-lldp.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class Interfaces extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Interfaces object.
     */
    public Interfaces() {
        super(OcLldp.NAMESPACE, "interfaces");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Interfaces clone() {
        return (Interfaces)cloneContent(new Interfaces());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Interfaces cloneShallow() {
        return (Interfaces)cloneShallowContent(new Interfaces());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "interface",
        };
    }

    /* Access methods for list child: "interface". */

    /**
     * Gets list entry "interface_", with specified keys.
     * @param nameValue Key argument of child.
     */
    public JInterface getJInterface(BaseInterfaceRef nameValue)
            throws JNCException {
        String path = "interface[name='" + nameValue + "']";
        return (JInterface)searchOne(path);
    }

    /**
     * Gets list entry "interface_", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public JInterface getJInterface(String nameValue) throws JNCException {
        String path = "interface[name='" + nameValue + "']";
        return (JInterface)searchOne(path);
    }

    /**
     * Iterator method for the list "interface".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator interface_Iterator() {
        return new ElementChildrenIterator(children, "interface");
    }

    /**
     * Adds list entry "interface_", using an existing object.
     * @param interface_ The object to add.
     * @return The added child.
     */
    public JInterface addJInterface(JInterface interface_) throws JNCException {
        insertChild(interface_, childrenNames());
        return interface_;
    }

    /**
     * Adds list entry "interface_", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public JInterface addJInterface(BaseInterfaceRef nameValue)
            throws JNCException {
        JInterface interface_ = new JInterface(nameValue);
        return addJInterface(interface_);
    }

    /**
     * Adds list entry "interface_", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public JInterface addJInterface(String nameValue) throws JNCException {
        JInterface interface_ = new JInterface(nameValue);
        return addJInterface(interface_);
    }

    /**
     * Adds list entry "interface_".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public JInterface addJInterface() throws JNCException {
        JInterface interface_ = new JInterface();
        insertChild(interface_, childrenNames());
        return interface_;
    }

    /**
     * Deletes list entry "interface_", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteJInterface(BaseInterfaceRef nameValue)
            throws JNCException {
        String path = "interface[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "interface_", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteJInterface(String nameValue) throws JNCException {
        String path = "interface[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

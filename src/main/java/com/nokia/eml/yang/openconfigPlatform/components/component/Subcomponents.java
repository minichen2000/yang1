/* 
 * @(#)Subcomponents.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-platform", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigPlatform.components.component;

import com.nokia.eml.yang.openconfigPlatform.OcPlatform;
import com.nokia.eml.yang.openconfigPlatform.components.component.subcomponents.Subcomponent;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/platform
 * generated to "src/com/nokia/eml/yang/openconfigPlatform/components/component/subcomponents"
 * <p>
 * See line 213 in
 * /root/nokia-yang/platform/openconfig-platform.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class Subcomponents extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Subcomponents object.
     */
    public Subcomponents() {
        super(OcPlatform.NAMESPACE, "subcomponents");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Subcomponents clone() {
        return (Subcomponents)cloneContent(new Subcomponents());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Subcomponents cloneShallow() {
        return (Subcomponents)cloneShallowContent(new Subcomponents());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "subcomponent",
        };
    }

    /* Access methods for list child: "subcomponent". */

    /**
     * Gets list entry "subcomponent", with specified keys.
     * @param nameValue Key argument of child.
     */
    public Subcomponent getSubcomponent(YangString nameValue)
            throws JNCException {
        String path = "subcomponent[name='" + nameValue + "']";
        return (Subcomponent)searchOne(path);
    }

    /**
     * Gets list entry "subcomponent", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public Subcomponent getSubcomponent(String nameValue) throws JNCException {
        String path = "subcomponent[name='" + nameValue + "']";
        return (Subcomponent)searchOne(path);
    }

    /**
     * Iterator method for the list "subcomponent".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator subcomponentIterator() {
        return new ElementChildrenIterator(children, "subcomponent");
    }

    /**
     * Adds list entry "subcomponent", using an existing object.
     * @param subcomponent The object to add.
     * @return The added child.
     */
    public Subcomponent addSubcomponent(Subcomponent subcomponent)
            throws JNCException {
        insertChild(subcomponent, childrenNames());
        return subcomponent;
    }

    /**
     * Adds list entry "subcomponent", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public Subcomponent addSubcomponent(YangString nameValue)
            throws JNCException {
        Subcomponent subcomponent = new Subcomponent(nameValue);
        return addSubcomponent(subcomponent);
    }

    /**
     * Adds list entry "subcomponent", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public Subcomponent addSubcomponent(String nameValue) throws JNCException {
        Subcomponent subcomponent = new Subcomponent(nameValue);
        return addSubcomponent(subcomponent);
    }

    /**
     * Adds list entry "subcomponent".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Subcomponent addSubcomponent() throws JNCException {
        Subcomponent subcomponent = new Subcomponent();
        insertChild(subcomponent, childrenNames());
        return subcomponent;
    }

    /**
     * Deletes list entry "subcomponent", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteSubcomponent(YangString nameValue) throws JNCException {
        String path = "subcomponent[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "subcomponent", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteSubcomponent(String nameValue) throws JNCException {
        String path = "subcomponent[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

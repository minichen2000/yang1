/* 
 * @(#)State.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-platform", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigPlatform.components.component;

import com.nokia.eml.yang.openconfigAlarms.OcAlarms;
import com.nokia.eml.yang.openconfigPlatform.OcPlatform;
import com.nokia.eml.yang.openconfigPlatform.components.component.state.Memory;
import com.nokia.eml.yang.openconfigPlatform.components.component.state.Temperature;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangIdentityref;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt32;
import com.tailf.jnc.YangUnion;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/platform
 * generated to "src/com/nokia/eml/yang/openconfigPlatform/components/component/state"
 * <p>
 * See line 674 in
 * /root/nokia-yang/platform/openconfig-platform.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class State extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "temperature".
     */
    public Temperature temperature = null;

    /**
     * Field for child container "memory".
     */
    public Memory memory = null;

    /**
     * Constructor for an empty State object.
     */
    public State() {
        super(OcPlatform.NAMESPACE, "state");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public State clone() {
        return (State)cloneContent(new State());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public State cloneShallow() {
        return (State)cloneShallowContent(new State());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "custom-info",
            "type",
            "id",
            "description",
            "mfg-name",
            "hardware-version",
            "firmware-version",
            "software-version",
            "serial-no",
            "part-no",
            "oper-status",
            "temperature",
            "memory",
            "allocated-power",
            "used-power",
            "equipment-failure",
            "equipment-mismatch",
        };
    }

    /* Access methods for optional leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * Unsets the value for child leaf "name".
     */
    public void unsetNameValue() throws JNCException {
        delete("name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "name" with operation "replace".
     */
    public void markNameReplace() throws JNCException {
        markLeafReplace("name");
    }

    /**
     * Marks the leaf "name" with operation "merge".
     */
    public void markNameMerge() throws JNCException {
        markLeafMerge("name");
    }

    /**
     * Marks the leaf "name" with operation "create".
     */
    public void markNameCreate() throws JNCException {
        markLeafCreate("name");
    }

    /**
     * Marks the leaf "name" with operation "delete".
     */
    public void markNameDelete() throws JNCException {
        markLeafDelete("name");
    }

    /* Access methods for optional leaf child: "custom-info". */

    /**
     * Gets the value for child leaf "custom-info".
     * @return The value of the leaf.
     */
    public YangString getCustomInfoValue() throws JNCException {
        return (YangString)getValue("custom-info");
    }

    /**
     * Sets the value for child leaf "custom-info",
     * using instance of generated typedef class.
     * @param customInfoValue The value to set.
     * @param customInfoValue used during instantiation.
     */
    public void setCustomInfoValue(YangString customInfoValue)
            throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "custom-info",
            customInfoValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "custom-info",
     * using a String value.
     * @param customInfoValue used during instantiation.
     */
    public void setCustomInfoValue(String customInfoValue) throws JNCException {
        setCustomInfoValue(new YangString(customInfoValue));
    }

    /**
     * Unsets the value for child leaf "custom-info".
     */
    public void unsetCustomInfoValue() throws JNCException {
        delete("custom-info");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "custom-info" leaf will not have a value.
     */
    public void addCustomInfo() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "custom-info",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "custom-info" with operation "replace".
     */
    public void markCustomInfoReplace() throws JNCException {
        markLeafReplace("customInfo");
    }

    /**
     * Marks the leaf "custom-info" with operation "merge".
     */
    public void markCustomInfoMerge() throws JNCException {
        markLeafMerge("customInfo");
    }

    /**
     * Marks the leaf "custom-info" with operation "create".
     */
    public void markCustomInfoCreate() throws JNCException {
        markLeafCreate("customInfo");
    }

    /**
     * Marks the leaf "custom-info" with operation "delete".
     */
    public void markCustomInfoDelete() throws JNCException {
        markLeafDelete("customInfo");
    }

    /* Access methods for optional leaf child: "type". */

    /**
     * Gets the value for child leaf "type".
     * @return The value of the leaf.
     */
    public YangUnion getTypeValue() throws JNCException {
        return (YangUnion)getValue("type");
    }

    /**
     * Sets the value for child leaf "type",
     * using instance of generated typedef class.
     * @param typeValue The value to set.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(YangUnion typeValue) throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "type",
            typeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "type",
     * using a String value.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(String typeValue) throws JNCException {
        setTypeValue(new YangUnion(typeValue, new String[] {
             "com.tailf.jnc.YangIdentityref",
        }));
    }

    /**
     * Unsets the value for child leaf "type".
     */
    public void unsetTypeValue() throws JNCException {
        delete("type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "type" leaf will not have a value.
     */
    public void addType() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "type" with operation "replace".
     */
    public void markTypeReplace() throws JNCException {
        markLeafReplace("type");
    }

    /**
     * Marks the leaf "type" with operation "merge".
     */
    public void markTypeMerge() throws JNCException {
        markLeafMerge("type");
    }

    /**
     * Marks the leaf "type" with operation "create".
     */
    public void markTypeCreate() throws JNCException {
        markLeafCreate("type");
    }

    /**
     * Marks the leaf "type" with operation "delete".
     */
    public void markTypeDelete() throws JNCException {
        markLeafDelete("type");
    }

    /* Access methods for optional leaf child: "id". */

    /**
     * Gets the value for child leaf "id".
     * @return The value of the leaf.
     */
    public YangString getIdValue() throws JNCException {
        return (YangString)getValue("id");
    }

    /**
     * Sets the value for child leaf "id",
     * using instance of generated typedef class.
     * @param idValue The value to set.
     * @param idValue used during instantiation.
     */
    public void setIdValue(YangString idValue) throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "id",
            idValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "id",
     * using a String value.
     * @param idValue used during instantiation.
     */
    public void setIdValue(String idValue) throws JNCException {
        setIdValue(new YangString(idValue));
    }

    /**
     * Unsets the value for child leaf "id".
     */
    public void unsetIdValue() throws JNCException {
        delete("id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "id" leaf will not have a value.
     */
    public void addId() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "id" with operation "replace".
     */
    public void markIdReplace() throws JNCException {
        markLeafReplace("id");
    }

    /**
     * Marks the leaf "id" with operation "merge".
     */
    public void markIdMerge() throws JNCException {
        markLeafMerge("id");
    }

    /**
     * Marks the leaf "id" with operation "create".
     */
    public void markIdCreate() throws JNCException {
        markLeafCreate("id");
    }

    /**
     * Marks the leaf "id" with operation "delete".
     */
    public void markIdDelete() throws JNCException {
        markLeafDelete("id");
    }

    /* Access methods for optional leaf child: "description". */

    /**
     * Gets the value for child leaf "description".
     * @return The value of the leaf.
     */
    public YangString getDescriptionValue() throws JNCException {
        return (YangString)getValue("description");
    }

    /**
     * Sets the value for child leaf "description",
     * using instance of generated typedef class.
     * @param descriptionValue The value to set.
     * @param descriptionValue used during instantiation.
     */
    public void setDescriptionValue(YangString descriptionValue)
            throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "description",
            descriptionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "description",
     * using a String value.
     * @param descriptionValue used during instantiation.
     */
    public void setDescriptionValue(String descriptionValue)
            throws JNCException {
        setDescriptionValue(new YangString(descriptionValue));
    }

    /**
     * Unsets the value for child leaf "description".
     */
    public void unsetDescriptionValue() throws JNCException {
        delete("description");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "description" leaf will not have a value.
     */
    public void addDescription() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "description",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "description" with operation "replace".
     */
    public void markDescriptionReplace() throws JNCException {
        markLeafReplace("description");
    }

    /**
     * Marks the leaf "description" with operation "merge".
     */
    public void markDescriptionMerge() throws JNCException {
        markLeafMerge("description");
    }

    /**
     * Marks the leaf "description" with operation "create".
     */
    public void markDescriptionCreate() throws JNCException {
        markLeafCreate("description");
    }

    /**
     * Marks the leaf "description" with operation "delete".
     */
    public void markDescriptionDelete() throws JNCException {
        markLeafDelete("description");
    }

    /* Access methods for optional leaf child: "mfg-name". */

    /**
     * Gets the value for child leaf "mfg-name".
     * @return The value of the leaf.
     */
    public YangString getMfgNameValue() throws JNCException {
        return (YangString)getValue("mfg-name");
    }

    /**
     * Sets the value for child leaf "mfg-name",
     * using instance of generated typedef class.
     * @param mfgNameValue The value to set.
     * @param mfgNameValue used during instantiation.
     */
    public void setMfgNameValue(YangString mfgNameValue) throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "mfg-name",
            mfgNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mfg-name",
     * using a String value.
     * @param mfgNameValue used during instantiation.
     */
    public void setMfgNameValue(String mfgNameValue) throws JNCException {
        setMfgNameValue(new YangString(mfgNameValue));
    }

    /**
     * Unsets the value for child leaf "mfg-name".
     */
    public void unsetMfgNameValue() throws JNCException {
        delete("mfg-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mfg-name" leaf will not have a value.
     */
    public void addMfgName() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "mfg-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mfg-name" with operation "replace".
     */
    public void markMfgNameReplace() throws JNCException {
        markLeafReplace("mfgName");
    }

    /**
     * Marks the leaf "mfg-name" with operation "merge".
     */
    public void markMfgNameMerge() throws JNCException {
        markLeafMerge("mfgName");
    }

    /**
     * Marks the leaf "mfg-name" with operation "create".
     */
    public void markMfgNameCreate() throws JNCException {
        markLeafCreate("mfgName");
    }

    /**
     * Marks the leaf "mfg-name" with operation "delete".
     */
    public void markMfgNameDelete() throws JNCException {
        markLeafDelete("mfgName");
    }

    /* Access methods for optional leaf child: "hardware-version". */

    /**
     * Gets the value for child leaf "hardware-version".
     * @return The value of the leaf.
     */
    public YangString getHardwareVersionValue() throws JNCException {
        return (YangString)getValue("hardware-version");
    }

    /**
     * Sets the value for child leaf "hardware-version",
     * using instance of generated typedef class.
     * @param hardwareVersionValue The value to set.
     * @param hardwareVersionValue used during instantiation.
     */
    public void setHardwareVersionValue(YangString hardwareVersionValue)
            throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "hardware-version",
            hardwareVersionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "hardware-version",
     * using a String value.
     * @param hardwareVersionValue used during instantiation.
     */
    public void setHardwareVersionValue(String hardwareVersionValue)
            throws JNCException {
        setHardwareVersionValue(new YangString(hardwareVersionValue));
    }

    /**
     * Unsets the value for child leaf "hardware-version".
     */
    public void unsetHardwareVersionValue() throws JNCException {
        delete("hardware-version");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "hardware-version" leaf will not have a value.
     */
    public void addHardwareVersion() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "hardware-version",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "hardware-version" with operation "replace".
     */
    public void markHardwareVersionReplace() throws JNCException {
        markLeafReplace("hardwareVersion");
    }

    /**
     * Marks the leaf "hardware-version" with operation "merge".
     */
    public void markHardwareVersionMerge() throws JNCException {
        markLeafMerge("hardwareVersion");
    }

    /**
     * Marks the leaf "hardware-version" with operation "create".
     */
    public void markHardwareVersionCreate() throws JNCException {
        markLeafCreate("hardwareVersion");
    }

    /**
     * Marks the leaf "hardware-version" with operation "delete".
     */
    public void markHardwareVersionDelete() throws JNCException {
        markLeafDelete("hardwareVersion");
    }

    /* Access methods for optional leaf child: "firmware-version". */

    /**
     * Gets the value for child leaf "firmware-version".
     * @return The value of the leaf.
     */
    public YangString getFirmwareVersionValue() throws JNCException {
        return (YangString)getValue("firmware-version");
    }

    /**
     * Sets the value for child leaf "firmware-version",
     * using instance of generated typedef class.
     * @param firmwareVersionValue The value to set.
     * @param firmwareVersionValue used during instantiation.
     */
    public void setFirmwareVersionValue(YangString firmwareVersionValue)
            throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "firmware-version",
            firmwareVersionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "firmware-version",
     * using a String value.
     * @param firmwareVersionValue used during instantiation.
     */
    public void setFirmwareVersionValue(String firmwareVersionValue)
            throws JNCException {
        setFirmwareVersionValue(new YangString(firmwareVersionValue));
    }

    /**
     * Unsets the value for child leaf "firmware-version".
     */
    public void unsetFirmwareVersionValue() throws JNCException {
        delete("firmware-version");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "firmware-version" leaf will not have a value.
     */
    public void addFirmwareVersion() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "firmware-version",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "firmware-version" with operation "replace".
     */
    public void markFirmwareVersionReplace() throws JNCException {
        markLeafReplace("firmwareVersion");
    }

    /**
     * Marks the leaf "firmware-version" with operation "merge".
     */
    public void markFirmwareVersionMerge() throws JNCException {
        markLeafMerge("firmwareVersion");
    }

    /**
     * Marks the leaf "firmware-version" with operation "create".
     */
    public void markFirmwareVersionCreate() throws JNCException {
        markLeafCreate("firmwareVersion");
    }

    /**
     * Marks the leaf "firmware-version" with operation "delete".
     */
    public void markFirmwareVersionDelete() throws JNCException {
        markLeafDelete("firmwareVersion");
    }

    /* Access methods for optional leaf child: "software-version". */

    /**
     * Gets the value for child leaf "software-version".
     * @return The value of the leaf.
     */
    public YangString getSoftwareVersionValue() throws JNCException {
        return (YangString)getValue("software-version");
    }

    /**
     * Sets the value for child leaf "software-version",
     * using instance of generated typedef class.
     * @param softwareVersionValue The value to set.
     * @param softwareVersionValue used during instantiation.
     */
    public void setSoftwareVersionValue(YangString softwareVersionValue)
            throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "software-version",
            softwareVersionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "software-version",
     * using a String value.
     * @param softwareVersionValue used during instantiation.
     */
    public void setSoftwareVersionValue(String softwareVersionValue)
            throws JNCException {
        setSoftwareVersionValue(new YangString(softwareVersionValue));
    }

    /**
     * Unsets the value for child leaf "software-version".
     */
    public void unsetSoftwareVersionValue() throws JNCException {
        delete("software-version");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "software-version" leaf will not have a value.
     */
    public void addSoftwareVersion() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "software-version",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "software-version" with operation "replace".
     */
    public void markSoftwareVersionReplace() throws JNCException {
        markLeafReplace("softwareVersion");
    }

    /**
     * Marks the leaf "software-version" with operation "merge".
     */
    public void markSoftwareVersionMerge() throws JNCException {
        markLeafMerge("softwareVersion");
    }

    /**
     * Marks the leaf "software-version" with operation "create".
     */
    public void markSoftwareVersionCreate() throws JNCException {
        markLeafCreate("softwareVersion");
    }

    /**
     * Marks the leaf "software-version" with operation "delete".
     */
    public void markSoftwareVersionDelete() throws JNCException {
        markLeafDelete("softwareVersion");
    }

    /* Access methods for optional leaf child: "serial-no". */

    /**
     * Gets the value for child leaf "serial-no".
     * @return The value of the leaf.
     */
    public YangString getSerialNoValue() throws JNCException {
        return (YangString)getValue("serial-no");
    }

    /**
     * Sets the value for child leaf "serial-no",
     * using instance of generated typedef class.
     * @param serialNoValue The value to set.
     * @param serialNoValue used during instantiation.
     */
    public void setSerialNoValue(YangString serialNoValue) throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "serial-no",
            serialNoValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "serial-no",
     * using a String value.
     * @param serialNoValue used during instantiation.
     */
    public void setSerialNoValue(String serialNoValue) throws JNCException {
        setSerialNoValue(new YangString(serialNoValue));
    }

    /**
     * Unsets the value for child leaf "serial-no".
     */
    public void unsetSerialNoValue() throws JNCException {
        delete("serial-no");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "serial-no" leaf will not have a value.
     */
    public void addSerialNo() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "serial-no",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "serial-no" with operation "replace".
     */
    public void markSerialNoReplace() throws JNCException {
        markLeafReplace("serialNo");
    }

    /**
     * Marks the leaf "serial-no" with operation "merge".
     */
    public void markSerialNoMerge() throws JNCException {
        markLeafMerge("serialNo");
    }

    /**
     * Marks the leaf "serial-no" with operation "create".
     */
    public void markSerialNoCreate() throws JNCException {
        markLeafCreate("serialNo");
    }

    /**
     * Marks the leaf "serial-no" with operation "delete".
     */
    public void markSerialNoDelete() throws JNCException {
        markLeafDelete("serialNo");
    }

    /* Access methods for optional leaf child: "part-no". */

    /**
     * Gets the value for child leaf "part-no".
     * @return The value of the leaf.
     */
    public YangString getPartNoValue() throws JNCException {
        return (YangString)getValue("part-no");
    }

    /**
     * Sets the value for child leaf "part-no",
     * using instance of generated typedef class.
     * @param partNoValue The value to set.
     * @param partNoValue used during instantiation.
     */
    public void setPartNoValue(YangString partNoValue) throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "part-no",
            partNoValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "part-no",
     * using a String value.
     * @param partNoValue used during instantiation.
     */
    public void setPartNoValue(String partNoValue) throws JNCException {
        setPartNoValue(new YangString(partNoValue));
    }

    /**
     * Unsets the value for child leaf "part-no".
     */
    public void unsetPartNoValue() throws JNCException {
        delete("part-no");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "part-no" leaf will not have a value.
     */
    public void addPartNo() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "part-no",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "part-no" with operation "replace".
     */
    public void markPartNoReplace() throws JNCException {
        markLeafReplace("partNo");
    }

    /**
     * Marks the leaf "part-no" with operation "merge".
     */
    public void markPartNoMerge() throws JNCException {
        markLeafMerge("partNo");
    }

    /**
     * Marks the leaf "part-no" with operation "create".
     */
    public void markPartNoCreate() throws JNCException {
        markLeafCreate("partNo");
    }

    /**
     * Marks the leaf "part-no" with operation "delete".
     */
    public void markPartNoDelete() throws JNCException {
        markLeafDelete("partNo");
    }

    /* Access methods for optional leaf child: "oper-status". */

    /**
     * Gets the value for child leaf "oper-status".
     * @return The value of the leaf.
     */
    public YangIdentityref getOperStatusValue() throws JNCException {
        return (YangIdentityref)getValue("oper-status");
    }

    /**
     * Sets the value for child leaf "oper-status",
     * using instance of generated typedef class.
     * @param operStatusValue The value to set.
     * @param operStatusValue used during instantiation.
     */
    public void setOperStatusValue(YangIdentityref operStatusValue)
            throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "oper-status",
            operStatusValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "oper-status",
     * using a String value.
     * @param operStatusValue used during instantiation.
     */
    public void setOperStatusValue(String operStatusValue) throws JNCException {
        setOperStatusValue(new YangIdentityref(operStatusValue));
    }

    /**
     * Unsets the value for child leaf "oper-status".
     */
    public void unsetOperStatusValue() throws JNCException {
        delete("oper-status");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "oper-status" leaf will not have a value.
     */
    public void addOperStatus() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "oper-status",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "oper-status" with operation "replace".
     */
    public void markOperStatusReplace() throws JNCException {
        markLeafReplace("operStatus");
    }

    /**
     * Marks the leaf "oper-status" with operation "merge".
     */
    public void markOperStatusMerge() throws JNCException {
        markLeafMerge("operStatus");
    }

    /**
     * Marks the leaf "oper-status" with operation "create".
     */
    public void markOperStatusCreate() throws JNCException {
        markLeafCreate("operStatus");
    }

    /**
     * Marks the leaf "oper-status" with operation "delete".
     */
    public void markOperStatusDelete() throws JNCException {
        markLeafDelete("operStatus");
    }

    /* Access methods for container child: "temperature". */

    /**
     * Adds container entry "temperature", using an existing object.
     * @param temperature The object to add.
     * @return The added child.
     */
    public Temperature addTemperature(Temperature temperature)
            throws JNCException {
        this.temperature = temperature;
        insertChild(temperature, childrenNames());
        return temperature;
    }

    /**
     * Adds container entry "temperature".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Temperature addTemperature() throws JNCException {
        Temperature temperature = new Temperature();
        this.temperature = temperature;
        insertChild(temperature, childrenNames());
        return temperature;
    }

    /**
     * Deletes container entry "temperature".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteTemperature() throws JNCException {
        this.temperature = null;
        String path = "temperature";
        return delete(path);
    }

    /* Access methods for container child: "memory". */

    /**
     * Adds container entry "memory", using an existing object.
     * @param memory The object to add.
     * @return The added child.
     */
    public Memory addMemory(Memory memory) throws JNCException {
        this.memory = memory;
        insertChild(memory, childrenNames());
        return memory;
    }

    /**
     * Adds container entry "memory".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Memory addMemory() throws JNCException {
        Memory memory = new Memory();
        this.memory = memory;
        insertChild(memory, childrenNames());
        return memory;
    }

    /**
     * Deletes container entry "memory".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMemory() throws JNCException {
        this.memory = null;
        String path = "memory";
        return delete(path);
    }

    /* Access methods for optional leaf child: "allocated-power". */

    /**
     * Gets the value for child leaf "allocated-power".
     * @return The value of the leaf.
     */
    public YangUInt32 getAllocatedPowerValue() throws JNCException {
        return (YangUInt32)getValue("allocated-power");
    }

    /**
     * Sets the value for child leaf "allocated-power",
     * using instance of generated typedef class.
     * @param allocatedPowerValue The value to set.
     * @param allocatedPowerValue used during instantiation.
     */
    public void setAllocatedPowerValue(YangUInt32 allocatedPowerValue)
            throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "allocated-power",
            allocatedPowerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "allocated-power",
     * using Java primitive values.
     * @param allocatedPowerValue used during instantiation.
     */
    public void setAllocatedPowerValue(long allocatedPowerValue)
            throws JNCException {
        setAllocatedPowerValue(new YangUInt32(allocatedPowerValue));
    }

    /**
     * Sets the value for child leaf "allocated-power",
     * using a String value.
     * @param allocatedPowerValue used during instantiation.
     */
    public void setAllocatedPowerValue(String allocatedPowerValue)
            throws JNCException {
        setAllocatedPowerValue(new YangUInt32(allocatedPowerValue));
    }

    /**
     * Unsets the value for child leaf "allocated-power".
     */
    public void unsetAllocatedPowerValue() throws JNCException {
        delete("allocated-power");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "allocated-power" leaf will not have a value.
     */
    public void addAllocatedPower() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "allocated-power",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "allocated-power" with operation "replace".
     */
    public void markAllocatedPowerReplace() throws JNCException {
        markLeafReplace("allocatedPower");
    }

    /**
     * Marks the leaf "allocated-power" with operation "merge".
     */
    public void markAllocatedPowerMerge() throws JNCException {
        markLeafMerge("allocatedPower");
    }

    /**
     * Marks the leaf "allocated-power" with operation "create".
     */
    public void markAllocatedPowerCreate() throws JNCException {
        markLeafCreate("allocatedPower");
    }

    /**
     * Marks the leaf "allocated-power" with operation "delete".
     */
    public void markAllocatedPowerDelete() throws JNCException {
        markLeafDelete("allocatedPower");
    }

    /* Access methods for optional leaf child: "used-power". */

    /**
     * Gets the value for child leaf "used-power".
     * @return The value of the leaf.
     */
    public YangUInt32 getUsedPowerValue() throws JNCException {
        return (YangUInt32)getValue("used-power");
    }

    /**
     * Sets the value for child leaf "used-power",
     * using instance of generated typedef class.
     * @param usedPowerValue The value to set.
     * @param usedPowerValue used during instantiation.
     */
    public void setUsedPowerValue(YangUInt32 usedPowerValue)
            throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "used-power",
            usedPowerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "used-power",
     * using Java primitive values.
     * @param usedPowerValue used during instantiation.
     */
    public void setUsedPowerValue(long usedPowerValue) throws JNCException {
        setUsedPowerValue(new YangUInt32(usedPowerValue));
    }

    /**
     * Sets the value for child leaf "used-power",
     * using a String value.
     * @param usedPowerValue used during instantiation.
     */
    public void setUsedPowerValue(String usedPowerValue) throws JNCException {
        setUsedPowerValue(new YangUInt32(usedPowerValue));
    }

    /**
     * Unsets the value for child leaf "used-power".
     */
    public void unsetUsedPowerValue() throws JNCException {
        delete("used-power");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "used-power" leaf will not have a value.
     */
    public void addUsedPower() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "used-power",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "used-power" with operation "replace".
     */
    public void markUsedPowerReplace() throws JNCException {
        markLeafReplace("usedPower");
    }

    /**
     * Marks the leaf "used-power" with operation "merge".
     */
    public void markUsedPowerMerge() throws JNCException {
        markLeafMerge("usedPower");
    }

    /**
     * Marks the leaf "used-power" with operation "create".
     */
    public void markUsedPowerCreate() throws JNCException {
        markLeafCreate("usedPower");
    }

    /**
     * Marks the leaf "used-power" with operation "delete".
     */
    public void markUsedPowerDelete() throws JNCException {
        markLeafDelete("usedPower");
    }

    /* Access methods for optional leaf child: "equipment-failure". */

    /**
     * Gets the value for child leaf "equipment-failure".
     * @return The value of the leaf.
     */
    public YangBoolean getEquipmentFailureValue() throws JNCException {
        YangBoolean equipmentFailure = (YangBoolean)getValue("equipment-failure");
        if (equipmentFailure == null) {
            equipmentFailure = new YangBoolean("false");  // default
        }
        return equipmentFailure;
    }

    /**
     * Sets the value for child leaf "equipment-failure",
     * using instance of generated typedef class.
     * @param equipmentFailureValue The value to set.
     * @param equipmentFailureValue used during instantiation.
     */
    public void setEquipmentFailureValue(YangBoolean equipmentFailureValue)
            throws JNCException {
        setLeafValue(OcAlarms.NAMESPACE,
            "equipment-failure",
            equipmentFailureValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "equipment-failure",
     * using Java primitive values.
     * @param equipmentFailureValue used during instantiation.
     */
    public void setEquipmentFailureValue(Boolean equipmentFailureValue)
            throws JNCException {
        setEquipmentFailureValue(new YangBoolean(equipmentFailureValue));
    }

    /**
     * Sets the value for child leaf "equipment-failure",
     * using a String value.
     * @param equipmentFailureValue used during instantiation.
     */
    public void setEquipmentFailureValue(String equipmentFailureValue)
            throws JNCException {
        setEquipmentFailureValue(new YangBoolean(equipmentFailureValue));
    }

    /**
     * Unsets the value for child leaf "equipment-failure".
     */
    public void unsetEquipmentFailureValue() throws JNCException {
        delete("equipment-failure");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "equipment-failure" leaf will not have a value.
     */
    public void addEquipmentFailure() throws JNCException {
        setLeafValue(OcAlarms.NAMESPACE,
            "equipment-failure",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "equipment-failure" with operation "replace".
     */
    public void markEquipmentFailureReplace() throws JNCException {
        markLeafReplace("equipmentFailure");
    }

    /**
     * Marks the leaf "equipment-failure" with operation "merge".
     */
    public void markEquipmentFailureMerge() throws JNCException {
        markLeafMerge("equipmentFailure");
    }

    /**
     * Marks the leaf "equipment-failure" with operation "create".
     */
    public void markEquipmentFailureCreate() throws JNCException {
        markLeafCreate("equipmentFailure");
    }

    /**
     * Marks the leaf "equipment-failure" with operation "delete".
     */
    public void markEquipmentFailureDelete() throws JNCException {
        markLeafDelete("equipmentFailure");
    }

    /* Access methods for optional leaf child: "equipment-mismatch". */

    /**
     * Gets the value for child leaf "equipment-mismatch".
     * @return The value of the leaf.
     */
    public YangBoolean getEquipmentMismatchValue() throws JNCException {
        YangBoolean equipmentMismatch = (YangBoolean)getValue("equipment-mismatch");
        if (equipmentMismatch == null) {
            equipmentMismatch = new YangBoolean("false");  // default
        }
        return equipmentMismatch;
    }

    /**
     * Sets the value for child leaf "equipment-mismatch",
     * using instance of generated typedef class.
     * @param equipmentMismatchValue The value to set.
     * @param equipmentMismatchValue used during instantiation.
     */
    public void setEquipmentMismatchValue(YangBoolean equipmentMismatchValue)
            throws JNCException {
        setLeafValue(OcAlarms.NAMESPACE,
            "equipment-mismatch",
            equipmentMismatchValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "equipment-mismatch",
     * using Java primitive values.
     * @param equipmentMismatchValue used during instantiation.
     */
    public void setEquipmentMismatchValue(Boolean equipmentMismatchValue)
            throws JNCException {
        setEquipmentMismatchValue(new YangBoolean(equipmentMismatchValue));
    }

    /**
     * Sets the value for child leaf "equipment-mismatch",
     * using a String value.
     * @param equipmentMismatchValue used during instantiation.
     */
    public void setEquipmentMismatchValue(String equipmentMismatchValue)
            throws JNCException {
        setEquipmentMismatchValue(new YangBoolean(equipmentMismatchValue));
    }

    /**
     * Unsets the value for child leaf "equipment-mismatch".
     */
    public void unsetEquipmentMismatchValue() throws JNCException {
        delete("equipment-mismatch");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "equipment-mismatch" leaf will not have a value.
     */
    public void addEquipmentMismatch() throws JNCException {
        setLeafValue(OcAlarms.NAMESPACE,
            "equipment-mismatch",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "equipment-mismatch" with operation "replace".
     */
    public void markEquipmentMismatchReplace() throws JNCException {
        markLeafReplace("equipmentMismatch");
    }

    /**
     * Marks the leaf "equipment-mismatch" with operation "merge".
     */
    public void markEquipmentMismatchMerge() throws JNCException {
        markLeafMerge("equipmentMismatch");
    }

    /**
     * Marks the leaf "equipment-mismatch" with operation "create".
     */
    public void markEquipmentMismatchCreate() throws JNCException {
        markLeafCreate("equipmentMismatch");
    }

    /**
     * Marks the leaf "equipment-mismatch" with operation "delete".
     */
    public void markEquipmentMismatchDelete() throws JNCException {
        markLeafDelete("equipmentMismatch");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Temperature) temperature = (Temperature)child;
        else if (child instanceof Memory) memory = (Memory)child;
    }

}

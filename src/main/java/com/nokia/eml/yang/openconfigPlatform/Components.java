/* 
 * @(#)Components.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-platform", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigPlatform;

import com.nokia.eml.yang.openconfigPlatform.OcPlatform;
import com.nokia.eml.yang.openconfigPlatform.components.Component;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/platform
 * generated to "src/com/nokia/eml/yang/openconfigPlatform/components"
 * <p>
 * See line 650 in
 * /root/nokia-yang/platform/openconfig-platform.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class Components extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Components object.
     */
    public Components() {
        super(OcPlatform.NAMESPACE, "components");
        setDefaultPrefix();
        setPrefix(OcPlatform.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Components clone() {
        return (Components)cloneContent(new Components());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Components cloneShallow() {
        return (Components)cloneShallowContent(new Components());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "component",
        };
    }

    /* Access methods for list child: "component". */

    /**
     * Gets list entry "component", with specified keys.
     * @param nameValue Key argument of child.
     */
    public Component getComponent(YangString nameValue) throws JNCException {
        String path = "component[name='" + nameValue + "']";
        return (Component)searchOne(path);
    }

    /**
     * Gets list entry "component", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public Component getComponent(String nameValue) throws JNCException {
        String path = "component[name='" + nameValue + "']";
        return (Component)searchOne(path);
    }

    /**
     * Iterator method for the list "component".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator componentIterator() {
        return new ElementChildrenIterator(children, "component");
    }

    /**
     * Adds list entry "component", using an existing object.
     * @param component The object to add.
     * @return The added child.
     */
    public Component addComponent(Component component) throws JNCException {
        insertChild(component, childrenNames());
        return component;
    }

    /**
     * Adds list entry "component", with specified keys.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public Component addComponent(YangString nameValue) throws JNCException {
        Component component = new Component(nameValue);
        return addComponent(component);
    }

    /**
     * Adds list entry "component", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     * @return The added child.
     */
    public Component addComponent(String nameValue) throws JNCException {
        Component component = new Component(nameValue);
        return addComponent(component);
    }

    /**
     * Adds list entry "component".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Component addComponent() throws JNCException {
        Component component = new Component();
        insertChild(component, childrenNames());
        return component;
    }

    /**
     * Deletes list entry "component", with specified keys.
     * @param nameValue Key argument of child.
     */
    public void deleteComponent(YangString nameValue) throws JNCException {
        String path = "component[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "component", with specified keys.
     * The keys are specified as strings.
     * @param nameValue Key argument of child.
     */
    public void deleteComponent(String nameValue) throws JNCException {
        String path = "component[name='" + nameValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

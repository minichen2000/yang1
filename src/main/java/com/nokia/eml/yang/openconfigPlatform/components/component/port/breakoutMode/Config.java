/* 
 * @(#)Config.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-platform", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigPlatform.components.component.port.breakoutMode;

import com.nokia.eml.yang.openconfigPlatformPort.OcPort;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangIdentityref;
import com.tailf.jnc.YangUInt8;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/platform
 * generated to "src/com/nokia/eml/yang/openconfigPlatform/components/component/port/breakoutMode/config"
 * <p>
 * See line 92 in
 * /root/nokia-yang/platform/openconfig-platform-port.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class Config extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Config object.
     */
    public Config() {
        super(OcPort.NAMESPACE, "config");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Config clone() {
        return (Config)cloneContent(new Config());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Config cloneShallow() {
        return (Config)cloneShallowContent(new Config());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "num-channels",
            "channel-speed",
        };
    }

    /* Access methods for optional leaf child: "num-channels". */

    /**
     * Gets the value for child leaf "num-channels".
     * @return The value of the leaf.
     */
    public YangUInt8 getNumChannelsValue() throws JNCException {
        return (YangUInt8)getValue("num-channels");
    }

    /**
     * Sets the value for child leaf "num-channels",
     * using instance of generated typedef class.
     * @param numChannelsValue The value to set.
     * @param numChannelsValue used during instantiation.
     */
    public void setNumChannelsValue(YangUInt8 numChannelsValue)
            throws JNCException {
        setLeafValue(OcPort.NAMESPACE,
            "num-channels",
            numChannelsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "num-channels",
     * using Java primitive values.
     * @param numChannelsValue used during instantiation.
     */
    public void setNumChannelsValue(short numChannelsValue) throws JNCException {
        setNumChannelsValue(new YangUInt8(numChannelsValue));
    }

    /**
     * Sets the value for child leaf "num-channels",
     * using a String value.
     * @param numChannelsValue used during instantiation.
     */
    public void setNumChannelsValue(String numChannelsValue)
            throws JNCException {
        setNumChannelsValue(new YangUInt8(numChannelsValue));
    }

    /**
     * Unsets the value for child leaf "num-channels".
     */
    public void unsetNumChannelsValue() throws JNCException {
        delete("num-channels");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "num-channels" leaf will not have a value.
     */
    public void addNumChannels() throws JNCException {
        setLeafValue(OcPort.NAMESPACE,
            "num-channels",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "num-channels" with operation "replace".
     */
    public void markNumChannelsReplace() throws JNCException {
        markLeafReplace("numChannels");
    }

    /**
     * Marks the leaf "num-channels" with operation "merge".
     */
    public void markNumChannelsMerge() throws JNCException {
        markLeafMerge("numChannels");
    }

    /**
     * Marks the leaf "num-channels" with operation "create".
     */
    public void markNumChannelsCreate() throws JNCException {
        markLeafCreate("numChannels");
    }

    /**
     * Marks the leaf "num-channels" with operation "delete".
     */
    public void markNumChannelsDelete() throws JNCException {
        markLeafDelete("numChannels");
    }

    /* Access methods for optional leaf child: "channel-speed". */

    /**
     * Gets the value for child leaf "channel-speed".
     * @return The value of the leaf.
     */
    public YangIdentityref getChannelSpeedValue() throws JNCException {
        return (YangIdentityref)getValue("channel-speed");
    }

    /**
     * Sets the value for child leaf "channel-speed",
     * using instance of generated typedef class.
     * @param channelSpeedValue The value to set.
     * @param channelSpeedValue used during instantiation.
     */
    public void setChannelSpeedValue(YangIdentityref channelSpeedValue)
            throws JNCException {
        setLeafValue(OcPort.NAMESPACE,
            "channel-speed",
            channelSpeedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "channel-speed",
     * using a String value.
     * @param channelSpeedValue used during instantiation.
     */
    public void setChannelSpeedValue(String channelSpeedValue)
            throws JNCException {
        setChannelSpeedValue(new YangIdentityref(channelSpeedValue));
    }

    /**
     * Unsets the value for child leaf "channel-speed".
     */
    public void unsetChannelSpeedValue() throws JNCException {
        delete("channel-speed");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "channel-speed" leaf will not have a value.
     */
    public void addChannelSpeed() throws JNCException {
        setLeafValue(OcPort.NAMESPACE,
            "channel-speed",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "channel-speed" with operation "replace".
     */
    public void markChannelSpeedReplace() throws JNCException {
        markLeafReplace("channelSpeed");
    }

    /**
     * Marks the leaf "channel-speed" with operation "merge".
     */
    public void markChannelSpeedMerge() throws JNCException {
        markLeafMerge("channelSpeed");
    }

    /**
     * Marks the leaf "channel-speed" with operation "create".
     */
    public void markChannelSpeedCreate() throws JNCException {
        markLeafCreate("channelSpeed");
    }

    /**
     * Marks the leaf "channel-speed" with operation "delete".
     */
    public void markChannelSpeedDelete() throws JNCException {
        markLeafDelete("channelSpeed");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

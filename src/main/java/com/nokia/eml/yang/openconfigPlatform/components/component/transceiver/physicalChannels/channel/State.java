/* 
 * @(#)State.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-platform", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigPlatform.components.component.transceiver.physicalChannels.channel;

import com.nokia.eml.yang.openconfigPlatform.components.component.transceiver.physicalChannels.channel.state.InputPower;
import com.nokia.eml.yang.openconfigPlatform.components.component.transceiver.physicalChannels.channel.state.LaserBiasCurrent;
import com.nokia.eml.yang.openconfigPlatform.components.component.transceiver.physicalChannels.channel.state.OutputPower;
import com.nokia.eml.yang.openconfigPlatformTransceiver.OcTransceiver;
import com.nokia.eml.yang.openconfigTransportTypes.FrequencyType;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangDecimal64;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;

import java.math.BigDecimal;
import java.math.BigInteger;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/platform
 * generated to "src/com/nokia/eml/yang/openconfigPlatform/components/component/transceiver/physicalChannels/channel/state"
 * <p>
 * See line 216 in
 * /root/nokia-yang/platform/openconfig-platform-transceiver.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class State extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "output-power".
     */
    public OutputPower outputPower = null;

    /**
     * Field for child container "input-power".
     */
    public InputPower inputPower = null;

    /**
     * Field for child container "laser-bias-current".
     */
    public LaserBiasCurrent laserBiasCurrent = null;

    /**
     * Constructor for an empty State object.
     */
    public State() {
        super(OcTransceiver.NAMESPACE, "state");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public State clone() {
        return (State)cloneContent(new State());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public State cloneShallow() {
        return (State)cloneShallowContent(new State());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "index",
            "description",
            "tx-laser",
            "target-output-power",
            "output-frequency",
            "output-power",
            "input-power",
            "laser-bias-current",
        };
    }

    /* Access methods for optional leaf child: "index". */

    /**
     * Gets the value for child leaf "index".
     * @return The value of the leaf.
     */
    public YangUInt16 getIndexValue() throws JNCException {
        return (YangUInt16)getValue("index");
    }

    /**
     * Sets the value for child leaf "index",
     * using instance of generated typedef class.
     * @param indexValue The value to set.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(YangUInt16 indexValue) throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "index",
            indexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "index",
     * using Java primitive values.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(int indexValue) throws JNCException {
        setIndexValue(new YangUInt16(indexValue));
    }

    /**
     * Sets the value for child leaf "index",
     * using a String value.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(String indexValue) throws JNCException {
        setIndexValue(new YangUInt16(indexValue));
    }

    /**
     * Unsets the value for child leaf "index".
     */
    public void unsetIndexValue() throws JNCException {
        delete("index");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "index" leaf will not have a value.
     */
    public void addIndex() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "index",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "index" with operation "replace".
     */
    public void markIndexReplace() throws JNCException {
        markLeafReplace("index");
    }

    /**
     * Marks the leaf "index" with operation "merge".
     */
    public void markIndexMerge() throws JNCException {
        markLeafMerge("index");
    }

    /**
     * Marks the leaf "index" with operation "create".
     */
    public void markIndexCreate() throws JNCException {
        markLeafCreate("index");
    }

    /**
     * Marks the leaf "index" with operation "delete".
     */
    public void markIndexDelete() throws JNCException {
        markLeafDelete("index");
    }

    /* Access methods for optional leaf child: "description". */

    /**
     * Gets the value for child leaf "description".
     * @return The value of the leaf.
     */
    public YangString getDescriptionValue() throws JNCException {
        return (YangString)getValue("description");
    }

    /**
     * Sets the value for child leaf "description",
     * using instance of generated typedef class.
     * @param descriptionValue The value to set.
     * @param descriptionValue used during instantiation.
     */
    public void setDescriptionValue(YangString descriptionValue)
            throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "description",
            descriptionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "description",
     * using a String value.
     * @param descriptionValue used during instantiation.
     */
    public void setDescriptionValue(String descriptionValue)
            throws JNCException {
        setDescriptionValue(new YangString(descriptionValue));
    }

    /**
     * Unsets the value for child leaf "description".
     */
    public void unsetDescriptionValue() throws JNCException {
        delete("description");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "description" leaf will not have a value.
     */
    public void addDescription() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "description",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "description" with operation "replace".
     */
    public void markDescriptionReplace() throws JNCException {
        markLeafReplace("description");
    }

    /**
     * Marks the leaf "description" with operation "merge".
     */
    public void markDescriptionMerge() throws JNCException {
        markLeafMerge("description");
    }

    /**
     * Marks the leaf "description" with operation "create".
     */
    public void markDescriptionCreate() throws JNCException {
        markLeafCreate("description");
    }

    /**
     * Marks the leaf "description" with operation "delete".
     */
    public void markDescriptionDelete() throws JNCException {
        markLeafDelete("description");
    }

    /* Access methods for optional leaf child: "tx-laser". */

    /**
     * Gets the value for child leaf "tx-laser".
     * @return The value of the leaf.
     */
    public YangBoolean getTxLaserValue() throws JNCException {
        return (YangBoolean)getValue("tx-laser");
    }

    /**
     * Sets the value for child leaf "tx-laser",
     * using instance of generated typedef class.
     * @param txLaserValue The value to set.
     * @param txLaserValue used during instantiation.
     */
    public void setTxLaserValue(YangBoolean txLaserValue) throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "tx-laser",
            txLaserValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tx-laser",
     * using Java primitive values.
     * @param txLaserValue used during instantiation.
     */
    public void setTxLaserValue(Boolean txLaserValue) throws JNCException {
        setTxLaserValue(new YangBoolean(txLaserValue));
    }

    /**
     * Sets the value for child leaf "tx-laser",
     * using a String value.
     * @param txLaserValue used during instantiation.
     */
    public void setTxLaserValue(String txLaserValue) throws JNCException {
        setTxLaserValue(new YangBoolean(txLaserValue));
    }

    /**
     * Unsets the value for child leaf "tx-laser".
     */
    public void unsetTxLaserValue() throws JNCException {
        delete("tx-laser");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tx-laser" leaf will not have a value.
     */
    public void addTxLaser() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "tx-laser",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tx-laser" with operation "replace".
     */
    public void markTxLaserReplace() throws JNCException {
        markLeafReplace("txLaser");
    }

    /**
     * Marks the leaf "tx-laser" with operation "merge".
     */
    public void markTxLaserMerge() throws JNCException {
        markLeafMerge("txLaser");
    }

    /**
     * Marks the leaf "tx-laser" with operation "create".
     */
    public void markTxLaserCreate() throws JNCException {
        markLeafCreate("txLaser");
    }

    /**
     * Marks the leaf "tx-laser" with operation "delete".
     */
    public void markTxLaserDelete() throws JNCException {
        markLeafDelete("txLaser");
    }

    /* Access methods for optional leaf child: "target-output-power". */

    /**
     * Gets the value for child leaf "target-output-power".
     * @return The value of the leaf.
     */
    public YangDecimal64 getTargetOutputPowerValue() throws JNCException {
        return (YangDecimal64)getValue("target-output-power");
    }

    /**
     * Sets the value for child leaf "target-output-power",
     * using instance of generated typedef class.
     * @param targetOutputPowerValue The value to set.
     * @param targetOutputPowerValue used during instantiation.
     */
    public void setTargetOutputPowerValue(YangDecimal64 targetOutputPowerValue)
            throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "target-output-power",
            targetOutputPowerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "target-output-power",
     * using Java primitive values.
     * @param targetOutputPowerValue used during instantiation.
     */
    public void setTargetOutputPowerValue(BigDecimal targetOutputPowerValue)
            throws JNCException {
        setTargetOutputPowerValue(new YangDecimal64(targetOutputPowerValue, 2));
    }

    /**
     * Sets the value for child leaf "target-output-power",
     * using a String value.
     * @param targetOutputPowerValue used during instantiation.
     */
    public void setTargetOutputPowerValue(String targetOutputPowerValue)
            throws JNCException {
        setTargetOutputPowerValue(new YangDecimal64(targetOutputPowerValue, 2));
    }

    /**
     * Unsets the value for child leaf "target-output-power".
     */
    public void unsetTargetOutputPowerValue() throws JNCException {
        delete("target-output-power");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "target-output-power" leaf will not have a value.
     */
    public void addTargetOutputPower() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "target-output-power",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "target-output-power" with operation "replace".
     */
    public void markTargetOutputPowerReplace() throws JNCException {
        markLeafReplace("targetOutputPower");
    }

    /**
     * Marks the leaf "target-output-power" with operation "merge".
     */
    public void markTargetOutputPowerMerge() throws JNCException {
        markLeafMerge("targetOutputPower");
    }

    /**
     * Marks the leaf "target-output-power" with operation "create".
     */
    public void markTargetOutputPowerCreate() throws JNCException {
        markLeafCreate("targetOutputPower");
    }

    /**
     * Marks the leaf "target-output-power" with operation "delete".
     */
    public void markTargetOutputPowerDelete() throws JNCException {
        markLeafDelete("targetOutputPower");
    }

    /* Access methods for optional leaf child: "output-frequency". */

    /**
     * Gets the value for child leaf "output-frequency".
     * @return The value of the leaf.
     */
    public FrequencyType getOutputFrequencyValue() throws JNCException {
        return (FrequencyType)getValue("output-frequency");
    }

    /**
     * Sets the value for child leaf "output-frequency",
     * using a JNC type value.
     * @param outputFrequencyValue The value to set.
     * @param outputFrequencyValue used during instantiation.
     */
    public void setOutputFrequencyValue(FrequencyType outputFrequencyValue)
            throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "output-frequency",
            outputFrequencyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "output-frequency",
     * using Java primitive values.
     * @param outputFrequencyValue used during instantiation.
     */
    public void setOutputFrequencyValue(BigInteger outputFrequencyValue)
            throws JNCException {
        setOutputFrequencyValue(new FrequencyType(outputFrequencyValue));
    }

    /**
     * Sets the value for child leaf "output-frequency",
     * using a String value.
     * @param outputFrequencyValue used during instantiation.
     */
    public void setOutputFrequencyValue(String outputFrequencyValue)
            throws JNCException {
        setOutputFrequencyValue(new FrequencyType(outputFrequencyValue));
    }

    /**
     * Unsets the value for child leaf "output-frequency".
     */
    public void unsetOutputFrequencyValue() throws JNCException {
        delete("output-frequency");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "output-frequency" leaf will not have a value.
     */
    public void addOutputFrequency() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "output-frequency",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "output-frequency" with operation "replace".
     */
    public void markOutputFrequencyReplace() throws JNCException {
        markLeafReplace("outputFrequency");
    }

    /**
     * Marks the leaf "output-frequency" with operation "merge".
     */
    public void markOutputFrequencyMerge() throws JNCException {
        markLeafMerge("outputFrequency");
    }

    /**
     * Marks the leaf "output-frequency" with operation "create".
     */
    public void markOutputFrequencyCreate() throws JNCException {
        markLeafCreate("outputFrequency");
    }

    /**
     * Marks the leaf "output-frequency" with operation "delete".
     */
    public void markOutputFrequencyDelete() throws JNCException {
        markLeafDelete("outputFrequency");
    }

    /* Access methods for container child: "output-power". */

    /**
     * Adds container entry "outputPower", using an existing object.
     * @param outputPower The object to add.
     * @return The added child.
     */
    public OutputPower addOutputPower(OutputPower outputPower)
            throws JNCException {
        this.outputPower = outputPower;
        insertChild(outputPower, childrenNames());
        return outputPower;
    }

    /**
     * Adds container entry "outputPower".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public OutputPower addOutputPower() throws JNCException {
        OutputPower outputPower = new OutputPower();
        this.outputPower = outputPower;
        insertChild(outputPower, childrenNames());
        return outputPower;
    }

    /**
     * Deletes container entry "outputPower".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteOutputPower() throws JNCException {
        this.outputPower = null;
        String path = "output-power";
        return delete(path);
    }

    /* Access methods for container child: "input-power". */

    /**
     * Adds container entry "inputPower", using an existing object.
     * @param inputPower The object to add.
     * @return The added child.
     */
    public InputPower addInputPower(InputPower inputPower) throws JNCException {
        this.inputPower = inputPower;
        insertChild(inputPower, childrenNames());
        return inputPower;
    }

    /**
     * Adds container entry "inputPower".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public InputPower addInputPower() throws JNCException {
        InputPower inputPower = new InputPower();
        this.inputPower = inputPower;
        insertChild(inputPower, childrenNames());
        return inputPower;
    }

    /**
     * Deletes container entry "inputPower".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteInputPower() throws JNCException {
        this.inputPower = null;
        String path = "input-power";
        return delete(path);
    }

    /* Access methods for container child: "laser-bias-current". */

    /**
     * Adds container entry "laserBiasCurrent", using an existing object.
     * @param laserBiasCurrent The object to add.
     * @return The added child.
     */
    public LaserBiasCurrent addLaserBiasCurrent(LaserBiasCurrent laserBiasCurrent)
            throws JNCException {
        this.laserBiasCurrent = laserBiasCurrent;
        insertChild(laserBiasCurrent, childrenNames());
        return laserBiasCurrent;
    }

    /**
     * Adds container entry "laserBiasCurrent".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public LaserBiasCurrent addLaserBiasCurrent() throws JNCException {
        LaserBiasCurrent laserBiasCurrent = new LaserBiasCurrent();
        this.laserBiasCurrent = laserBiasCurrent;
        insertChild(laserBiasCurrent, childrenNames());
        return laserBiasCurrent;
    }

    /**
     * Deletes container entry "laserBiasCurrent".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteLaserBiasCurrent() throws JNCException {
        this.laserBiasCurrent = null;
        String path = "laser-bias-current";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof OutputPower) outputPower = (OutputPower)child;
        else if (child instanceof InputPower) inputPower = (InputPower)child;
        else if (child instanceof LaserBiasCurrent) laserBiasCurrent = (LaserBiasCurrent)child;
    }

}

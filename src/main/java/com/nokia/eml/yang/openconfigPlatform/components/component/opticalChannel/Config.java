/* 
 * @(#)Config.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-platform", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigPlatform.components.component.opticalChannel;

import com.nokia.eml.yang.openconfigTerminalDevice.OcOptTerm;
import com.nokia.eml.yang.openconfigTransportTypes.FrequencyType;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangDecimal64;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;

import java.math.BigDecimal;
import java.math.BigInteger;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/platform
 * generated to "src/com/nokia/eml/yang/openconfigPlatform/components/component/opticalChannel/config"
 * <p>
 * See line 966 in
 * /root/nokia-yang/optical-transport/openconfig-terminal-device.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class Config extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Config object.
     */
    public Config() {
        super(OcOptTerm.NAMESPACE, "config");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Config clone() {
        return (Config)cloneContent(new Config());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Config cloneShallow() {
        return (Config)cloneShallowContent(new Config());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "frequency",
            "target-output-power",
            "operational-mode",
            "line-port",
        };
    }

    /* Access methods for optional leaf child: "frequency". */

    /**
     * Gets the value for child leaf "frequency".
     * @return The value of the leaf.
     */
    public FrequencyType getFrequencyValue() throws JNCException {
        return (FrequencyType)getValue("frequency");
    }

    /**
     * Sets the value for child leaf "frequency",
     * using a JNC type value.
     * @param frequencyValue The value to set.
     * @param frequencyValue used during instantiation.
     */
    public void setFrequencyValue(FrequencyType frequencyValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "frequency",
            frequencyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "frequency",
     * using Java primitive values.
     * @param frequencyValue used during instantiation.
     */
    public void setFrequencyValue(BigInteger frequencyValue)
            throws JNCException {
        setFrequencyValue(new FrequencyType(frequencyValue));
    }

    /**
     * Sets the value for child leaf "frequency",
     * using a String value.
     * @param frequencyValue used during instantiation.
     */
    public void setFrequencyValue(String frequencyValue) throws JNCException {
        setFrequencyValue(new FrequencyType(frequencyValue));
    }

    /**
     * Unsets the value for child leaf "frequency".
     */
    public void unsetFrequencyValue() throws JNCException {
        delete("frequency");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "frequency" leaf will not have a value.
     */
    public void addFrequency() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "frequency",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "frequency" with operation "replace".
     */
    public void markFrequencyReplace() throws JNCException {
        markLeafReplace("frequency");
    }

    /**
     * Marks the leaf "frequency" with operation "merge".
     */
    public void markFrequencyMerge() throws JNCException {
        markLeafMerge("frequency");
    }

    /**
     * Marks the leaf "frequency" with operation "create".
     */
    public void markFrequencyCreate() throws JNCException {
        markLeafCreate("frequency");
    }

    /**
     * Marks the leaf "frequency" with operation "delete".
     */
    public void markFrequencyDelete() throws JNCException {
        markLeafDelete("frequency");
    }

    /* Access methods for optional leaf child: "target-output-power". */

    /**
     * Gets the value for child leaf "target-output-power".
     * @return The value of the leaf.
     */
    public YangDecimal64 getTargetOutputPowerValue() throws JNCException {
        return (YangDecimal64)getValue("target-output-power");
    }

    /**
     * Sets the value for child leaf "target-output-power",
     * using instance of generated typedef class.
     * @param targetOutputPowerValue The value to set.
     * @param targetOutputPowerValue used during instantiation.
     */
    public void setTargetOutputPowerValue(YangDecimal64 targetOutputPowerValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "target-output-power",
            targetOutputPowerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "target-output-power",
     * using Java primitive values.
     * @param targetOutputPowerValue used during instantiation.
     */
    public void setTargetOutputPowerValue(BigDecimal targetOutputPowerValue)
            throws JNCException {
        setTargetOutputPowerValue(new YangDecimal64(targetOutputPowerValue, 2));
    }

    /**
     * Sets the value for child leaf "target-output-power",
     * using a String value.
     * @param targetOutputPowerValue used during instantiation.
     */
    public void setTargetOutputPowerValue(String targetOutputPowerValue)
            throws JNCException {
        setTargetOutputPowerValue(new YangDecimal64(targetOutputPowerValue, 2));
    }

    /**
     * Unsets the value for child leaf "target-output-power".
     */
    public void unsetTargetOutputPowerValue() throws JNCException {
        delete("target-output-power");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "target-output-power" leaf will not have a value.
     */
    public void addTargetOutputPower() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "target-output-power",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "target-output-power" with operation "replace".
     */
    public void markTargetOutputPowerReplace() throws JNCException {
        markLeafReplace("targetOutputPower");
    }

    /**
     * Marks the leaf "target-output-power" with operation "merge".
     */
    public void markTargetOutputPowerMerge() throws JNCException {
        markLeafMerge("targetOutputPower");
    }

    /**
     * Marks the leaf "target-output-power" with operation "create".
     */
    public void markTargetOutputPowerCreate() throws JNCException {
        markLeafCreate("targetOutputPower");
    }

    /**
     * Marks the leaf "target-output-power" with operation "delete".
     */
    public void markTargetOutputPowerDelete() throws JNCException {
        markLeafDelete("targetOutputPower");
    }

    /* Access methods for optional leaf child: "operational-mode". */

    /**
     * Gets the value for child leaf "operational-mode".
     * @return The value of the leaf.
     */
    public YangUInt16 getOperationalModeValue() throws JNCException {
        return (YangUInt16)getValue("operational-mode");
    }

    /**
     * Sets the value for child leaf "operational-mode",
     * using instance of generated typedef class.
     * @param operationalModeValue The value to set.
     * @param operationalModeValue used during instantiation.
     */
    public void setOperationalModeValue(YangUInt16 operationalModeValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "operational-mode",
            operationalModeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "operational-mode",
     * using Java primitive values.
     * @param operationalModeValue used during instantiation.
     */
    public void setOperationalModeValue(int operationalModeValue)
            throws JNCException {
        setOperationalModeValue(new YangUInt16(operationalModeValue));
    }

    /**
     * Sets the value for child leaf "operational-mode",
     * using a String value.
     * @param operationalModeValue used during instantiation.
     */
    public void setOperationalModeValue(String operationalModeValue)
            throws JNCException {
        setOperationalModeValue(new YangUInt16(operationalModeValue));
    }

    /**
     * Unsets the value for child leaf "operational-mode".
     */
    public void unsetOperationalModeValue() throws JNCException {
        delete("operational-mode");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "operational-mode" leaf will not have a value.
     */
    public void addOperationalMode() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "operational-mode",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "operational-mode" with operation "replace".
     */
    public void markOperationalModeReplace() throws JNCException {
        markLeafReplace("operationalMode");
    }

    /**
     * Marks the leaf "operational-mode" with operation "merge".
     */
    public void markOperationalModeMerge() throws JNCException {
        markLeafMerge("operationalMode");
    }

    /**
     * Marks the leaf "operational-mode" with operation "create".
     */
    public void markOperationalModeCreate() throws JNCException {
        markLeafCreate("operationalMode");
    }

    /**
     * Marks the leaf "operational-mode" with operation "delete".
     */
    public void markOperationalModeDelete() throws JNCException {
        markLeafDelete("operationalMode");
    }

    /* Access methods for optional leaf child: "line-port". */

    /**
     * Gets the value for child leaf "line-port".
     * @return The value of the leaf.
     */
    public YangString getLinePortValue() throws JNCException {
        return (YangString)getValue("line-port");
    }

    /**
     * Sets the value for child leaf "line-port",
     * using instance of generated typedef class.
     * @param linePortValue The value to set.
     * @param linePortValue used during instantiation.
     */
    public void setLinePortValue(YangString linePortValue) throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "line-port",
            linePortValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "line-port",
     * using a String value.
     * @param linePortValue used during instantiation.
     */
    public void setLinePortValue(String linePortValue) throws JNCException {
        setLinePortValue(new YangString(linePortValue));
    }

    /**
     * Unsets the value for child leaf "line-port".
     */
    public void unsetLinePortValue() throws JNCException {
        delete("line-port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "line-port" leaf will not have a value.
     */
    public void addLinePort() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "line-port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "line-port" with operation "replace".
     */
    public void markLinePortReplace() throws JNCException {
        markLeafReplace("linePort");
    }

    /**
     * Marks the leaf "line-port" with operation "merge".
     */
    public void markLinePortMerge() throws JNCException {
        markLeafMerge("linePort");
    }

    /**
     * Marks the leaf "line-port" with operation "create".
     */
    public void markLinePortCreate() throws JNCException {
        markLeafCreate("linePort");
    }

    /**
     * Marks the leaf "line-port" with operation "delete".
     */
    public void markLinePortDelete() throws JNCException {
        markLeafDelete("linePort");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

/* 
 * @(#)State.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-platform", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigPlatform.components.component.opticalChannel;

import com.nokia.eml.yang.openconfigPlatform.components.component.opticalChannel.state.ChromaticDispersion;
import com.nokia.eml.yang.openconfigPlatform.components.component.opticalChannel.state.InputPower;
import com.nokia.eml.yang.openconfigPlatform.components.component.opticalChannel.state.LaserBiasCurrent;
import com.nokia.eml.yang.openconfigPlatform.components.component.opticalChannel.state.OutputPower;
import com.nokia.eml.yang.openconfigPlatform.components.component.opticalChannel.state.PolarizationDependentLoss;
import com.nokia.eml.yang.openconfigPlatform.components.component.opticalChannel.state.PolarizationModeDispersion;
import com.nokia.eml.yang.openconfigPlatform.components.component.opticalChannel.state.SecondOrderPolarizationModeDispersion;
import com.nokia.eml.yang.openconfigTerminalDevice.OcOptTerm;
import com.nokia.eml.yang.openconfigTransportTypes.FrequencyType;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangDecimal64;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;
import com.tailf.jnc.YangUInt32;

import java.math.BigDecimal;
import java.math.BigInteger;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/platform
 * generated to "src/com/nokia/eml/yang/openconfigPlatform/components/component/opticalChannel/state"
 * <p>
 * See line 973 in
 * /root/nokia-yang/optical-transport/openconfig-terminal-device.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class State extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "output-power".
     */
    public OutputPower outputPower = null;

    /**
     * Field for child container "input-power".
     */
    public InputPower inputPower = null;

    /**
     * Field for child container "laser-bias-current".
     */
    public LaserBiasCurrent laserBiasCurrent = null;

    /**
     * Field for child container "chromatic-dispersion".
     */
    public ChromaticDispersion chromaticDispersion = null;

    /**
     * Field for child container "polarization-mode-dispersion".
     */
    public PolarizationModeDispersion polarizationModeDispersion = null;

    /**
     * Field for child container "second-order-polarization-mode-dispersion".
     */
    public SecondOrderPolarizationModeDispersion secondOrderPolarizationModeDispersion = null;

    /**
     * Field for child container "polarization-dependent-loss".
     */
    public PolarizationDependentLoss polarizationDependentLoss = null;

    /**
     * Constructor for an empty State object.
     */
    public State() {
        super(OcOptTerm.NAMESPACE, "state");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public State clone() {
        return (State)cloneContent(new State());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public State cloneShallow() {
        return (State)cloneShallowContent(new State());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "frequency",
            "target-output-power",
            "operational-mode",
            "line-port",
            "group-id",
            "output-power",
            "input-power",
            "laser-bias-current",
            "chromatic-dispersion",
            "polarization-mode-dispersion",
            "second-order-polarization-mode-dispersion",
            "polarization-dependent-loss",
        };
    }

    /* Access methods for optional leaf child: "frequency". */

    /**
     * Gets the value for child leaf "frequency".
     * @return The value of the leaf.
     */
    public FrequencyType getFrequencyValue() throws JNCException {
        return (FrequencyType)getValue("frequency");
    }

    /**
     * Sets the value for child leaf "frequency",
     * using a JNC type value.
     * @param frequencyValue The value to set.
     * @param frequencyValue used during instantiation.
     */
    public void setFrequencyValue(FrequencyType frequencyValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "frequency",
            frequencyValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "frequency",
     * using Java primitive values.
     * @param frequencyValue used during instantiation.
     */
    public void setFrequencyValue(BigInteger frequencyValue)
            throws JNCException {
        setFrequencyValue(new FrequencyType(frequencyValue));
    }

    /**
     * Sets the value for child leaf "frequency",
     * using a String value.
     * @param frequencyValue used during instantiation.
     */
    public void setFrequencyValue(String frequencyValue) throws JNCException {
        setFrequencyValue(new FrequencyType(frequencyValue));
    }

    /**
     * Unsets the value for child leaf "frequency".
     */
    public void unsetFrequencyValue() throws JNCException {
        delete("frequency");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "frequency" leaf will not have a value.
     */
    public void addFrequency() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "frequency",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "frequency" with operation "replace".
     */
    public void markFrequencyReplace() throws JNCException {
        markLeafReplace("frequency");
    }

    /**
     * Marks the leaf "frequency" with operation "merge".
     */
    public void markFrequencyMerge() throws JNCException {
        markLeafMerge("frequency");
    }

    /**
     * Marks the leaf "frequency" with operation "create".
     */
    public void markFrequencyCreate() throws JNCException {
        markLeafCreate("frequency");
    }

    /**
     * Marks the leaf "frequency" with operation "delete".
     */
    public void markFrequencyDelete() throws JNCException {
        markLeafDelete("frequency");
    }

    /* Access methods for optional leaf child: "target-output-power". */

    /**
     * Gets the value for child leaf "target-output-power".
     * @return The value of the leaf.
     */
    public YangDecimal64 getTargetOutputPowerValue() throws JNCException {
        return (YangDecimal64)getValue("target-output-power");
    }

    /**
     * Sets the value for child leaf "target-output-power",
     * using instance of generated typedef class.
     * @param targetOutputPowerValue The value to set.
     * @param targetOutputPowerValue used during instantiation.
     */
    public void setTargetOutputPowerValue(YangDecimal64 targetOutputPowerValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "target-output-power",
            targetOutputPowerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "target-output-power",
     * using Java primitive values.
     * @param targetOutputPowerValue used during instantiation.
     */
    public void setTargetOutputPowerValue(BigDecimal targetOutputPowerValue)
            throws JNCException {
        setTargetOutputPowerValue(new YangDecimal64(targetOutputPowerValue, 2));
    }

    /**
     * Sets the value for child leaf "target-output-power",
     * using a String value.
     * @param targetOutputPowerValue used during instantiation.
     */
    public void setTargetOutputPowerValue(String targetOutputPowerValue)
            throws JNCException {
        setTargetOutputPowerValue(new YangDecimal64(targetOutputPowerValue, 2));
    }

    /**
     * Unsets the value for child leaf "target-output-power".
     */
    public void unsetTargetOutputPowerValue() throws JNCException {
        delete("target-output-power");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "target-output-power" leaf will not have a value.
     */
    public void addTargetOutputPower() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "target-output-power",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "target-output-power" with operation "replace".
     */
    public void markTargetOutputPowerReplace() throws JNCException {
        markLeafReplace("targetOutputPower");
    }

    /**
     * Marks the leaf "target-output-power" with operation "merge".
     */
    public void markTargetOutputPowerMerge() throws JNCException {
        markLeafMerge("targetOutputPower");
    }

    /**
     * Marks the leaf "target-output-power" with operation "create".
     */
    public void markTargetOutputPowerCreate() throws JNCException {
        markLeafCreate("targetOutputPower");
    }

    /**
     * Marks the leaf "target-output-power" with operation "delete".
     */
    public void markTargetOutputPowerDelete() throws JNCException {
        markLeafDelete("targetOutputPower");
    }

    /* Access methods for optional leaf child: "operational-mode". */

    /**
     * Gets the value for child leaf "operational-mode".
     * @return The value of the leaf.
     */
    public YangUInt16 getOperationalModeValue() throws JNCException {
        return (YangUInt16)getValue("operational-mode");
    }

    /**
     * Sets the value for child leaf "operational-mode",
     * using instance of generated typedef class.
     * @param operationalModeValue The value to set.
     * @param operationalModeValue used during instantiation.
     */
    public void setOperationalModeValue(YangUInt16 operationalModeValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "operational-mode",
            operationalModeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "operational-mode",
     * using Java primitive values.
     * @param operationalModeValue used during instantiation.
     */
    public void setOperationalModeValue(int operationalModeValue)
            throws JNCException {
        setOperationalModeValue(new YangUInt16(operationalModeValue));
    }

    /**
     * Sets the value for child leaf "operational-mode",
     * using a String value.
     * @param operationalModeValue used during instantiation.
     */
    public void setOperationalModeValue(String operationalModeValue)
            throws JNCException {
        setOperationalModeValue(new YangUInt16(operationalModeValue));
    }

    /**
     * Unsets the value for child leaf "operational-mode".
     */
    public void unsetOperationalModeValue() throws JNCException {
        delete("operational-mode");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "operational-mode" leaf will not have a value.
     */
    public void addOperationalMode() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "operational-mode",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "operational-mode" with operation "replace".
     */
    public void markOperationalModeReplace() throws JNCException {
        markLeafReplace("operationalMode");
    }

    /**
     * Marks the leaf "operational-mode" with operation "merge".
     */
    public void markOperationalModeMerge() throws JNCException {
        markLeafMerge("operationalMode");
    }

    /**
     * Marks the leaf "operational-mode" with operation "create".
     */
    public void markOperationalModeCreate() throws JNCException {
        markLeafCreate("operationalMode");
    }

    /**
     * Marks the leaf "operational-mode" with operation "delete".
     */
    public void markOperationalModeDelete() throws JNCException {
        markLeafDelete("operationalMode");
    }

    /* Access methods for optional leaf child: "line-port". */

    /**
     * Gets the value for child leaf "line-port".
     * @return The value of the leaf.
     */
    public YangString getLinePortValue() throws JNCException {
        return (YangString)getValue("line-port");
    }

    /**
     * Sets the value for child leaf "line-port",
     * using instance of generated typedef class.
     * @param linePortValue The value to set.
     * @param linePortValue used during instantiation.
     */
    public void setLinePortValue(YangString linePortValue) throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "line-port",
            linePortValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "line-port",
     * using a String value.
     * @param linePortValue used during instantiation.
     */
    public void setLinePortValue(String linePortValue) throws JNCException {
        setLinePortValue(new YangString(linePortValue));
    }

    /**
     * Unsets the value for child leaf "line-port".
     */
    public void unsetLinePortValue() throws JNCException {
        delete("line-port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "line-port" leaf will not have a value.
     */
    public void addLinePort() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "line-port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "line-port" with operation "replace".
     */
    public void markLinePortReplace() throws JNCException {
        markLeafReplace("linePort");
    }

    /**
     * Marks the leaf "line-port" with operation "merge".
     */
    public void markLinePortMerge() throws JNCException {
        markLeafMerge("linePort");
    }

    /**
     * Marks the leaf "line-port" with operation "create".
     */
    public void markLinePortCreate() throws JNCException {
        markLeafCreate("linePort");
    }

    /**
     * Marks the leaf "line-port" with operation "delete".
     */
    public void markLinePortDelete() throws JNCException {
        markLeafDelete("linePort");
    }

    /* Access methods for optional leaf child: "group-id". */

    /**
     * Gets the value for child leaf "group-id".
     * @return The value of the leaf.
     */
    public YangUInt32 getGroupIdValue() throws JNCException {
        return (YangUInt32)getValue("group-id");
    }

    /**
     * Sets the value for child leaf "group-id",
     * using instance of generated typedef class.
     * @param groupIdValue The value to set.
     * @param groupIdValue used during instantiation.
     */
    public void setGroupIdValue(YangUInt32 groupIdValue) throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "group-id",
            groupIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "group-id",
     * using Java primitive values.
     * @param groupIdValue used during instantiation.
     */
    public void setGroupIdValue(long groupIdValue) throws JNCException {
        setGroupIdValue(new YangUInt32(groupIdValue));
    }

    /**
     * Sets the value for child leaf "group-id",
     * using a String value.
     * @param groupIdValue used during instantiation.
     */
    public void setGroupIdValue(String groupIdValue) throws JNCException {
        setGroupIdValue(new YangUInt32(groupIdValue));
    }

    /**
     * Unsets the value for child leaf "group-id".
     */
    public void unsetGroupIdValue() throws JNCException {
        delete("group-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "group-id" leaf will not have a value.
     */
    public void addGroupId() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "group-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "group-id" with operation "replace".
     */
    public void markGroupIdReplace() throws JNCException {
        markLeafReplace("groupId");
    }

    /**
     * Marks the leaf "group-id" with operation "merge".
     */
    public void markGroupIdMerge() throws JNCException {
        markLeafMerge("groupId");
    }

    /**
     * Marks the leaf "group-id" with operation "create".
     */
    public void markGroupIdCreate() throws JNCException {
        markLeafCreate("groupId");
    }

    /**
     * Marks the leaf "group-id" with operation "delete".
     */
    public void markGroupIdDelete() throws JNCException {
        markLeafDelete("groupId");
    }

    /* Access methods for container child: "output-power". */

    /**
     * Adds container entry "outputPower", using an existing object.
     * @param outputPower The object to add.
     * @return The added child.
     */
    public OutputPower addOutputPower(OutputPower outputPower)
            throws JNCException {
        this.outputPower = outputPower;
        insertChild(outputPower, childrenNames());
        return outputPower;
    }

    /**
     * Adds container entry "outputPower".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public OutputPower addOutputPower() throws JNCException {
        OutputPower outputPower = new OutputPower();
        this.outputPower = outputPower;
        insertChild(outputPower, childrenNames());
        return outputPower;
    }

    /**
     * Deletes container entry "outputPower".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteOutputPower() throws JNCException {
        this.outputPower = null;
        String path = "output-power";
        return delete(path);
    }

    /* Access methods for container child: "input-power". */

    /**
     * Adds container entry "inputPower", using an existing object.
     * @param inputPower The object to add.
     * @return The added child.
     */
    public InputPower addInputPower(InputPower inputPower) throws JNCException {
        this.inputPower = inputPower;
        insertChild(inputPower, childrenNames());
        return inputPower;
    }

    /**
     * Adds container entry "inputPower".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public InputPower addInputPower() throws JNCException {
        InputPower inputPower = new InputPower();
        this.inputPower = inputPower;
        insertChild(inputPower, childrenNames());
        return inputPower;
    }

    /**
     * Deletes container entry "inputPower".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteInputPower() throws JNCException {
        this.inputPower = null;
        String path = "input-power";
        return delete(path);
    }

    /* Access methods for container child: "laser-bias-current". */

    /**
     * Adds container entry "laserBiasCurrent", using an existing object.
     * @param laserBiasCurrent The object to add.
     * @return The added child.
     */
    public LaserBiasCurrent addLaserBiasCurrent(LaserBiasCurrent laserBiasCurrent)
            throws JNCException {
        this.laserBiasCurrent = laserBiasCurrent;
        insertChild(laserBiasCurrent, childrenNames());
        return laserBiasCurrent;
    }

    /**
     * Adds container entry "laserBiasCurrent".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public LaserBiasCurrent addLaserBiasCurrent() throws JNCException {
        LaserBiasCurrent laserBiasCurrent = new LaserBiasCurrent();
        this.laserBiasCurrent = laserBiasCurrent;
        insertChild(laserBiasCurrent, childrenNames());
        return laserBiasCurrent;
    }

    /**
     * Deletes container entry "laserBiasCurrent".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteLaserBiasCurrent() throws JNCException {
        this.laserBiasCurrent = null;
        String path = "laser-bias-current";
        return delete(path);
    }

    /* Access methods for container child: "chromatic-dispersion". */

    /**
     * Adds container entry "chromaticDispersion", using an existing object.
     * @param chromaticDispersion The object to add.
     * @return The added child.
     */
    public ChromaticDispersion addChromaticDispersion(ChromaticDispersion chromaticDispersion)
            throws JNCException {
        this.chromaticDispersion = chromaticDispersion;
        insertChild(chromaticDispersion, childrenNames());
        return chromaticDispersion;
    }

    /**
     * Adds container entry "chromaticDispersion".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public ChromaticDispersion addChromaticDispersion() throws JNCException {
        ChromaticDispersion chromaticDispersion = new ChromaticDispersion();
        this.chromaticDispersion = chromaticDispersion;
        insertChild(chromaticDispersion, childrenNames());
        return chromaticDispersion;
    }

    /**
     * Deletes container entry "chromaticDispersion".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteChromaticDispersion() throws JNCException {
        this.chromaticDispersion = null;
        String path = "chromatic-dispersion";
        return delete(path);
    }

    /* Access methods for container child: "polarization-mode-dispersion". */

    /**
     * Adds container entry "polarizationModeDispersion", using an existing object.
     * @param polarizationModeDispersion The object to add.
     * @return The added child.
     */
    public PolarizationModeDispersion addPolarizationModeDispersion(PolarizationModeDispersion polarizationModeDispersion)
            throws JNCException {
        this.polarizationModeDispersion = polarizationModeDispersion;
        insertChild(polarizationModeDispersion, childrenNames());
        return polarizationModeDispersion;
    }

    /**
     * Adds container entry "polarizationModeDispersion".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public PolarizationModeDispersion addPolarizationModeDispersion()
            throws JNCException {
        PolarizationModeDispersion polarizationModeDispersion = new PolarizationModeDispersion();
        this.polarizationModeDispersion = polarizationModeDispersion;
        insertChild(polarizationModeDispersion, childrenNames());
        return polarizationModeDispersion;
    }

    /**
     * Deletes container entry "polarizationModeDispersion".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deletePolarizationModeDispersion() throws JNCException {
        this.polarizationModeDispersion = null;
        String path = "polarization-mode-dispersion";
        return delete(path);
    }

    /* Access methods for container child: "second-order-polarization-mode-dispersion". */

    /**
     * Adds container entry "secondOrderPolarizationModeDispersion", using an existing object.
     * @param secondOrderPolarizationModeDispersion The object to add.
     * @return The added child.
     */
    public SecondOrderPolarizationModeDispersion addSecondOrderPolarizationModeDispersion(SecondOrderPolarizationModeDispersion secondOrderPolarizationModeDispersion)
            throws JNCException {
        this.secondOrderPolarizationModeDispersion = secondOrderPolarizationModeDispersion;
        insertChild(secondOrderPolarizationModeDispersion, childrenNames());
        return secondOrderPolarizationModeDispersion;
    }

    /**
     * Adds container entry "secondOrderPolarizationModeDispersion".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SecondOrderPolarizationModeDispersion addSecondOrderPolarizationModeDispersion()
            throws JNCException {
        SecondOrderPolarizationModeDispersion secondOrderPolarizationModeDispersion = new SecondOrderPolarizationModeDispersion();
        this.secondOrderPolarizationModeDispersion = secondOrderPolarizationModeDispersion;
        insertChild(secondOrderPolarizationModeDispersion, childrenNames());
        return secondOrderPolarizationModeDispersion;
    }

    /**
     * Deletes container entry "secondOrderPolarizationModeDispersion".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSecondOrderPolarizationModeDispersion()
            throws JNCException {
        this.secondOrderPolarizationModeDispersion = null;
        String path = "second-order-polarization-mode-dispersion";
        return delete(path);
    }

    /* Access methods for container child: "polarization-dependent-loss". */

    /**
     * Adds container entry "polarizationDependentLoss", using an existing object.
     * @param polarizationDependentLoss The object to add.
     * @return The added child.
     */
    public PolarizationDependentLoss addPolarizationDependentLoss(PolarizationDependentLoss polarizationDependentLoss)
            throws JNCException {
        this.polarizationDependentLoss = polarizationDependentLoss;
        insertChild(polarizationDependentLoss, childrenNames());
        return polarizationDependentLoss;
    }

    /**
     * Adds container entry "polarizationDependentLoss".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public PolarizationDependentLoss addPolarizationDependentLoss()
            throws JNCException {
        PolarizationDependentLoss polarizationDependentLoss = new PolarizationDependentLoss();
        this.polarizationDependentLoss = polarizationDependentLoss;
        insertChild(polarizationDependentLoss, childrenNames());
        return polarizationDependentLoss;
    }

    /**
     * Deletes container entry "polarizationDependentLoss".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deletePolarizationDependentLoss() throws JNCException {
        this.polarizationDependentLoss = null;
        String path = "polarization-dependent-loss";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof OutputPower) outputPower = (OutputPower)child;
        else if (child instanceof InputPower) inputPower = (InputPower)child;
        else if (child instanceof LaserBiasCurrent) laserBiasCurrent = (LaserBiasCurrent)child;
        else if (child instanceof ChromaticDispersion) chromaticDispersion = (ChromaticDispersion)child;
        else if (child instanceof PolarizationModeDispersion) polarizationModeDispersion = (PolarizationModeDispersion)child;
        else if (child instanceof SecondOrderPolarizationModeDispersion) secondOrderPolarizationModeDispersion = (SecondOrderPolarizationModeDispersion)child;
        else if (child instanceof PolarizationDependentLoss) polarizationDependentLoss = (PolarizationDependentLoss)child;
    }

}

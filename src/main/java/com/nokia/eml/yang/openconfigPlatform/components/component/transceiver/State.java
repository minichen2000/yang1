/* 
 * @(#)State.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-platform", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigPlatform.components.component.transceiver;

import com.nokia.eml.yang.openconfigPlatform.components.component.transceiver.state.InputPower;
import com.nokia.eml.yang.openconfigPlatform.components.component.transceiver.state.LaserBiasCurrent;
import com.nokia.eml.yang.openconfigPlatform.components.component.transceiver.state.OutputPower;
import com.nokia.eml.yang.openconfigPlatformTransceiver.OcTransceiver;
import com.nokia.eml.yang.openconfigYangTypes.DateAndTime;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangEnumeration;
import com.tailf.jnc.YangIdentityref;
import com.tailf.jnc.YangInt16;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/platform
 * generated to "src/com/nokia/eml/yang/openconfigPlatform/components/component/transceiver/state"
 * <p>
 * See line 439 in
 * /root/nokia-yang/platform/openconfig-platform-transceiver.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class State extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "output-power".
     */
    public OutputPower outputPower = null;

    /**
     * Field for child container "input-power".
     */
    public InputPower inputPower = null;

    /**
     * Field for child container "laser-bias-current".
     */
    public LaserBiasCurrent laserBiasCurrent = null;

    /**
     * Constructor for an empty State object.
     */
    public State() {
        super(OcTransceiver.NAMESPACE, "state");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public State clone() {
        return (State)cloneContent(new State());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public State cloneShallow() {
        return (State)cloneShallowContent(new State());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "enabled",
            "form-factor-preconf",
            "ethernet-pmd-preconf",
            "present",
            "form-factor",
            "connector-type",
            "internal-temp",
            "vendor",
            "vendor-part",
            "vendor-rev",
            "ethernet-pmd",
            "sonet-sdh-compliance-code",
            "otn-compliance-code",
            "serial-no",
            "date-code",
            "fault-condition",
            "output-power",
            "input-power",
            "laser-bias-current",
        };
    }

    /* Access methods for optional leaf child: "enabled". */

    /**
     * Gets the value for child leaf "enabled".
     * @return The value of the leaf.
     */
    public YangBoolean getEnabledValue() throws JNCException {
        return (YangBoolean)getValue("enabled");
    }

    /**
     * Sets the value for child leaf "enabled",
     * using instance of generated typedef class.
     * @param enabledValue The value to set.
     * @param enabledValue used during instantiation.
     */
    public void setEnabledValue(YangBoolean enabledValue) throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "enabled",
            enabledValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enabled",
     * using Java primitive values.
     * @param enabledValue used during instantiation.
     */
    public void setEnabledValue(Boolean enabledValue) throws JNCException {
        setEnabledValue(new YangBoolean(enabledValue));
    }

    /**
     * Sets the value for child leaf "enabled",
     * using a String value.
     * @param enabledValue used during instantiation.
     */
    public void setEnabledValue(String enabledValue) throws JNCException {
        setEnabledValue(new YangBoolean(enabledValue));
    }

    /**
     * Unsets the value for child leaf "enabled".
     */
    public void unsetEnabledValue() throws JNCException {
        delete("enabled");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enabled" leaf will not have a value.
     */
    public void addEnabled() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "enabled",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enabled" with operation "replace".
     */
    public void markEnabledReplace() throws JNCException {
        markLeafReplace("enabled");
    }

    /**
     * Marks the leaf "enabled" with operation "merge".
     */
    public void markEnabledMerge() throws JNCException {
        markLeafMerge("enabled");
    }

    /**
     * Marks the leaf "enabled" with operation "create".
     */
    public void markEnabledCreate() throws JNCException {
        markLeafCreate("enabled");
    }

    /**
     * Marks the leaf "enabled" with operation "delete".
     */
    public void markEnabledDelete() throws JNCException {
        markLeafDelete("enabled");
    }

    /* Access methods for optional leaf child: "form-factor-preconf". */

    /**
     * Gets the value for child leaf "form-factor-preconf".
     * @return The value of the leaf.
     */
    public YangIdentityref getFormFactorPreconfValue() throws JNCException {
        return (YangIdentityref)getValue("form-factor-preconf");
    }

    /**
     * Sets the value for child leaf "form-factor-preconf",
     * using instance of generated typedef class.
     * @param formFactorPreconfValue The value to set.
     * @param formFactorPreconfValue used during instantiation.
     */
    public void setFormFactorPreconfValue(YangIdentityref formFactorPreconfValue)
            throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "form-factor-preconf",
            formFactorPreconfValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "form-factor-preconf",
     * using a String value.
     * @param formFactorPreconfValue used during instantiation.
     */
    public void setFormFactorPreconfValue(String formFactorPreconfValue)
            throws JNCException {
        setFormFactorPreconfValue(new YangIdentityref(formFactorPreconfValue));
    }

    /**
     * Unsets the value for child leaf "form-factor-preconf".
     */
    public void unsetFormFactorPreconfValue() throws JNCException {
        delete("form-factor-preconf");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "form-factor-preconf" leaf will not have a value.
     */
    public void addFormFactorPreconf() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "form-factor-preconf",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "form-factor-preconf" with operation "replace".
     */
    public void markFormFactorPreconfReplace() throws JNCException {
        markLeafReplace("formFactorPreconf");
    }

    /**
     * Marks the leaf "form-factor-preconf" with operation "merge".
     */
    public void markFormFactorPreconfMerge() throws JNCException {
        markLeafMerge("formFactorPreconf");
    }

    /**
     * Marks the leaf "form-factor-preconf" with operation "create".
     */
    public void markFormFactorPreconfCreate() throws JNCException {
        markLeafCreate("formFactorPreconf");
    }

    /**
     * Marks the leaf "form-factor-preconf" with operation "delete".
     */
    public void markFormFactorPreconfDelete() throws JNCException {
        markLeafDelete("formFactorPreconf");
    }

    /* Access methods for optional leaf child: "ethernet-pmd-preconf". */

    /**
     * Gets the value for child leaf "ethernet-pmd-preconf".
     * @return The value of the leaf.
     */
    public YangIdentityref getEthernetPmdPreconfValue() throws JNCException {
        return (YangIdentityref)getValue("ethernet-pmd-preconf");
    }

    /**
     * Sets the value for child leaf "ethernet-pmd-preconf",
     * using instance of generated typedef class.
     * @param ethernetPmdPreconfValue The value to set.
     * @param ethernetPmdPreconfValue used during instantiation.
     */
    public void setEthernetPmdPreconfValue(YangIdentityref ethernetPmdPreconfValue)
            throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "ethernet-pmd-preconf",
            ethernetPmdPreconfValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ethernet-pmd-preconf",
     * using a String value.
     * @param ethernetPmdPreconfValue used during instantiation.
     */
    public void setEthernetPmdPreconfValue(String ethernetPmdPreconfValue)
            throws JNCException {
        setEthernetPmdPreconfValue(new YangIdentityref(ethernetPmdPreconfValue));
    }

    /**
     * Unsets the value for child leaf "ethernet-pmd-preconf".
     */
    public void unsetEthernetPmdPreconfValue() throws JNCException {
        delete("ethernet-pmd-preconf");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ethernet-pmd-preconf" leaf will not have a value.
     */
    public void addEthernetPmdPreconf() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "ethernet-pmd-preconf",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ethernet-pmd-preconf" with operation "replace".
     */
    public void markEthernetPmdPreconfReplace() throws JNCException {
        markLeafReplace("ethernetPmdPreconf");
    }

    /**
     * Marks the leaf "ethernet-pmd-preconf" with operation "merge".
     */
    public void markEthernetPmdPreconfMerge() throws JNCException {
        markLeafMerge("ethernetPmdPreconf");
    }

    /**
     * Marks the leaf "ethernet-pmd-preconf" with operation "create".
     */
    public void markEthernetPmdPreconfCreate() throws JNCException {
        markLeafCreate("ethernetPmdPreconf");
    }

    /**
     * Marks the leaf "ethernet-pmd-preconf" with operation "delete".
     */
    public void markEthernetPmdPreconfDelete() throws JNCException {
        markLeafDelete("ethernetPmdPreconf");
    }

    /* Access methods for optional leaf child: "present". */

    /**
     * Gets the value for child leaf "present".
     * @return The value of the leaf.
     */
    public YangEnumeration getPresentValue() throws JNCException {
        return (YangEnumeration)getValue("present");
    }

    /**
     * Sets the value for child leaf "present",
     * using instance of generated typedef class.
     * @param presentValue The value to set.
     * @param presentValue used during instantiation.
     */
    public void setPresentValue(YangEnumeration presentValue)
            throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "present",
            presentValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "present",
     * using a String value.
     * @param presentValue used during instantiation.
     */
    public void setPresentValue(String presentValue) throws JNCException {
        setPresentValue(new YangEnumeration(presentValue, new String[] {
             "PRESENT",
             "NOT_PRESENT",
        }));
    }

    /**
     * Unsets the value for child leaf "present".
     */
    public void unsetPresentValue() throws JNCException {
        delete("present");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "present" leaf will not have a value.
     */
    public void addPresent() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "present",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "present" with operation "replace".
     */
    public void markPresentReplace() throws JNCException {
        markLeafReplace("present");
    }

    /**
     * Marks the leaf "present" with operation "merge".
     */
    public void markPresentMerge() throws JNCException {
        markLeafMerge("present");
    }

    /**
     * Marks the leaf "present" with operation "create".
     */
    public void markPresentCreate() throws JNCException {
        markLeafCreate("present");
    }

    /**
     * Marks the leaf "present" with operation "delete".
     */
    public void markPresentDelete() throws JNCException {
        markLeafDelete("present");
    }

    /* Access methods for optional leaf child: "form-factor". */

    /**
     * Gets the value for child leaf "form-factor".
     * @return The value of the leaf.
     */
    public YangIdentityref getFormFactorValue() throws JNCException {
        return (YangIdentityref)getValue("form-factor");
    }

    /**
     * Sets the value for child leaf "form-factor",
     * using instance of generated typedef class.
     * @param formFactorValue The value to set.
     * @param formFactorValue used during instantiation.
     */
    public void setFormFactorValue(YangIdentityref formFactorValue)
            throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "form-factor",
            formFactorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "form-factor",
     * using a String value.
     * @param formFactorValue used during instantiation.
     */
    public void setFormFactorValue(String formFactorValue) throws JNCException {
        setFormFactorValue(new YangIdentityref(formFactorValue));
    }

    /**
     * Unsets the value for child leaf "form-factor".
     */
    public void unsetFormFactorValue() throws JNCException {
        delete("form-factor");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "form-factor" leaf will not have a value.
     */
    public void addFormFactor() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "form-factor",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "form-factor" with operation "replace".
     */
    public void markFormFactorReplace() throws JNCException {
        markLeafReplace("formFactor");
    }

    /**
     * Marks the leaf "form-factor" with operation "merge".
     */
    public void markFormFactorMerge() throws JNCException {
        markLeafMerge("formFactor");
    }

    /**
     * Marks the leaf "form-factor" with operation "create".
     */
    public void markFormFactorCreate() throws JNCException {
        markLeafCreate("formFactor");
    }

    /**
     * Marks the leaf "form-factor" with operation "delete".
     */
    public void markFormFactorDelete() throws JNCException {
        markLeafDelete("formFactor");
    }

    /* Access methods for optional leaf child: "connector-type". */

    /**
     * Gets the value for child leaf "connector-type".
     * @return The value of the leaf.
     */
    public YangIdentityref getConnectorTypeValue() throws JNCException {
        return (YangIdentityref)getValue("connector-type");
    }

    /**
     * Sets the value for child leaf "connector-type",
     * using instance of generated typedef class.
     * @param connectorTypeValue The value to set.
     * @param connectorTypeValue used during instantiation.
     */
    public void setConnectorTypeValue(YangIdentityref connectorTypeValue)
            throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "connector-type",
            connectorTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "connector-type",
     * using a String value.
     * @param connectorTypeValue used during instantiation.
     */
    public void setConnectorTypeValue(String connectorTypeValue)
            throws JNCException {
        setConnectorTypeValue(new YangIdentityref(connectorTypeValue));
    }

    /**
     * Unsets the value for child leaf "connector-type".
     */
    public void unsetConnectorTypeValue() throws JNCException {
        delete("connector-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "connector-type" leaf will not have a value.
     */
    public void addConnectorType() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "connector-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "connector-type" with operation "replace".
     */
    public void markConnectorTypeReplace() throws JNCException {
        markLeafReplace("connectorType");
    }

    /**
     * Marks the leaf "connector-type" with operation "merge".
     */
    public void markConnectorTypeMerge() throws JNCException {
        markLeafMerge("connectorType");
    }

    /**
     * Marks the leaf "connector-type" with operation "create".
     */
    public void markConnectorTypeCreate() throws JNCException {
        markLeafCreate("connectorType");
    }

    /**
     * Marks the leaf "connector-type" with operation "delete".
     */
    public void markConnectorTypeDelete() throws JNCException {
        markLeafDelete("connectorType");
    }

    /* Access methods for optional leaf child: "internal-temp". */

    /**
     * Gets the value for child leaf "internal-temp".
     * @return The value of the leaf.
     */
    public YangInt16 getInternalTempValue() throws JNCException {
        return (YangInt16)getValue("internal-temp");
    }

    /**
     * Sets the value for child leaf "internal-temp",
     * using instance of generated typedef class.
     * @param internalTempValue The value to set.
     * @param internalTempValue used during instantiation.
     */
    public void setInternalTempValue(YangInt16 internalTempValue)
            throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "internal-temp",
            internalTempValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "internal-temp",
     * using Java primitive values.
     * @param internalTempValue used during instantiation.
     */
    public void setInternalTempValue(short internalTempValue)
            throws JNCException {
        setInternalTempValue(new YangInt16(internalTempValue));
    }

    /**
     * Sets the value for child leaf "internal-temp",
     * using a String value.
     * @param internalTempValue used during instantiation.
     */
    public void setInternalTempValue(String internalTempValue)
            throws JNCException {
        setInternalTempValue(new YangInt16(internalTempValue));
    }

    /**
     * Unsets the value for child leaf "internal-temp".
     */
    public void unsetInternalTempValue() throws JNCException {
        delete("internal-temp");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "internal-temp" leaf will not have a value.
     */
    public void addInternalTemp() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "internal-temp",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "internal-temp" with operation "replace".
     */
    public void markInternalTempReplace() throws JNCException {
        markLeafReplace("internalTemp");
    }

    /**
     * Marks the leaf "internal-temp" with operation "merge".
     */
    public void markInternalTempMerge() throws JNCException {
        markLeafMerge("internalTemp");
    }

    /**
     * Marks the leaf "internal-temp" with operation "create".
     */
    public void markInternalTempCreate() throws JNCException {
        markLeafCreate("internalTemp");
    }

    /**
     * Marks the leaf "internal-temp" with operation "delete".
     */
    public void markInternalTempDelete() throws JNCException {
        markLeafDelete("internalTemp");
    }

    /* Access methods for optional leaf child: "vendor". */

    /**
     * Gets the value for child leaf "vendor".
     * @return The value of the leaf.
     */
    public YangString getVendorValue() throws JNCException {
        return (YangString)getValue("vendor");
    }

    /**
     * Sets the value for child leaf "vendor",
     * using instance of generated typedef class.
     * @param vendorValue The value to set.
     * @param vendorValue used during instantiation.
     */
    public void setVendorValue(YangString vendorValue) throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "vendor",
            vendorValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vendor",
     * using a String value.
     * @param vendorValue used during instantiation.
     */
    public void setVendorValue(String vendorValue) throws JNCException {
        setVendorValue(new YangString(vendorValue));
    }

    /**
     * Unsets the value for child leaf "vendor".
     */
    public void unsetVendorValue() throws JNCException {
        delete("vendor");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vendor" leaf will not have a value.
     */
    public void addVendor() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "vendor",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vendor" with operation "replace".
     */
    public void markVendorReplace() throws JNCException {
        markLeafReplace("vendor");
    }

    /**
     * Marks the leaf "vendor" with operation "merge".
     */
    public void markVendorMerge() throws JNCException {
        markLeafMerge("vendor");
    }

    /**
     * Marks the leaf "vendor" with operation "create".
     */
    public void markVendorCreate() throws JNCException {
        markLeafCreate("vendor");
    }

    /**
     * Marks the leaf "vendor" with operation "delete".
     */
    public void markVendorDelete() throws JNCException {
        markLeafDelete("vendor");
    }

    /* Access methods for optional leaf child: "vendor-part". */

    /**
     * Gets the value for child leaf "vendor-part".
     * @return The value of the leaf.
     */
    public YangString getVendorPartValue() throws JNCException {
        return (YangString)getValue("vendor-part");
    }

    /**
     * Sets the value for child leaf "vendor-part",
     * using instance of generated typedef class.
     * @param vendorPartValue The value to set.
     * @param vendorPartValue used during instantiation.
     */
    public void setVendorPartValue(YangString vendorPartValue)
            throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "vendor-part",
            vendorPartValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vendor-part",
     * using a String value.
     * @param vendorPartValue used during instantiation.
     */
    public void setVendorPartValue(String vendorPartValue) throws JNCException {
        setVendorPartValue(new YangString(vendorPartValue));
    }

    /**
     * Unsets the value for child leaf "vendor-part".
     */
    public void unsetVendorPartValue() throws JNCException {
        delete("vendor-part");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vendor-part" leaf will not have a value.
     */
    public void addVendorPart() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "vendor-part",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vendor-part" with operation "replace".
     */
    public void markVendorPartReplace() throws JNCException {
        markLeafReplace("vendorPart");
    }

    /**
     * Marks the leaf "vendor-part" with operation "merge".
     */
    public void markVendorPartMerge() throws JNCException {
        markLeafMerge("vendorPart");
    }

    /**
     * Marks the leaf "vendor-part" with operation "create".
     */
    public void markVendorPartCreate() throws JNCException {
        markLeafCreate("vendorPart");
    }

    /**
     * Marks the leaf "vendor-part" with operation "delete".
     */
    public void markVendorPartDelete() throws JNCException {
        markLeafDelete("vendorPart");
    }

    /* Access methods for optional leaf child: "vendor-rev". */

    /**
     * Gets the value for child leaf "vendor-rev".
     * @return The value of the leaf.
     */
    public YangString getVendorRevValue() throws JNCException {
        return (YangString)getValue("vendor-rev");
    }

    /**
     * Sets the value for child leaf "vendor-rev",
     * using instance of generated typedef class.
     * @param vendorRevValue The value to set.
     * @param vendorRevValue used during instantiation.
     */
    public void setVendorRevValue(YangString vendorRevValue)
            throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "vendor-rev",
            vendorRevValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vendor-rev",
     * using a String value.
     * @param vendorRevValue used during instantiation.
     */
    public void setVendorRevValue(String vendorRevValue) throws JNCException {
        setVendorRevValue(new YangString(vendorRevValue));
    }

    /**
     * Unsets the value for child leaf "vendor-rev".
     */
    public void unsetVendorRevValue() throws JNCException {
        delete("vendor-rev");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vendor-rev" leaf will not have a value.
     */
    public void addVendorRev() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "vendor-rev",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vendor-rev" with operation "replace".
     */
    public void markVendorRevReplace() throws JNCException {
        markLeafReplace("vendorRev");
    }

    /**
     * Marks the leaf "vendor-rev" with operation "merge".
     */
    public void markVendorRevMerge() throws JNCException {
        markLeafMerge("vendorRev");
    }

    /**
     * Marks the leaf "vendor-rev" with operation "create".
     */
    public void markVendorRevCreate() throws JNCException {
        markLeafCreate("vendorRev");
    }

    /**
     * Marks the leaf "vendor-rev" with operation "delete".
     */
    public void markVendorRevDelete() throws JNCException {
        markLeafDelete("vendorRev");
    }

    /* Access methods for optional leaf child: "ethernet-pmd". */

    /**
     * Gets the value for child leaf "ethernet-pmd".
     * @return The value of the leaf.
     */
    public YangIdentityref getEthernetPmdValue() throws JNCException {
        return (YangIdentityref)getValue("ethernet-pmd");
    }

    /**
     * Sets the value for child leaf "ethernet-pmd",
     * using instance of generated typedef class.
     * @param ethernetPmdValue The value to set.
     * @param ethernetPmdValue used during instantiation.
     */
    public void setEthernetPmdValue(YangIdentityref ethernetPmdValue)
            throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "ethernet-pmd",
            ethernetPmdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ethernet-pmd",
     * using a String value.
     * @param ethernetPmdValue used during instantiation.
     */
    public void setEthernetPmdValue(String ethernetPmdValue)
            throws JNCException {
        setEthernetPmdValue(new YangIdentityref(ethernetPmdValue));
    }

    /**
     * Unsets the value for child leaf "ethernet-pmd".
     */
    public void unsetEthernetPmdValue() throws JNCException {
        delete("ethernet-pmd");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ethernet-pmd" leaf will not have a value.
     */
    public void addEthernetPmd() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "ethernet-pmd",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ethernet-pmd" with operation "replace".
     */
    public void markEthernetPmdReplace() throws JNCException {
        markLeafReplace("ethernetPmd");
    }

    /**
     * Marks the leaf "ethernet-pmd" with operation "merge".
     */
    public void markEthernetPmdMerge() throws JNCException {
        markLeafMerge("ethernetPmd");
    }

    /**
     * Marks the leaf "ethernet-pmd" with operation "create".
     */
    public void markEthernetPmdCreate() throws JNCException {
        markLeafCreate("ethernetPmd");
    }

    /**
     * Marks the leaf "ethernet-pmd" with operation "delete".
     */
    public void markEthernetPmdDelete() throws JNCException {
        markLeafDelete("ethernetPmd");
    }

    /* Access methods for optional leaf child: "sonet-sdh-compliance-code". */

    /**
     * Gets the value for child leaf "sonet-sdh-compliance-code".
     * @return The value of the leaf.
     */
    public YangIdentityref getSonetSdhComplianceCodeValue() throws JNCException {
        return (YangIdentityref)getValue("sonet-sdh-compliance-code");
    }

    /**
     * Sets the value for child leaf "sonet-sdh-compliance-code",
     * using instance of generated typedef class.
     * @param sonetSdhComplianceCodeValue The value to set.
     * @param sonetSdhComplianceCodeValue used during instantiation.
     */
    public void setSonetSdhComplianceCodeValue(YangIdentityref sonetSdhComplianceCodeValue)
            throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "sonet-sdh-compliance-code",
            sonetSdhComplianceCodeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "sonet-sdh-compliance-code",
     * using a String value.
     * @param sonetSdhComplianceCodeValue used during instantiation.
     */
    public void setSonetSdhComplianceCodeValue(String sonetSdhComplianceCodeValue)
            throws JNCException {
        setSonetSdhComplianceCodeValue(new YangIdentityref(sonetSdhComplianceCodeValue));
    }

    /**
     * Unsets the value for child leaf "sonet-sdh-compliance-code".
     */
    public void unsetSonetSdhComplianceCodeValue() throws JNCException {
        delete("sonet-sdh-compliance-code");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "sonet-sdh-compliance-code" leaf will not have a value.
     */
    public void addSonetSdhComplianceCode() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "sonet-sdh-compliance-code",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "sonet-sdh-compliance-code" with operation "replace".
     */
    public void markSonetSdhComplianceCodeReplace() throws JNCException {
        markLeafReplace("sonetSdhComplianceCode");
    }

    /**
     * Marks the leaf "sonet-sdh-compliance-code" with operation "merge".
     */
    public void markSonetSdhComplianceCodeMerge() throws JNCException {
        markLeafMerge("sonetSdhComplianceCode");
    }

    /**
     * Marks the leaf "sonet-sdh-compliance-code" with operation "create".
     */
    public void markSonetSdhComplianceCodeCreate() throws JNCException {
        markLeafCreate("sonetSdhComplianceCode");
    }

    /**
     * Marks the leaf "sonet-sdh-compliance-code" with operation "delete".
     */
    public void markSonetSdhComplianceCodeDelete() throws JNCException {
        markLeafDelete("sonetSdhComplianceCode");
    }

    /* Access methods for optional leaf child: "otn-compliance-code". */

    /**
     * Gets the value for child leaf "otn-compliance-code".
     * @return The value of the leaf.
     */
    public YangIdentityref getOtnComplianceCodeValue() throws JNCException {
        return (YangIdentityref)getValue("otn-compliance-code");
    }

    /**
     * Sets the value for child leaf "otn-compliance-code",
     * using instance of generated typedef class.
     * @param otnComplianceCodeValue The value to set.
     * @param otnComplianceCodeValue used during instantiation.
     */
    public void setOtnComplianceCodeValue(YangIdentityref otnComplianceCodeValue)
            throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "otn-compliance-code",
            otnComplianceCodeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "otn-compliance-code",
     * using a String value.
     * @param otnComplianceCodeValue used during instantiation.
     */
    public void setOtnComplianceCodeValue(String otnComplianceCodeValue)
            throws JNCException {
        setOtnComplianceCodeValue(new YangIdentityref(otnComplianceCodeValue));
    }

    /**
     * Unsets the value for child leaf "otn-compliance-code".
     */
    public void unsetOtnComplianceCodeValue() throws JNCException {
        delete("otn-compliance-code");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "otn-compliance-code" leaf will not have a value.
     */
    public void addOtnComplianceCode() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "otn-compliance-code",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "otn-compliance-code" with operation "replace".
     */
    public void markOtnComplianceCodeReplace() throws JNCException {
        markLeafReplace("otnComplianceCode");
    }

    /**
     * Marks the leaf "otn-compliance-code" with operation "merge".
     */
    public void markOtnComplianceCodeMerge() throws JNCException {
        markLeafMerge("otnComplianceCode");
    }

    /**
     * Marks the leaf "otn-compliance-code" with operation "create".
     */
    public void markOtnComplianceCodeCreate() throws JNCException {
        markLeafCreate("otnComplianceCode");
    }

    /**
     * Marks the leaf "otn-compliance-code" with operation "delete".
     */
    public void markOtnComplianceCodeDelete() throws JNCException {
        markLeafDelete("otnComplianceCode");
    }

    /* Access methods for optional leaf child: "serial-no". */

    /**
     * Gets the value for child leaf "serial-no".
     * @return The value of the leaf.
     */
    public YangString getSerialNoValue() throws JNCException {
        return (YangString)getValue("serial-no");
    }

    /**
     * Sets the value for child leaf "serial-no",
     * using instance of generated typedef class.
     * @param serialNoValue The value to set.
     * @param serialNoValue used during instantiation.
     */
    public void setSerialNoValue(YangString serialNoValue) throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "serial-no",
            serialNoValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "serial-no",
     * using a String value.
     * @param serialNoValue used during instantiation.
     */
    public void setSerialNoValue(String serialNoValue) throws JNCException {
        setSerialNoValue(new YangString(serialNoValue));
    }

    /**
     * Unsets the value for child leaf "serial-no".
     */
    public void unsetSerialNoValue() throws JNCException {
        delete("serial-no");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "serial-no" leaf will not have a value.
     */
    public void addSerialNo() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "serial-no",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "serial-no" with operation "replace".
     */
    public void markSerialNoReplace() throws JNCException {
        markLeafReplace("serialNo");
    }

    /**
     * Marks the leaf "serial-no" with operation "merge".
     */
    public void markSerialNoMerge() throws JNCException {
        markLeafMerge("serialNo");
    }

    /**
     * Marks the leaf "serial-no" with operation "create".
     */
    public void markSerialNoCreate() throws JNCException {
        markLeafCreate("serialNo");
    }

    /**
     * Marks the leaf "serial-no" with operation "delete".
     */
    public void markSerialNoDelete() throws JNCException {
        markLeafDelete("serialNo");
    }

    /* Access methods for optional leaf child: "date-code". */

    /**
     * Gets the value for child leaf "date-code".
     * @return The value of the leaf.
     */
    public DateAndTime getDateCodeValue() throws JNCException {
        return (DateAndTime)getValue("date-code");
    }

    /**
     * Sets the value for child leaf "date-code",
     * using a JNC type value.
     * @param dateCodeValue The value to set.
     * @param dateCodeValue used during instantiation.
     */
    public void setDateCodeValue(DateAndTime dateCodeValue) throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "date-code",
            dateCodeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "date-code",
     * using a String value.
     * @param dateCodeValue used during instantiation.
     */
    public void setDateCodeValue(String dateCodeValue) throws JNCException {
        setDateCodeValue(new DateAndTime(dateCodeValue));
    }

    /**
     * Unsets the value for child leaf "date-code".
     */
    public void unsetDateCodeValue() throws JNCException {
        delete("date-code");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "date-code" leaf will not have a value.
     */
    public void addDateCode() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "date-code",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "date-code" with operation "replace".
     */
    public void markDateCodeReplace() throws JNCException {
        markLeafReplace("dateCode");
    }

    /**
     * Marks the leaf "date-code" with operation "merge".
     */
    public void markDateCodeMerge() throws JNCException {
        markLeafMerge("dateCode");
    }

    /**
     * Marks the leaf "date-code" with operation "create".
     */
    public void markDateCodeCreate() throws JNCException {
        markLeafCreate("dateCode");
    }

    /**
     * Marks the leaf "date-code" with operation "delete".
     */
    public void markDateCodeDelete() throws JNCException {
        markLeafDelete("dateCode");
    }

    /* Access methods for optional leaf child: "fault-condition". */

    /**
     * Gets the value for child leaf "fault-condition".
     * @return The value of the leaf.
     */
    public YangBoolean getFaultConditionValue() throws JNCException {
        return (YangBoolean)getValue("fault-condition");
    }

    /**
     * Sets the value for child leaf "fault-condition",
     * using instance of generated typedef class.
     * @param faultConditionValue The value to set.
     * @param faultConditionValue used during instantiation.
     */
    public void setFaultConditionValue(YangBoolean faultConditionValue)
            throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "fault-condition",
            faultConditionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "fault-condition",
     * using Java primitive values.
     * @param faultConditionValue used during instantiation.
     */
    public void setFaultConditionValue(Boolean faultConditionValue)
            throws JNCException {
        setFaultConditionValue(new YangBoolean(faultConditionValue));
    }

    /**
     * Sets the value for child leaf "fault-condition",
     * using a String value.
     * @param faultConditionValue used during instantiation.
     */
    public void setFaultConditionValue(String faultConditionValue)
            throws JNCException {
        setFaultConditionValue(new YangBoolean(faultConditionValue));
    }

    /**
     * Unsets the value for child leaf "fault-condition".
     */
    public void unsetFaultConditionValue() throws JNCException {
        delete("fault-condition");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "fault-condition" leaf will not have a value.
     */
    public void addFaultCondition() throws JNCException {
        setLeafValue(OcTransceiver.NAMESPACE,
            "fault-condition",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "fault-condition" with operation "replace".
     */
    public void markFaultConditionReplace() throws JNCException {
        markLeafReplace("faultCondition");
    }

    /**
     * Marks the leaf "fault-condition" with operation "merge".
     */
    public void markFaultConditionMerge() throws JNCException {
        markLeafMerge("faultCondition");
    }

    /**
     * Marks the leaf "fault-condition" with operation "create".
     */
    public void markFaultConditionCreate() throws JNCException {
        markLeafCreate("faultCondition");
    }

    /**
     * Marks the leaf "fault-condition" with operation "delete".
     */
    public void markFaultConditionDelete() throws JNCException {
        markLeafDelete("faultCondition");
    }

    /* Access methods for container child: "output-power". */

    /**
     * Adds container entry "outputPower", using an existing object.
     * @param outputPower The object to add.
     * @return The added child.
     */
    public OutputPower addOutputPower(OutputPower outputPower)
            throws JNCException {
        this.outputPower = outputPower;
        insertChild(outputPower, childrenNames());
        return outputPower;
    }

    /**
     * Adds container entry "outputPower".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public OutputPower addOutputPower() throws JNCException {
        OutputPower outputPower = new OutputPower();
        this.outputPower = outputPower;
        insertChild(outputPower, childrenNames());
        return outputPower;
    }

    /**
     * Deletes container entry "outputPower".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteOutputPower() throws JNCException {
        this.outputPower = null;
        String path = "output-power";
        return delete(path);
    }

    /* Access methods for container child: "input-power". */

    /**
     * Adds container entry "inputPower", using an existing object.
     * @param inputPower The object to add.
     * @return The added child.
     */
    public InputPower addInputPower(InputPower inputPower) throws JNCException {
        this.inputPower = inputPower;
        insertChild(inputPower, childrenNames());
        return inputPower;
    }

    /**
     * Adds container entry "inputPower".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public InputPower addInputPower() throws JNCException {
        InputPower inputPower = new InputPower();
        this.inputPower = inputPower;
        insertChild(inputPower, childrenNames());
        return inputPower;
    }

    /**
     * Deletes container entry "inputPower".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteInputPower() throws JNCException {
        this.inputPower = null;
        String path = "input-power";
        return delete(path);
    }

    /* Access methods for container child: "laser-bias-current". */

    /**
     * Adds container entry "laserBiasCurrent", using an existing object.
     * @param laserBiasCurrent The object to add.
     * @return The added child.
     */
    public LaserBiasCurrent addLaserBiasCurrent(LaserBiasCurrent laserBiasCurrent)
            throws JNCException {
        this.laserBiasCurrent = laserBiasCurrent;
        insertChild(laserBiasCurrent, childrenNames());
        return laserBiasCurrent;
    }

    /**
     * Adds container entry "laserBiasCurrent".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public LaserBiasCurrent addLaserBiasCurrent() throws JNCException {
        LaserBiasCurrent laserBiasCurrent = new LaserBiasCurrent();
        this.laserBiasCurrent = laserBiasCurrent;
        insertChild(laserBiasCurrent, childrenNames());
        return laserBiasCurrent;
    }

    /**
     * Deletes container entry "laserBiasCurrent".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteLaserBiasCurrent() throws JNCException {
        this.laserBiasCurrent = null;
        String path = "laser-bias-current";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof OutputPower) outputPower = (OutputPower)child;
        else if (child instanceof InputPower) inputPower = (InputPower)child;
        else if (child instanceof LaserBiasCurrent) laserBiasCurrent = (LaserBiasCurrent)child;
    }

}

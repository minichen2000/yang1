/* 
 * @(#)Config.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-notificaions", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigNotificaions.alarmNotification.update.system.clock;

import com.nokia.eml.yang.openconfigSystem.OcSys;
import com.nokia.eml.yang.openconfigSystem.TimezoneNameType;
import com.nokia.eml.yang.openconfigYangTypes.DateAndTime;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/openconfig-notificaions
 * generated to "src/com/nokia/eml/yang/openconfigNotificaions/alarmNotification/update/system/clock/config"
 * <p>
 * See line 155 in
 * /root/nokia-yang/system/openconfig-system.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class Config extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Config object.
     */
    public Config() {
        super(OcSys.NAMESPACE, "config");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Config clone() {
        return (Config)cloneContent(new Config());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Config cloneShallow() {
        return (Config)cloneShallowContent(new Config());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "timezone-name",
            "time",
        };
    }

    /* Access methods for optional leaf child: "timezone-name". */

    /**
     * Gets the value for child leaf "timezone-name".
     * @return The value of the leaf.
     */
    public TimezoneNameType getTimezoneNameValue() throws JNCException {
        return (TimezoneNameType)getValue("timezone-name");
    }

    /**
     * Sets the value for child leaf "timezone-name",
     * using a JNC type value.
     * @param timezoneNameValue The value to set.
     * @param timezoneNameValue used during instantiation.
     */
    public void setTimezoneNameValue(TimezoneNameType timezoneNameValue)
            throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "timezone-name",
            timezoneNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "timezone-name",
     * using a String value.
     * @param timezoneNameValue used during instantiation.
     */
    public void setTimezoneNameValue(String timezoneNameValue)
            throws JNCException {
        setTimezoneNameValue(new TimezoneNameType(timezoneNameValue));
    }

    /**
     * Unsets the value for child leaf "timezone-name".
     */
    public void unsetTimezoneNameValue() throws JNCException {
        delete("timezone-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "timezone-name" leaf will not have a value.
     */
    public void addTimezoneName() throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "timezone-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "timezone-name" with operation "replace".
     */
    public void markTimezoneNameReplace() throws JNCException {
        markLeafReplace("timezoneName");
    }

    /**
     * Marks the leaf "timezone-name" with operation "merge".
     */
    public void markTimezoneNameMerge() throws JNCException {
        markLeafMerge("timezoneName");
    }

    /**
     * Marks the leaf "timezone-name" with operation "create".
     */
    public void markTimezoneNameCreate() throws JNCException {
        markLeafCreate("timezoneName");
    }

    /**
     * Marks the leaf "timezone-name" with operation "delete".
     */
    public void markTimezoneNameDelete() throws JNCException {
        markLeafDelete("timezoneName");
    }

    /* Access methods for optional leaf child: "time". */

    /**
     * Gets the value for child leaf "time".
     * @return The value of the leaf.
     */
    public DateAndTime getTimeValue() throws JNCException {
        return (DateAndTime)getValue("time");
    }

    /**
     * Sets the value for child leaf "time",
     * using a JNC type value.
     * @param timeValue The value to set.
     * @param timeValue used during instantiation.
     */
    public void setTimeValue(DateAndTime timeValue) throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "time",
            timeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "time",
     * using a String value.
     * @param timeValue used during instantiation.
     */
    public void setTimeValue(String timeValue) throws JNCException {
        setTimeValue(new DateAndTime(timeValue));
    }

    /**
     * Unsets the value for child leaf "time".
     */
    public void unsetTimeValue() throws JNCException {
        delete("time");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "time" leaf will not have a value.
     */
    public void addTime() throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "time",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "time" with operation "replace".
     */
    public void markTimeReplace() throws JNCException {
        markLeafReplace("time");
    }

    /**
     * Marks the leaf "time" with operation "merge".
     */
    public void markTimeMerge() throws JNCException {
        markLeafMerge("time");
    }

    /**
     * Marks the leaf "time" with operation "create".
     */
    public void markTimeCreate() throws JNCException {
        markLeafCreate("time");
    }

    /**
     * Marks the leaf "time" with operation "delete".
     */
    public void markTimeDelete() throws JNCException {
        markLeafDelete("time");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

/* 
 * @(#)State.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-notificaions", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigNotificaions.terminalDeviceNotification.update.terminalDevice.operationalModes.mode;

import com.nokia.eml.yang.openconfigTerminalDevice.OcOptTerm;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/openconfig-notificaions
 * generated to "src/com/nokia/eml/yang/openconfigNotificaions/terminalDeviceNotification/update/terminalDevice/operationalModes/mode/state"
 * <p>
 * See line 1061 in
 * /root/nokia-yang/optical-transport/openconfig-terminal-device.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class State extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty State object.
     */
    public State() {
        super(OcOptTerm.NAMESPACE, "state");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public State clone() {
        return (State)cloneContent(new State());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public State cloneShallow() {
        return (State)cloneShallowContent(new State());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "mode-id",
            "description",
            "vendor-id",
        };
    }

    /* Access methods for optional leaf child: "mode-id". */

    /**
     * Gets the value for child leaf "mode-id".
     * @return The value of the leaf.
     */
    public YangUInt16 getModeIdValue() throws JNCException {
        return (YangUInt16)getValue("mode-id");
    }

    /**
     * Sets the value for child leaf "mode-id",
     * using instance of generated typedef class.
     * @param modeIdValue The value to set.
     * @param modeIdValue used during instantiation.
     */
    public void setModeIdValue(YangUInt16 modeIdValue) throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "mode-id",
            modeIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "mode-id",
     * using Java primitive values.
     * @param modeIdValue used during instantiation.
     */
    public void setModeIdValue(int modeIdValue) throws JNCException {
        setModeIdValue(new YangUInt16(modeIdValue));
    }

    /**
     * Sets the value for child leaf "mode-id",
     * using a String value.
     * @param modeIdValue used during instantiation.
     */
    public void setModeIdValue(String modeIdValue) throws JNCException {
        setModeIdValue(new YangUInt16(modeIdValue));
    }

    /**
     * Unsets the value for child leaf "mode-id".
     */
    public void unsetModeIdValue() throws JNCException {
        delete("mode-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "mode-id" leaf will not have a value.
     */
    public void addModeId() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "mode-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "mode-id" with operation "replace".
     */
    public void markModeIdReplace() throws JNCException {
        markLeafReplace("modeId");
    }

    /**
     * Marks the leaf "mode-id" with operation "merge".
     */
    public void markModeIdMerge() throws JNCException {
        markLeafMerge("modeId");
    }

    /**
     * Marks the leaf "mode-id" with operation "create".
     */
    public void markModeIdCreate() throws JNCException {
        markLeafCreate("modeId");
    }

    /**
     * Marks the leaf "mode-id" with operation "delete".
     */
    public void markModeIdDelete() throws JNCException {
        markLeafDelete("modeId");
    }

    /* Access methods for optional leaf child: "description". */

    /**
     * Gets the value for child leaf "description".
     * @return The value of the leaf.
     */
    public YangString getDescriptionValue() throws JNCException {
        return (YangString)getValue("description");
    }

    /**
     * Sets the value for child leaf "description",
     * using instance of generated typedef class.
     * @param descriptionValue The value to set.
     * @param descriptionValue used during instantiation.
     */
    public void setDescriptionValue(YangString descriptionValue)
            throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "description",
            descriptionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "description",
     * using a String value.
     * @param descriptionValue used during instantiation.
     */
    public void setDescriptionValue(String descriptionValue)
            throws JNCException {
        setDescriptionValue(new YangString(descriptionValue));
    }

    /**
     * Unsets the value for child leaf "description".
     */
    public void unsetDescriptionValue() throws JNCException {
        delete("description");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "description" leaf will not have a value.
     */
    public void addDescription() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "description",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "description" with operation "replace".
     */
    public void markDescriptionReplace() throws JNCException {
        markLeafReplace("description");
    }

    /**
     * Marks the leaf "description" with operation "merge".
     */
    public void markDescriptionMerge() throws JNCException {
        markLeafMerge("description");
    }

    /**
     * Marks the leaf "description" with operation "create".
     */
    public void markDescriptionCreate() throws JNCException {
        markLeafCreate("description");
    }

    /**
     * Marks the leaf "description" with operation "delete".
     */
    public void markDescriptionDelete() throws JNCException {
        markLeafDelete("description");
    }

    /* Access methods for optional leaf child: "vendor-id". */

    /**
     * Gets the value for child leaf "vendor-id".
     * @return The value of the leaf.
     */
    public YangString getVendorIdValue() throws JNCException {
        return (YangString)getValue("vendor-id");
    }

    /**
     * Sets the value for child leaf "vendor-id",
     * using instance of generated typedef class.
     * @param vendorIdValue The value to set.
     * @param vendorIdValue used during instantiation.
     */
    public void setVendorIdValue(YangString vendorIdValue) throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "vendor-id",
            vendorIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "vendor-id",
     * using a String value.
     * @param vendorIdValue used during instantiation.
     */
    public void setVendorIdValue(String vendorIdValue) throws JNCException {
        setVendorIdValue(new YangString(vendorIdValue));
    }

    /**
     * Unsets the value for child leaf "vendor-id".
     */
    public void unsetVendorIdValue() throws JNCException {
        delete("vendor-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "vendor-id" leaf will not have a value.
     */
    public void addVendorId() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "vendor-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "vendor-id" with operation "replace".
     */
    public void markVendorIdReplace() throws JNCException {
        markLeafReplace("vendorId");
    }

    /**
     * Marks the leaf "vendor-id" with operation "merge".
     */
    public void markVendorIdMerge() throws JNCException {
        markLeafMerge("vendorId");
    }

    /**
     * Marks the leaf "vendor-id" with operation "create".
     */
    public void markVendorIdCreate() throws JNCException {
        markLeafCreate("vendorId");
    }

    /**
     * Marks the leaf "vendor-id" with operation "delete".
     */
    public void markVendorIdDelete() throws JNCException {
        markLeafDelete("vendorId");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

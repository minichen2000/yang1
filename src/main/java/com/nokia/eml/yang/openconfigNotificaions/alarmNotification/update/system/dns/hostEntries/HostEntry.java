/* 
 * @(#)HostEntry.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-notificaions", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigNotificaions.alarmNotification.update.system.dns.hostEntries;

import com.nokia.eml.yang.openconfigNotificaions.alarmNotification.update.system.dns.hostEntries.hostEntry.Config;
import com.nokia.eml.yang.openconfigNotificaions.alarmNotification.update.system.dns.hostEntries.hostEntry.State;
import com.nokia.eml.yang.openconfigSystem.OcSys;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/openconfig-notificaions
 * generated to "src/com/nokia/eml/yang/openconfigNotificaions/alarmNotification/update/system/dns/hostEntries/host-entry"
 * <p>
 * See line 319 in
 * /root/nokia-yang/system/openconfig-system.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class HostEntry extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "config".
     */
    public Config config = null;

    /**
     * Field for child container "state".
     */
    public State state = null;

    /**
     * Constructor for an empty HostEntry object.
     */
    public HostEntry() {
        super(OcSys.NAMESPACE, "host-entry");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public HostEntry clone() {
        return (HostEntry)cloneContent(new HostEntry());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public HostEntry cloneShallow() {
        return (HostEntry)cloneShallowContent(new HostEntry());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "hostname",
            "config",
            "state",
        };
    }

    /* Access methods for leaf child: "hostname". */

    /**
     * Gets the value for child leaf "hostname".
     * @return The value of the leaf.
     */
    public YangString getHostnameValue() throws JNCException {
        return (YangString)getValue("hostname");
    }

    /**
     * Sets the value for child leaf "hostname",
     * using instance of generated typedef class.
     * @param hostnameValue The value to set.
     * @param hostnameValue used during instantiation.
     */
    public void setHostnameValue(YangString hostnameValue) throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "hostname",
            hostnameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "hostname",
     * using a String value.
     * @param hostnameValue used during instantiation.
     */
    public void setHostnameValue(String hostnameValue) throws JNCException {
        setHostnameValue(new YangString(hostnameValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "hostname" leaf will not have a value.
     */
    public void addHostname() throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "hostname",
            null,
            childrenNames());
    }

    /* Access methods for container child: "config". */

    /**
     * Adds container entry "config", using an existing object.
     * @param config The object to add.
     * @return The added child.
     */
    public Config addConfig(Config config) throws JNCException {
        this.config = config;
        insertChild(config, childrenNames());
        return config;
    }

    /**
     * Adds container entry "config".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Config addConfig() throws JNCException {
        Config config = new Config();
        this.config = config;
        insertChild(config, childrenNames());
        return config;
    }

    /**
     * Deletes container entry "config".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteConfig() throws JNCException {
        this.config = null;
        String path = "config";
        return delete(path);
    }

    /* Access methods for container child: "state". */

    /**
     * Adds container entry "state", using an existing object.
     * @param state The object to add.
     * @return The added child.
     */
    public State addState(State state) throws JNCException {
        this.state = state;
        insertChild(state, childrenNames());
        return state;
    }

    /**
     * Adds container entry "state".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public State addState() throws JNCException {
        State state = new State();
        this.state = state;
        insertChild(state, childrenNames());
        return state;
    }

    /**
     * Deletes container entry "state".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteState() throws JNCException {
        this.state = null;
        String path = "state";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Config) config = (Config)child;
        else if (child instanceof State) state = (State)child;
    }

}

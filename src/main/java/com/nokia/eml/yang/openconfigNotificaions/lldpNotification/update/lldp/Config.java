/* 
 * @(#)Config.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-notificaions", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigNotificaions.lldpNotification.update.lldp;

import com.nokia.eml.yang.openconfigLldp.OcLldp;
import com.nokia.eml.yang.openconfigLldpTypes.ChassisIdType;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementLeafListValueIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangIdentityref;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUInt64;

import java.math.BigInteger;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/openconfig-notificaions
 * generated to "src/com/nokia/eml/yang/openconfigNotificaions/lldpNotification/update/lldp/config"
 * <p>
 * See line 605 in
 * /root/nokia-yang/lldp/openconfig-lldp.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class Config extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Config object.
     */
    public Config() {
        super(OcLldp.NAMESPACE, "config");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Config clone() {
        return (Config)cloneContent(new Config());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Config cloneShallow() {
        return (Config)cloneShallowContent(new Config());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "enabled",
            "hello-timer",
            "suppress-tlv-advertisement",
            "system-name",
            "system-description",
            "chassis-id",
            "chassis-id-type",
        };
    }

    /* Access methods for optional leaf child: "enabled". */

    /**
     * Gets the value for child leaf "enabled".
     * @return The value of the leaf.
     */
    public YangBoolean getEnabledValue() throws JNCException {
        YangBoolean enabled = (YangBoolean)getValue("enabled");
        if (enabled == null) {
            enabled = new YangBoolean("true");  // default
        }
        return enabled;
    }

    /**
     * Sets the value for child leaf "enabled",
     * using instance of generated typedef class.
     * @param enabledValue The value to set.
     * @param enabledValue used during instantiation.
     */
    public void setEnabledValue(YangBoolean enabledValue) throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "enabled",
            enabledValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enabled",
     * using Java primitive values.
     * @param enabledValue used during instantiation.
     */
    public void setEnabledValue(Boolean enabledValue) throws JNCException {
        setEnabledValue(new YangBoolean(enabledValue));
    }

    /**
     * Sets the value for child leaf "enabled",
     * using a String value.
     * @param enabledValue used during instantiation.
     */
    public void setEnabledValue(String enabledValue) throws JNCException {
        setEnabledValue(new YangBoolean(enabledValue));
    }

    /**
     * Unsets the value for child leaf "enabled".
     */
    public void unsetEnabledValue() throws JNCException {
        delete("enabled");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enabled" leaf will not have a value.
     */
    public void addEnabled() throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "enabled",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enabled" with operation "replace".
     */
    public void markEnabledReplace() throws JNCException {
        markLeafReplace("enabled");
    }

    /**
     * Marks the leaf "enabled" with operation "merge".
     */
    public void markEnabledMerge() throws JNCException {
        markLeafMerge("enabled");
    }

    /**
     * Marks the leaf "enabled" with operation "create".
     */
    public void markEnabledCreate() throws JNCException {
        markLeafCreate("enabled");
    }

    /**
     * Marks the leaf "enabled" with operation "delete".
     */
    public void markEnabledDelete() throws JNCException {
        markLeafDelete("enabled");
    }

    /* Access methods for optional leaf child: "hello-timer". */

    /**
     * Gets the value for child leaf "hello-timer".
     * @return The value of the leaf.
     */
    public YangUInt64 getHelloTimerValue() throws JNCException {
        return (YangUInt64)getValue("hello-timer");
    }

    /**
     * Sets the value for child leaf "hello-timer",
     * using instance of generated typedef class.
     * @param helloTimerValue The value to set.
     * @param helloTimerValue used during instantiation.
     */
    public void setHelloTimerValue(YangUInt64 helloTimerValue)
            throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "hello-timer",
            helloTimerValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "hello-timer",
     * using Java primitive values.
     * @param helloTimerValue used during instantiation.
     */
    public void setHelloTimerValue(BigInteger helloTimerValue)
            throws JNCException {
        setHelloTimerValue(new YangUInt64(helloTimerValue));
    }

    /**
     * Sets the value for child leaf "hello-timer",
     * using a String value.
     * @param helloTimerValue used during instantiation.
     */
    public void setHelloTimerValue(String helloTimerValue) throws JNCException {
        setHelloTimerValue(new YangUInt64(helloTimerValue));
    }

    /**
     * Unsets the value for child leaf "hello-timer".
     */
    public void unsetHelloTimerValue() throws JNCException {
        delete("hello-timer");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "hello-timer" leaf will not have a value.
     */
    public void addHelloTimer() throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "hello-timer",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "hello-timer" with operation "replace".
     */
    public void markHelloTimerReplace() throws JNCException {
        markLeafReplace("helloTimer");
    }

    /**
     * Marks the leaf "hello-timer" with operation "merge".
     */
    public void markHelloTimerMerge() throws JNCException {
        markLeafMerge("helloTimer");
    }

    /**
     * Marks the leaf "hello-timer" with operation "create".
     */
    public void markHelloTimerCreate() throws JNCException {
        markLeafCreate("helloTimer");
    }

    /**
     * Marks the leaf "hello-timer" with operation "delete".
     */
    public void markHelloTimerDelete() throws JNCException {
        markLeafDelete("helloTimer");
    }

    /* Access methods for optional leaf-list child: "suppress-tlv-advertisement". */

    /**
     * Iterator method for the leaf-list "suppress-tlv-advertisement".
     * @return An iterator for the leaf-list.
     */
    public ElementLeafListValueIterator suppressTlvAdvertisementIterator() {
        return new ElementLeafListValueIterator(children, "suppress-tlv-advertisement");
    }

    /**
     * Sets the value for child leaf-list "suppress-tlv-advertisement",
     * using instance of generated typedef class.
     * @param suppressTlvAdvertisementValue The value to set.
     * @param suppressTlvAdvertisementValue used during instantiation.
     */
    public void setSuppressTlvAdvertisementValue(YangIdentityref suppressTlvAdvertisementValue)
            throws JNCException {
        setLeafListValue(OcLldp.NAMESPACE,
            "suppress-tlv-advertisement",
            suppressTlvAdvertisementValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf-list "suppress-tlv-advertisement",
     * using a String value.
     * @param suppressTlvAdvertisementValue used during instantiation.
     */
    public void setSuppressTlvAdvertisementValue(String suppressTlvAdvertisementValue)
            throws JNCException {
        setSuppressTlvAdvertisementValue(new YangIdentityref(suppressTlvAdvertisementValue));
    }

    /**
     * Deletes leaf-list entry "suppressTlvAdvertisement".
     * @param suppressTlvAdvertisementValue Value to delete.
     */
    public void deleteSuppressTlvAdvertisement(YangIdentityref suppressTlvAdvertisementValue)
            throws JNCException {
        String path = "suppressTlvAdvertisement[suppressTlvAdvertisementValue]";
        delete(path);
    }

    /**
     * Deletes leaf-list entry "suppressTlvAdvertisement".
     * The value is specified as a string.
     * @param suppressTlvAdvertisementValue Value to delete.
     */
    public void deleteSuppressTlvAdvertisement(String suppressTlvAdvertisementValue)
            throws JNCException {
        String path = "suppressTlvAdvertisement[suppressTlvAdvertisementValue]";
        delete(path);
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "suppress-tlv-advertisement" leaf-list will not have a value.
     */
    public void addSuppressTlvAdvertisement() throws JNCException {
        setLeafListValue(OcLldp.NAMESPACE,
            "suppress-tlv-advertisement",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf-list "suppress-tlv-advertisement" with operation "replace".
     * @param suppressTlvAdvertisementValue The value to mark
     */
    public void markSuppressTlvAdvertisementReplace(YangIdentityref suppressTlvAdvertisementValue)
            throws JNCException {
        markLeafReplace("suppressTlvAdvertisement[name='" + suppressTlvAdvertisementValue + "']");
    }

    /**
     * Marks the leaf-list "suppress-tlv-advertisement" with operation "merge".
     * @param suppressTlvAdvertisementValue The value to mark
     */
    public void markSuppressTlvAdvertisementMerge(YangIdentityref suppressTlvAdvertisementValue)
            throws JNCException {
        markLeafMerge("suppressTlvAdvertisement[name='" + suppressTlvAdvertisementValue + "']");
    }

    /**
     * Marks the leaf-list "suppress-tlv-advertisement" with operation "create".
     * @param suppressTlvAdvertisementValue The value to mark
     */
    public void markSuppressTlvAdvertisementCreate(YangIdentityref suppressTlvAdvertisementValue)
            throws JNCException {
        markLeafCreate("suppressTlvAdvertisement[name='" + suppressTlvAdvertisementValue + "']");
    }

    /**
     * Marks the leaf-list "suppress-tlv-advertisement" with operation "delete".
     * @param suppressTlvAdvertisementValue The value to mark
     */
    public void markSuppressTlvAdvertisementDelete(YangIdentityref suppressTlvAdvertisementValue)
            throws JNCException {
        markLeafDelete("suppressTlvAdvertisement[name='" + suppressTlvAdvertisementValue + "']");
    }

    /* Access methods for optional leaf child: "system-name". */

    /**
     * Gets the value for child leaf "system-name".
     * @return The value of the leaf.
     */
    public YangString getSystemNameValue() throws JNCException {
        return (YangString)getValue("system-name");
    }

    /**
     * Sets the value for child leaf "system-name",
     * using instance of generated typedef class.
     * @param systemNameValue The value to set.
     * @param systemNameValue used during instantiation.
     */
    public void setSystemNameValue(YangString systemNameValue)
            throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "system-name",
            systemNameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "system-name",
     * using a String value.
     * @param systemNameValue used during instantiation.
     */
    public void setSystemNameValue(String systemNameValue) throws JNCException {
        setSystemNameValue(new YangString(systemNameValue));
    }

    /**
     * Unsets the value for child leaf "system-name".
     */
    public void unsetSystemNameValue() throws JNCException {
        delete("system-name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "system-name" leaf will not have a value.
     */
    public void addSystemName() throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "system-name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "system-name" with operation "replace".
     */
    public void markSystemNameReplace() throws JNCException {
        markLeafReplace("systemName");
    }

    /**
     * Marks the leaf "system-name" with operation "merge".
     */
    public void markSystemNameMerge() throws JNCException {
        markLeafMerge("systemName");
    }

    /**
     * Marks the leaf "system-name" with operation "create".
     */
    public void markSystemNameCreate() throws JNCException {
        markLeafCreate("systemName");
    }

    /**
     * Marks the leaf "system-name" with operation "delete".
     */
    public void markSystemNameDelete() throws JNCException {
        markLeafDelete("systemName");
    }

    /* Access methods for optional leaf child: "system-description". */

    /**
     * Gets the value for child leaf "system-description".
     * @return The value of the leaf.
     */
    public YangString getSystemDescriptionValue() throws JNCException {
        return (YangString)getValue("system-description");
    }

    /**
     * Sets the value for child leaf "system-description",
     * using instance of generated typedef class.
     * @param systemDescriptionValue The value to set.
     * @param systemDescriptionValue used during instantiation.
     */
    public void setSystemDescriptionValue(YangString systemDescriptionValue)
            throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "system-description",
            systemDescriptionValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "system-description",
     * using a String value.
     * @param systemDescriptionValue used during instantiation.
     */
    public void setSystemDescriptionValue(String systemDescriptionValue)
            throws JNCException {
        setSystemDescriptionValue(new YangString(systemDescriptionValue));
    }

    /**
     * Unsets the value for child leaf "system-description".
     */
    public void unsetSystemDescriptionValue() throws JNCException {
        delete("system-description");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "system-description" leaf will not have a value.
     */
    public void addSystemDescription() throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "system-description",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "system-description" with operation "replace".
     */
    public void markSystemDescriptionReplace() throws JNCException {
        markLeafReplace("systemDescription");
    }

    /**
     * Marks the leaf "system-description" with operation "merge".
     */
    public void markSystemDescriptionMerge() throws JNCException {
        markLeafMerge("systemDescription");
    }

    /**
     * Marks the leaf "system-description" with operation "create".
     */
    public void markSystemDescriptionCreate() throws JNCException {
        markLeafCreate("systemDescription");
    }

    /**
     * Marks the leaf "system-description" with operation "delete".
     */
    public void markSystemDescriptionDelete() throws JNCException {
        markLeafDelete("systemDescription");
    }

    /* Access methods for optional leaf child: "chassis-id". */

    /**
     * Gets the value for child leaf "chassis-id".
     * @return The value of the leaf.
     */
    public YangString getChassisIdValue() throws JNCException {
        return (YangString)getValue("chassis-id");
    }

    /**
     * Sets the value for child leaf "chassis-id",
     * using instance of generated typedef class.
     * @param chassisIdValue The value to set.
     * @param chassisIdValue used during instantiation.
     */
    public void setChassisIdValue(YangString chassisIdValue)
            throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "chassis-id",
            chassisIdValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "chassis-id",
     * using a String value.
     * @param chassisIdValue used during instantiation.
     */
    public void setChassisIdValue(String chassisIdValue) throws JNCException {
        setChassisIdValue(new YangString(chassisIdValue));
    }

    /**
     * Unsets the value for child leaf "chassis-id".
     */
    public void unsetChassisIdValue() throws JNCException {
        delete("chassis-id");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "chassis-id" leaf will not have a value.
     */
    public void addChassisId() throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "chassis-id",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "chassis-id" with operation "replace".
     */
    public void markChassisIdReplace() throws JNCException {
        markLeafReplace("chassisId");
    }

    /**
     * Marks the leaf "chassis-id" with operation "merge".
     */
    public void markChassisIdMerge() throws JNCException {
        markLeafMerge("chassisId");
    }

    /**
     * Marks the leaf "chassis-id" with operation "create".
     */
    public void markChassisIdCreate() throws JNCException {
        markLeafCreate("chassisId");
    }

    /**
     * Marks the leaf "chassis-id" with operation "delete".
     */
    public void markChassisIdDelete() throws JNCException {
        markLeafDelete("chassisId");
    }

    /* Access methods for optional leaf child: "chassis-id-type". */

    /**
     * Gets the value for child leaf "chassis-id-type".
     * @return The value of the leaf.
     */
    public ChassisIdType getChassisIdTypeValue() throws JNCException {
        return (ChassisIdType)getValue("chassis-id-type");
    }

    /**
     * Sets the value for child leaf "chassis-id-type",
     * using a JNC type value.
     * @param chassisIdTypeValue The value to set.
     * @param chassisIdTypeValue used during instantiation.
     */
    public void setChassisIdTypeValue(ChassisIdType chassisIdTypeValue)
            throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "chassis-id-type",
            chassisIdTypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "chassis-id-type",
     * using a String value.
     * @param chassisIdTypeValue used during instantiation.
     */
    public void setChassisIdTypeValue(String chassisIdTypeValue)
            throws JNCException {
        setChassisIdTypeValue(new ChassisIdType(chassisIdTypeValue));
    }

    /**
     * Unsets the value for child leaf "chassis-id-type".
     */
    public void unsetChassisIdTypeValue() throws JNCException {
        delete("chassis-id-type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "chassis-id-type" leaf will not have a value.
     */
    public void addChassisIdType() throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "chassis-id-type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "chassis-id-type" with operation "replace".
     */
    public void markChassisIdTypeReplace() throws JNCException {
        markLeafReplace("chassisIdType");
    }

    /**
     * Marks the leaf "chassis-id-type" with operation "merge".
     */
    public void markChassisIdTypeMerge() throws JNCException {
        markLeafMerge("chassisIdType");
    }

    /**
     * Marks the leaf "chassis-id-type" with operation "create".
     */
    public void markChassisIdTypeCreate() throws JNCException {
        markLeafCreate("chassisIdType");
    }

    /**
     * Marks the leaf "chassis-id-type" with operation "delete".
     */
    public void markChassisIdTypeDelete() throws JNCException {
        markLeafDelete("chassisIdType");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

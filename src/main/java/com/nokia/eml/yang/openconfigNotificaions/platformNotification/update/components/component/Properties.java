/* 
 * @(#)Properties.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-notificaions", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigNotificaions.platformNotification.update.components.component;

import com.nokia.eml.yang.openconfigNotificaions.platformNotification.update.components.component.properties.Property;
import com.nokia.eml.yang.openconfigPlatform.OcPlatform;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/openconfig-notificaions
 * generated to "src/com/nokia/eml/yang/openconfigNotificaions/platformNotification/update/components/component/properties"
 * <p>
 * See line 154 in
 * /root/nokia-yang/platform/openconfig-platform.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class Properties extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Properties object.
     */
    public Properties() {
        super(OcPlatform.NAMESPACE, "properties");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Properties clone() {
        return (Properties)cloneContent(new Properties());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Properties cloneShallow() {
        return (Properties)cloneShallowContent(new Properties());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "property",
        };
    }

    /* Access methods for list child: "property". */

    /**
     * Gets list entry "property", with specified keys.
     */
    public Property getProperty() throws JNCException {
        String path = "property";
        return (Property)searchOne(path);
    }

    /**
     * Iterator method for the list "property".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator propertyIterator() {
        return new ElementChildrenIterator(children, "property");
    }

    /**
     * Adds list entry "property", using an existing object.
     * @param property The object to add.
     * @return The added child.
     */
    public Property addProperty(Property property) throws JNCException {
        insertChild(property, childrenNames());
        return property;
    }

    /**
     * Adds list entry "property".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Property addProperty() throws JNCException {
        Property property = new Property();
        insertChild(property, childrenNames());
        return property;
    }

    /**
     * Deletes list entry "property", with specified keys.
     */
    public void deleteProperty() throws JNCException {
        String path = "property";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

/* 
 * @(#)State.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-notificaions", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigNotificaions.platformNotification.update.components.component.properties.property;

import com.nokia.eml.yang.openconfigPlatform.OcPlatform;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangString;
import com.tailf.jnc.YangUnion;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/openconfig-notificaions
 * generated to "src/com/nokia/eml/yang/openconfigNotificaions/platformNotification/update/components/component/properties/property/state"
 * <p>
 * See line 178 in
 * /root/nokia-yang/platform/openconfig-platform.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class State extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty State object.
     */
    public State() {
        super(OcPlatform.NAMESPACE, "state");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public State clone() {
        return (State)cloneContent(new State());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public State cloneShallow() {
        return (State)cloneShallowContent(new State());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "name",
            "value",
            "configurable",
        };
    }

    /* Access methods for optional leaf child: "name". */

    /**
     * Gets the value for child leaf "name".
     * @return The value of the leaf.
     */
    public YangString getNameValue() throws JNCException {
        return (YangString)getValue("name");
    }

    /**
     * Sets the value for child leaf "name",
     * using instance of generated typedef class.
     * @param nameValue The value to set.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(YangString nameValue) throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "name",
            nameValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "name",
     * using a String value.
     * @param nameValue used during instantiation.
     */
    public void setNameValue(String nameValue) throws JNCException {
        setNameValue(new YangString(nameValue));
    }

    /**
     * Unsets the value for child leaf "name".
     */
    public void unsetNameValue() throws JNCException {
        delete("name");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "name" leaf will not have a value.
     */
    public void addName() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "name",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "name" with operation "replace".
     */
    public void markNameReplace() throws JNCException {
        markLeafReplace("name");
    }

    /**
     * Marks the leaf "name" with operation "merge".
     */
    public void markNameMerge() throws JNCException {
        markLeafMerge("name");
    }

    /**
     * Marks the leaf "name" with operation "create".
     */
    public void markNameCreate() throws JNCException {
        markLeafCreate("name");
    }

    /**
     * Marks the leaf "name" with operation "delete".
     */
    public void markNameDelete() throws JNCException {
        markLeafDelete("name");
    }

    /* Access methods for optional leaf child: "value". */

    /**
     * Gets the value for child leaf "value".
     * @return The value of the leaf.
     */
    public YangUnion getValueValue() throws JNCException {
        return (YangUnion)getValue("value");
    }

    /**
     * Sets the value for child leaf "value",
     * using instance of generated typedef class.
     * @param valueValue The value to set.
     * @param valueValue used during instantiation.
     */
    public void setValueValue(YangUnion valueValue) throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "value",
            valueValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "value",
     * using a String value.
     * @param valueValue used during instantiation.
     */
    public void setValueValue(String valueValue) throws JNCException {
        setValueValue(new YangUnion(valueValue, new String[] {
             "com.tailf.jnc.YangString",
             "com.tailf.jnc.YangBoolean",
             "com.tailf.jnc.YangInt64",
             "com.tailf.jnc.YangUInt64",
             "com.tailf.jnc.YangDecimal64",
        }));
    }

    /**
     * Unsets the value for child leaf "value".
     */
    public void unsetValueValue() throws JNCException {
        delete("value");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "value" leaf will not have a value.
     */
    public void addValue() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "value",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "value" with operation "replace".
     */
    public void markValueReplace() throws JNCException {
        markLeafReplace("value");
    }

    /**
     * Marks the leaf "value" with operation "merge".
     */
    public void markValueMerge() throws JNCException {
        markLeafMerge("value");
    }

    /**
     * Marks the leaf "value" with operation "create".
     */
    public void markValueCreate() throws JNCException {
        markLeafCreate("value");
    }

    /**
     * Marks the leaf "value" with operation "delete".
     */
    public void markValueDelete() throws JNCException {
        markLeafDelete("value");
    }

    /* Access methods for optional leaf child: "configurable". */

    /**
     * Gets the value for child leaf "configurable".
     * @return The value of the leaf.
     */
    public YangBoolean getConfigurableValue() throws JNCException {
        return (YangBoolean)getValue("configurable");
    }

    /**
     * Sets the value for child leaf "configurable",
     * using instance of generated typedef class.
     * @param configurableValue The value to set.
     * @param configurableValue used during instantiation.
     */
    public void setConfigurableValue(YangBoolean configurableValue)
            throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "configurable",
            configurableValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "configurable",
     * using Java primitive values.
     * @param configurableValue used during instantiation.
     */
    public void setConfigurableValue(Boolean configurableValue)
            throws JNCException {
        setConfigurableValue(new YangBoolean(configurableValue));
    }

    /**
     * Sets the value for child leaf "configurable",
     * using a String value.
     * @param configurableValue used during instantiation.
     */
    public void setConfigurableValue(String configurableValue)
            throws JNCException {
        setConfigurableValue(new YangBoolean(configurableValue));
    }

    /**
     * Unsets the value for child leaf "configurable".
     */
    public void unsetConfigurableValue() throws JNCException {
        delete("configurable");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "configurable" leaf will not have a value.
     */
    public void addConfigurable() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "configurable",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "configurable" with operation "replace".
     */
    public void markConfigurableReplace() throws JNCException {
        markLeafReplace("configurable");
    }

    /**
     * Marks the leaf "configurable" with operation "merge".
     */
    public void markConfigurableMerge() throws JNCException {
        markLeafMerge("configurable");
    }

    /**
     * Marks the leaf "configurable" with operation "create".
     */
    public void markConfigurableCreate() throws JNCException {
        markLeafCreate("configurable");
    }

    /**
     * Marks the leaf "configurable" with operation "delete".
     */
    public void markConfigurableDelete() throws JNCException {
        markLeafDelete("configurable");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

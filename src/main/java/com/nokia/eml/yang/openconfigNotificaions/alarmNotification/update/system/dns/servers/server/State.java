/* 
 * @(#)State.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-notificaions", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigNotificaions.alarmNotification.update.system.dns.servers.server;

import com.nokia.eml.yang.openconfigInetTypes.IpAddress;
import com.nokia.eml.yang.openconfigInetTypes.PortNumber;
import com.nokia.eml.yang.openconfigSystem.OcSys;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/openconfig-notificaions
 * generated to "src/com/nokia/eml/yang/openconfigNotificaions/alarmNotification/update/system/dns/servers/server/state"
 * <p>
 * See line 401 in
 * /root/nokia-yang/system/openconfig-system.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class State extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty State object.
     */
    public State() {
        super(OcSys.NAMESPACE, "state");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public State clone() {
        return (State)cloneContent(new State());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public State cloneShallow() {
        return (State)cloneShallowContent(new State());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "address",
            "port",
        };
    }

    /* Access methods for optional leaf child: "address". */

    /**
     * Gets the value for child leaf "address".
     * @return The value of the leaf.
     */
    public IpAddress getAddressValue() throws JNCException {
        return (IpAddress)getValue("address");
    }

    /**
     * Sets the value for child leaf "address",
     * using a JNC type value.
     * @param addressValue The value to set.
     * @param addressValue used during instantiation.
     */
    public void setAddressValue(IpAddress addressValue) throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "address",
            addressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "address",
     * using a String value.
     * @param addressValue used during instantiation.
     */
    public void setAddressValue(String addressValue) throws JNCException {
        setAddressValue(new IpAddress(addressValue));
    }

    /**
     * Unsets the value for child leaf "address".
     */
    public void unsetAddressValue() throws JNCException {
        delete("address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "address" leaf will not have a value.
     */
    public void addAddress() throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "address" with operation "replace".
     */
    public void markAddressReplace() throws JNCException {
        markLeafReplace("address");
    }

    /**
     * Marks the leaf "address" with operation "merge".
     */
    public void markAddressMerge() throws JNCException {
        markLeafMerge("address");
    }

    /**
     * Marks the leaf "address" with operation "create".
     */
    public void markAddressCreate() throws JNCException {
        markLeafCreate("address");
    }

    /**
     * Marks the leaf "address" with operation "delete".
     */
    public void markAddressDelete() throws JNCException {
        markLeafDelete("address");
    }

    /* Access methods for optional leaf child: "port". */

    /**
     * Gets the value for child leaf "port".
     * @return The value of the leaf.
     */
    public PortNumber getPortValue() throws JNCException {
        PortNumber port = (PortNumber)getValue("port");
        if (port == null) {
            port = new PortNumber("53");  // default
        }
        return port;
    }

    /**
     * Sets the value for child leaf "port",
     * using a JNC type value.
     * @param portValue The value to set.
     * @param portValue used during instantiation.
     */
    public void setPortValue(PortNumber portValue) throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "port",
            portValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "port",
     * using Java primitive values.
     * @param portValue used during instantiation.
     */
    public void setPortValue(int portValue) throws JNCException {
        setPortValue(new PortNumber(portValue));
    }

    /**
     * Sets the value for child leaf "port",
     * using a String value.
     * @param portValue used during instantiation.
     */
    public void setPortValue(String portValue) throws JNCException {
        setPortValue(new PortNumber(portValue));
    }

    /**
     * Unsets the value for child leaf "port".
     */
    public void unsetPortValue() throws JNCException {
        delete("port");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "port" leaf will not have a value.
     */
    public void addPort() throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "port",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "port" with operation "replace".
     */
    public void markPortReplace() throws JNCException {
        markLeafReplace("port");
    }

    /**
     * Marks the leaf "port" with operation "merge".
     */
    public void markPortMerge() throws JNCException {
        markLeafMerge("port");
    }

    /**
     * Marks the leaf "port" with operation "create".
     */
    public void markPortCreate() throws JNCException {
        markLeafCreate("port");
    }

    /**
     * Marks the leaf "port" with operation "delete".
     */
    public void markPortDelete() throws JNCException {
        markLeafDelete("port");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

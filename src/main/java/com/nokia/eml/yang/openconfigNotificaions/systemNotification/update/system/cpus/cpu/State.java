/* 
 * @(#)State.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-notificaions", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigNotificaions.systemNotification.update.system.cpus.cpu;

import com.nokia.eml.yang.openconfigNotificaions.systemNotification.update.system.cpus.cpu.state.HardwareInterrupt;
import com.nokia.eml.yang.openconfigNotificaions.systemNotification.update.system.cpus.cpu.state.Idle;
import com.nokia.eml.yang.openconfigNotificaions.systemNotification.update.system.cpus.cpu.state.Kernel;
import com.nokia.eml.yang.openconfigNotificaions.systemNotification.update.system.cpus.cpu.state.Nice;
import com.nokia.eml.yang.openconfigNotificaions.systemNotification.update.system.cpus.cpu.state.SoftwareInterrupt;
import com.nokia.eml.yang.openconfigNotificaions.systemNotification.update.system.cpus.cpu.state.Total;
import com.nokia.eml.yang.openconfigNotificaions.systemNotification.update.system.cpus.cpu.state.User;
import com.nokia.eml.yang.openconfigNotificaions.systemNotification.update.system.cpus.cpu.state.Wait;
import com.nokia.eml.yang.openconfigSystem.OcSys;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/openconfig-notificaions
 * generated to "src/com/nokia/eml/yang/openconfigNotificaions/systemNotification/update/system/cpus/cpu/state"
 * <p>
 * See line 935 in
 * /root/nokia-yang/system/openconfig-system.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class State extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "total".
     */
    public Total total = null;

    /**
     * Field for child container "user".
     */
    public User user = null;

    /**
     * Field for child container "kernel".
     */
    public Kernel kernel = null;

    /**
     * Field for child container "nice".
     */
    public Nice nice = null;

    /**
     * Field for child container "idle".
     */
    public Idle idle = null;

    /**
     * Field for child container "wait".
     */
    public Wait wait = null;

    /**
     * Field for child container "hardware-interrupt".
     */
    public HardwareInterrupt hardwareInterrupt = null;

    /**
     * Field for child container "software-interrupt".
     */
    public SoftwareInterrupt softwareInterrupt = null;

    /**
     * Constructor for an empty State object.
     */
    public State() {
        super(OcSys.NAMESPACE, "state");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public State clone() {
        return (State)cloneContent(new State());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public State cloneShallow() {
        return (State)cloneShallowContent(new State());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "index",
            "total",
            "user",
            "kernel",
            "nice",
            "idle",
            "wait",
            "hardware-interrupt",
            "software-interrupt",
        };
    }

    /* Access methods for optional leaf child: "index". */

    /**
     * Gets the value for child leaf "index".
     * @return The value of the leaf.
     */
    public YangUInt32 getIndexValue() throws JNCException {
        return (YangUInt32)getValue("index");
    }

    /**
     * Sets the value for child leaf "index",
     * using instance of generated typedef class.
     * @param indexValue The value to set.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(YangUInt32 indexValue) throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "index",
            indexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "index",
     * using Java primitive values.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(long indexValue) throws JNCException {
        setIndexValue(new YangUInt32(indexValue));
    }

    /**
     * Sets the value for child leaf "index",
     * using a String value.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(String indexValue) throws JNCException {
        setIndexValue(new YangUInt32(indexValue));
    }

    /**
     * Unsets the value for child leaf "index".
     */
    public void unsetIndexValue() throws JNCException {
        delete("index");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "index" leaf will not have a value.
     */
    public void addIndex() throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "index",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "index" with operation "replace".
     */
    public void markIndexReplace() throws JNCException {
        markLeafReplace("index");
    }

    /**
     * Marks the leaf "index" with operation "merge".
     */
    public void markIndexMerge() throws JNCException {
        markLeafMerge("index");
    }

    /**
     * Marks the leaf "index" with operation "create".
     */
    public void markIndexCreate() throws JNCException {
        markLeafCreate("index");
    }

    /**
     * Marks the leaf "index" with operation "delete".
     */
    public void markIndexDelete() throws JNCException {
        markLeafDelete("index");
    }

    /* Access methods for container child: "total". */

    /**
     * Adds container entry "total", using an existing object.
     * @param total The object to add.
     * @return The added child.
     */
    public Total addTotal(Total total) throws JNCException {
        this.total = total;
        insertChild(total, childrenNames());
        return total;
    }

    /**
     * Adds container entry "total".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Total addTotal() throws JNCException {
        Total total = new Total();
        this.total = total;
        insertChild(total, childrenNames());
        return total;
    }

    /**
     * Deletes container entry "total".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteTotal() throws JNCException {
        this.total = null;
        String path = "total";
        return delete(path);
    }

    /* Access methods for container child: "user". */

    /**
     * Adds container entry "user", using an existing object.
     * @param user The object to add.
     * @return The added child.
     */
    public User addUser(User user) throws JNCException {
        this.user = user;
        insertChild(user, childrenNames());
        return user;
    }

    /**
     * Adds container entry "user".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public User addUser() throws JNCException {
        User user = new User();
        this.user = user;
        insertChild(user, childrenNames());
        return user;
    }

    /**
     * Deletes container entry "user".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteUser() throws JNCException {
        this.user = null;
        String path = "user";
        return delete(path);
    }

    /* Access methods for container child: "kernel". */

    /**
     * Adds container entry "kernel", using an existing object.
     * @param kernel The object to add.
     * @return The added child.
     */
    public Kernel addKernel(Kernel kernel) throws JNCException {
        this.kernel = kernel;
        insertChild(kernel, childrenNames());
        return kernel;
    }

    /**
     * Adds container entry "kernel".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Kernel addKernel() throws JNCException {
        Kernel kernel = new Kernel();
        this.kernel = kernel;
        insertChild(kernel, childrenNames());
        return kernel;
    }

    /**
     * Deletes container entry "kernel".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteKernel() throws JNCException {
        this.kernel = null;
        String path = "kernel";
        return delete(path);
    }

    /* Access methods for container child: "nice". */

    /**
     * Adds container entry "nice", using an existing object.
     * @param nice The object to add.
     * @return The added child.
     */
    public Nice addNice(Nice nice) throws JNCException {
        this.nice = nice;
        insertChild(nice, childrenNames());
        return nice;
    }

    /**
     * Adds container entry "nice".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Nice addNice() throws JNCException {
        Nice nice = new Nice();
        this.nice = nice;
        insertChild(nice, childrenNames());
        return nice;
    }

    /**
     * Deletes container entry "nice".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteNice() throws JNCException {
        this.nice = null;
        String path = "nice";
        return delete(path);
    }

    /* Access methods for container child: "idle". */

    /**
     * Adds container entry "idle", using an existing object.
     * @param idle The object to add.
     * @return The added child.
     */
    public Idle addIdle(Idle idle) throws JNCException {
        this.idle = idle;
        insertChild(idle, childrenNames());
        return idle;
    }

    /**
     * Adds container entry "idle".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Idle addIdle() throws JNCException {
        Idle idle = new Idle();
        this.idle = idle;
        insertChild(idle, childrenNames());
        return idle;
    }

    /**
     * Deletes container entry "idle".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteIdle() throws JNCException {
        this.idle = null;
        String path = "idle";
        return delete(path);
    }

    /* Access methods for container child: "wait". */

    /**
     * Adds container entry "wait", using an existing object.
     * @param wait The object to add.
     * @return The added child.
     */
    public Wait addWait(Wait wait) throws JNCException {
        this.wait = wait;
        insertChild(wait, childrenNames());
        return wait;
    }

    /**
     * Adds container entry "wait".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Wait addWait() throws JNCException {
        Wait wait = new Wait();
        this.wait = wait;
        insertChild(wait, childrenNames());
        return wait;
    }

    /**
     * Deletes container entry "wait".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteWait() throws JNCException {
        this.wait = null;
        String path = "wait";
        return delete(path);
    }

    /* Access methods for container child: "hardware-interrupt". */

    /**
     * Adds container entry "hardwareInterrupt", using an existing object.
     * @param hardwareInterrupt The object to add.
     * @return The added child.
     */
    public HardwareInterrupt addHardwareInterrupt(HardwareInterrupt hardwareInterrupt)
            throws JNCException {
        this.hardwareInterrupt = hardwareInterrupt;
        insertChild(hardwareInterrupt, childrenNames());
        return hardwareInterrupt;
    }

    /**
     * Adds container entry "hardwareInterrupt".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public HardwareInterrupt addHardwareInterrupt() throws JNCException {
        HardwareInterrupt hardwareInterrupt = new HardwareInterrupt();
        this.hardwareInterrupt = hardwareInterrupt;
        insertChild(hardwareInterrupt, childrenNames());
        return hardwareInterrupt;
    }

    /**
     * Deletes container entry "hardwareInterrupt".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteHardwareInterrupt() throws JNCException {
        this.hardwareInterrupt = null;
        String path = "hardware-interrupt";
        return delete(path);
    }

    /* Access methods for container child: "software-interrupt". */

    /**
     * Adds container entry "softwareInterrupt", using an existing object.
     * @param softwareInterrupt The object to add.
     * @return The added child.
     */
    public SoftwareInterrupt addSoftwareInterrupt(SoftwareInterrupt softwareInterrupt)
            throws JNCException {
        this.softwareInterrupt = softwareInterrupt;
        insertChild(softwareInterrupt, childrenNames());
        return softwareInterrupt;
    }

    /**
     * Adds container entry "softwareInterrupt".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SoftwareInterrupt addSoftwareInterrupt() throws JNCException {
        SoftwareInterrupt softwareInterrupt = new SoftwareInterrupt();
        this.softwareInterrupt = softwareInterrupt;
        insertChild(softwareInterrupt, childrenNames());
        return softwareInterrupt;
    }

    /**
     * Deletes container entry "softwareInterrupt".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSoftwareInterrupt() throws JNCException {
        this.softwareInterrupt = null;
        String path = "software-interrupt";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Total) total = (Total)child;
        else if (child instanceof User) user = (User)child;
        else if (child instanceof Kernel) kernel = (Kernel)child;
        else if (child instanceof Nice) nice = (Nice)child;
        else if (child instanceof Idle) idle = (Idle)child;
        else if (child instanceof Wait) wait = (Wait)child;
        else if (child instanceof HardwareInterrupt) hardwareInterrupt = (HardwareInterrupt)child;
        else if (child instanceof SoftwareInterrupt) softwareInterrupt = (SoftwareInterrupt)child;
    }

}

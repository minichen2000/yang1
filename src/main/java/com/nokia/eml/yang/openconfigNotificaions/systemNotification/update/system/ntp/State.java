/* 
 * @(#)State.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-notificaions", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigNotificaions.systemNotification.update.system.ntp;

import com.nokia.eml.yang.openconfigInetTypes.IpAddress;
import com.nokia.eml.yang.openconfigSystem.OcSys;
import com.nokia.eml.yang.openconfigYangTypes.Counter64;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangBoolean;
import com.tailf.jnc.YangElement;

import java.math.BigInteger;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/openconfig-notificaions
 * generated to "src/com/nokia/eml/yang/openconfigNotificaions/systemNotification/update/system/ntp/state"
 * <p>
 * See line 763 in
 * /root/nokia-yang/system/openconfig-system.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class State extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty State object.
     */
    public State() {
        super(OcSys.NAMESPACE, "state");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public State clone() {
        return (State)cloneContent(new State());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public State cloneShallow() {
        return (State)cloneShallowContent(new State());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "enabled",
            "ntp-source-address",
            "enable-ntp-auth",
            "auth-mismatch",
        };
    }

    /* Access methods for optional leaf child: "enabled". */

    /**
     * Gets the value for child leaf "enabled".
     * @return The value of the leaf.
     */
    public YangBoolean getEnabledValue() throws JNCException {
        YangBoolean enabled = (YangBoolean)getValue("enabled");
        if (enabled == null) {
            enabled = new YangBoolean("false");  // default
        }
        return enabled;
    }

    /**
     * Sets the value for child leaf "enabled",
     * using instance of generated typedef class.
     * @param enabledValue The value to set.
     * @param enabledValue used during instantiation.
     */
    public void setEnabledValue(YangBoolean enabledValue) throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "enabled",
            enabledValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enabled",
     * using Java primitive values.
     * @param enabledValue used during instantiation.
     */
    public void setEnabledValue(Boolean enabledValue) throws JNCException {
        setEnabledValue(new YangBoolean(enabledValue));
    }

    /**
     * Sets the value for child leaf "enabled",
     * using a String value.
     * @param enabledValue used during instantiation.
     */
    public void setEnabledValue(String enabledValue) throws JNCException {
        setEnabledValue(new YangBoolean(enabledValue));
    }

    /**
     * Unsets the value for child leaf "enabled".
     */
    public void unsetEnabledValue() throws JNCException {
        delete("enabled");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enabled" leaf will not have a value.
     */
    public void addEnabled() throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "enabled",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enabled" with operation "replace".
     */
    public void markEnabledReplace() throws JNCException {
        markLeafReplace("enabled");
    }

    /**
     * Marks the leaf "enabled" with operation "merge".
     */
    public void markEnabledMerge() throws JNCException {
        markLeafMerge("enabled");
    }

    /**
     * Marks the leaf "enabled" with operation "create".
     */
    public void markEnabledCreate() throws JNCException {
        markLeafCreate("enabled");
    }

    /**
     * Marks the leaf "enabled" with operation "delete".
     */
    public void markEnabledDelete() throws JNCException {
        markLeafDelete("enabled");
    }

    /* Access methods for optional leaf child: "ntp-source-address". */

    /**
     * Gets the value for child leaf "ntp-source-address".
     * @return The value of the leaf.
     */
    public IpAddress getNtpSourceAddressValue() throws JNCException {
        return (IpAddress)getValue("ntp-source-address");
    }

    /**
     * Sets the value for child leaf "ntp-source-address",
     * using a JNC type value.
     * @param ntpSourceAddressValue The value to set.
     * @param ntpSourceAddressValue used during instantiation.
     */
    public void setNtpSourceAddressValue(IpAddress ntpSourceAddressValue)
            throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "ntp-source-address",
            ntpSourceAddressValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "ntp-source-address",
     * using a String value.
     * @param ntpSourceAddressValue used during instantiation.
     */
    public void setNtpSourceAddressValue(String ntpSourceAddressValue)
            throws JNCException {
        setNtpSourceAddressValue(new IpAddress(ntpSourceAddressValue));
    }

    /**
     * Unsets the value for child leaf "ntp-source-address".
     */
    public void unsetNtpSourceAddressValue() throws JNCException {
        delete("ntp-source-address");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "ntp-source-address" leaf will not have a value.
     */
    public void addNtpSourceAddress() throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "ntp-source-address",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "ntp-source-address" with operation "replace".
     */
    public void markNtpSourceAddressReplace() throws JNCException {
        markLeafReplace("ntpSourceAddress");
    }

    /**
     * Marks the leaf "ntp-source-address" with operation "merge".
     */
    public void markNtpSourceAddressMerge() throws JNCException {
        markLeafMerge("ntpSourceAddress");
    }

    /**
     * Marks the leaf "ntp-source-address" with operation "create".
     */
    public void markNtpSourceAddressCreate() throws JNCException {
        markLeafCreate("ntpSourceAddress");
    }

    /**
     * Marks the leaf "ntp-source-address" with operation "delete".
     */
    public void markNtpSourceAddressDelete() throws JNCException {
        markLeafDelete("ntpSourceAddress");
    }

    /* Access methods for optional leaf child: "enable-ntp-auth". */

    /**
     * Gets the value for child leaf "enable-ntp-auth".
     * @return The value of the leaf.
     */
    public YangBoolean getEnableNtpAuthValue() throws JNCException {
        YangBoolean enableNtpAuth = (YangBoolean)getValue("enable-ntp-auth");
        if (enableNtpAuth == null) {
            enableNtpAuth = new YangBoolean("false");  // default
        }
        return enableNtpAuth;
    }

    /**
     * Sets the value for child leaf "enable-ntp-auth",
     * using instance of generated typedef class.
     * @param enableNtpAuthValue The value to set.
     * @param enableNtpAuthValue used during instantiation.
     */
    public void setEnableNtpAuthValue(YangBoolean enableNtpAuthValue)
            throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "enable-ntp-auth",
            enableNtpAuthValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "enable-ntp-auth",
     * using Java primitive values.
     * @param enableNtpAuthValue used during instantiation.
     */
    public void setEnableNtpAuthValue(Boolean enableNtpAuthValue)
            throws JNCException {
        setEnableNtpAuthValue(new YangBoolean(enableNtpAuthValue));
    }

    /**
     * Sets the value for child leaf "enable-ntp-auth",
     * using a String value.
     * @param enableNtpAuthValue used during instantiation.
     */
    public void setEnableNtpAuthValue(String enableNtpAuthValue)
            throws JNCException {
        setEnableNtpAuthValue(new YangBoolean(enableNtpAuthValue));
    }

    /**
     * Unsets the value for child leaf "enable-ntp-auth".
     */
    public void unsetEnableNtpAuthValue() throws JNCException {
        delete("enable-ntp-auth");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "enable-ntp-auth" leaf will not have a value.
     */
    public void addEnableNtpAuth() throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "enable-ntp-auth",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "enable-ntp-auth" with operation "replace".
     */
    public void markEnableNtpAuthReplace() throws JNCException {
        markLeafReplace("enableNtpAuth");
    }

    /**
     * Marks the leaf "enable-ntp-auth" with operation "merge".
     */
    public void markEnableNtpAuthMerge() throws JNCException {
        markLeafMerge("enableNtpAuth");
    }

    /**
     * Marks the leaf "enable-ntp-auth" with operation "create".
     */
    public void markEnableNtpAuthCreate() throws JNCException {
        markLeafCreate("enableNtpAuth");
    }

    /**
     * Marks the leaf "enable-ntp-auth" with operation "delete".
     */
    public void markEnableNtpAuthDelete() throws JNCException {
        markLeafDelete("enableNtpAuth");
    }

    /* Access methods for optional leaf child: "auth-mismatch". */

    /**
     * Gets the value for child leaf "auth-mismatch".
     * @return The value of the leaf.
     */
    public Counter64 getAuthMismatchValue() throws JNCException {
        return (Counter64)getValue("auth-mismatch");
    }

    /**
     * Sets the value for child leaf "auth-mismatch",
     * using a JNC type value.
     * @param authMismatchValue The value to set.
     * @param authMismatchValue used during instantiation.
     */
    public void setAuthMismatchValue(Counter64 authMismatchValue)
            throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "auth-mismatch",
            authMismatchValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "auth-mismatch",
     * using Java primitive values.
     * @param authMismatchValue used during instantiation.
     */
    public void setAuthMismatchValue(BigInteger authMismatchValue)
            throws JNCException {
        setAuthMismatchValue(new Counter64(authMismatchValue));
    }

    /**
     * Sets the value for child leaf "auth-mismatch",
     * using a String value.
     * @param authMismatchValue used during instantiation.
     */
    public void setAuthMismatchValue(String authMismatchValue)
            throws JNCException {
        setAuthMismatchValue(new Counter64(authMismatchValue));
    }

    /**
     * Unsets the value for child leaf "auth-mismatch".
     */
    public void unsetAuthMismatchValue() throws JNCException {
        delete("auth-mismatch");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "auth-mismatch" leaf will not have a value.
     */
    public void addAuthMismatch() throws JNCException {
        setLeafValue(OcSys.NAMESPACE,
            "auth-mismatch",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "auth-mismatch" with operation "replace".
     */
    public void markAuthMismatchReplace() throws JNCException {
        markLeafReplace("authMismatch");
    }

    /**
     * Marks the leaf "auth-mismatch" with operation "merge".
     */
    public void markAuthMismatchMerge() throws JNCException {
        markLeafMerge("authMismatch");
    }

    /**
     * Marks the leaf "auth-mismatch" with operation "create".
     */
    public void markAuthMismatchCreate() throws JNCException {
        markLeafCreate("authMismatch");
    }

    /**
     * Marks the leaf "auth-mismatch" with operation "delete".
     */
    public void markAuthMismatchDelete() throws JNCException {
        markLeafDelete("authMismatch");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

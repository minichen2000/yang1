/* 
 * @(#)State.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-notificaions", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigNotificaions.terminalDeviceNotification.update.terminalDevice.logicalChannels.channel.ethernet;

import com.nokia.eml.yang.openconfigIfEthernet.OcEth;
import com.nokia.eml.yang.openconfigTerminalDevice.OcOptTerm;
import com.nokia.eml.yang.openconfigYangTypes.Counter64;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;

import java.math.BigInteger;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/openconfig-notificaions
 * generated to "src/com/nokia/eml/yang/openconfigNotificaions/terminalDeviceNotification/update/terminalDevice/logicalChannels/channel/ethernet/state"
 * <p>
 * See line 142 in
 * /root/nokia-yang/optical-transport/openconfig-terminal-device.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class State extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty State object.
     */
    public State() {
        super(OcOptTerm.NAMESPACE, "state");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public State clone() {
        return (State)cloneContent(new State());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public State cloneShallow() {
        return (State)cloneShallowContent(new State());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "in-mac-control-frames",
            "in-mac-pause-frames",
            "in-oversize-frames",
            "in-jabber-frames",
            "in-fragment-frames",
            "in-8021q-frames",
            "in-crc-errors",
            "out-mac-control-frames",
            "out-mac-pause-frames",
            "out-8021q-frames",
        };
    }

    /* Access methods for optional leaf child: "in-mac-control-frames". */

    /**
     * Gets the value for child leaf "in-mac-control-frames".
     * @return The value of the leaf.
     */
    public Counter64 getInMacControlFramesValue() throws JNCException {
        return (Counter64)getValue("in-mac-control-frames");
    }

    /**
     * Sets the value for child leaf "in-mac-control-frames",
     * using a JNC type value.
     * @param inMacControlFramesValue The value to set.
     * @param inMacControlFramesValue used during instantiation.
     */
    public void setInMacControlFramesValue(Counter64 inMacControlFramesValue)
            throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "in-mac-control-frames",
            inMacControlFramesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-mac-control-frames",
     * using Java primitive values.
     * @param inMacControlFramesValue used during instantiation.
     */
    public void setInMacControlFramesValue(BigInteger inMacControlFramesValue)
            throws JNCException {
        setInMacControlFramesValue(new Counter64(inMacControlFramesValue));
    }

    /**
     * Sets the value for child leaf "in-mac-control-frames",
     * using a String value.
     * @param inMacControlFramesValue used during instantiation.
     */
    public void setInMacControlFramesValue(String inMacControlFramesValue)
            throws JNCException {
        setInMacControlFramesValue(new Counter64(inMacControlFramesValue));
    }

    /**
     * Unsets the value for child leaf "in-mac-control-frames".
     */
    public void unsetInMacControlFramesValue() throws JNCException {
        delete("in-mac-control-frames");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-mac-control-frames" leaf will not have a value.
     */
    public void addInMacControlFrames() throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "in-mac-control-frames",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-mac-control-frames" with operation "replace".
     */
    public void markInMacControlFramesReplace() throws JNCException {
        markLeafReplace("inMacControlFrames");
    }

    /**
     * Marks the leaf "in-mac-control-frames" with operation "merge".
     */
    public void markInMacControlFramesMerge() throws JNCException {
        markLeafMerge("inMacControlFrames");
    }

    /**
     * Marks the leaf "in-mac-control-frames" with operation "create".
     */
    public void markInMacControlFramesCreate() throws JNCException {
        markLeafCreate("inMacControlFrames");
    }

    /**
     * Marks the leaf "in-mac-control-frames" with operation "delete".
     */
    public void markInMacControlFramesDelete() throws JNCException {
        markLeafDelete("inMacControlFrames");
    }

    /* Access methods for optional leaf child: "in-mac-pause-frames". */

    /**
     * Gets the value for child leaf "in-mac-pause-frames".
     * @return The value of the leaf.
     */
    public Counter64 getInMacPauseFramesValue() throws JNCException {
        return (Counter64)getValue("in-mac-pause-frames");
    }

    /**
     * Sets the value for child leaf "in-mac-pause-frames",
     * using a JNC type value.
     * @param inMacPauseFramesValue The value to set.
     * @param inMacPauseFramesValue used during instantiation.
     */
    public void setInMacPauseFramesValue(Counter64 inMacPauseFramesValue)
            throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "in-mac-pause-frames",
            inMacPauseFramesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-mac-pause-frames",
     * using Java primitive values.
     * @param inMacPauseFramesValue used during instantiation.
     */
    public void setInMacPauseFramesValue(BigInteger inMacPauseFramesValue)
            throws JNCException {
        setInMacPauseFramesValue(new Counter64(inMacPauseFramesValue));
    }

    /**
     * Sets the value for child leaf "in-mac-pause-frames",
     * using a String value.
     * @param inMacPauseFramesValue used during instantiation.
     */
    public void setInMacPauseFramesValue(String inMacPauseFramesValue)
            throws JNCException {
        setInMacPauseFramesValue(new Counter64(inMacPauseFramesValue));
    }

    /**
     * Unsets the value for child leaf "in-mac-pause-frames".
     */
    public void unsetInMacPauseFramesValue() throws JNCException {
        delete("in-mac-pause-frames");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-mac-pause-frames" leaf will not have a value.
     */
    public void addInMacPauseFrames() throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "in-mac-pause-frames",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-mac-pause-frames" with operation "replace".
     */
    public void markInMacPauseFramesReplace() throws JNCException {
        markLeafReplace("inMacPauseFrames");
    }

    /**
     * Marks the leaf "in-mac-pause-frames" with operation "merge".
     */
    public void markInMacPauseFramesMerge() throws JNCException {
        markLeafMerge("inMacPauseFrames");
    }

    /**
     * Marks the leaf "in-mac-pause-frames" with operation "create".
     */
    public void markInMacPauseFramesCreate() throws JNCException {
        markLeafCreate("inMacPauseFrames");
    }

    /**
     * Marks the leaf "in-mac-pause-frames" with operation "delete".
     */
    public void markInMacPauseFramesDelete() throws JNCException {
        markLeafDelete("inMacPauseFrames");
    }

    /* Access methods for optional leaf child: "in-oversize-frames". */

    /**
     * Gets the value for child leaf "in-oversize-frames".
     * @return The value of the leaf.
     */
    public Counter64 getInOversizeFramesValue() throws JNCException {
        return (Counter64)getValue("in-oversize-frames");
    }

    /**
     * Sets the value for child leaf "in-oversize-frames",
     * using a JNC type value.
     * @param inOversizeFramesValue The value to set.
     * @param inOversizeFramesValue used during instantiation.
     */
    public void setInOversizeFramesValue(Counter64 inOversizeFramesValue)
            throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "in-oversize-frames",
            inOversizeFramesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-oversize-frames",
     * using Java primitive values.
     * @param inOversizeFramesValue used during instantiation.
     */
    public void setInOversizeFramesValue(BigInteger inOversizeFramesValue)
            throws JNCException {
        setInOversizeFramesValue(new Counter64(inOversizeFramesValue));
    }

    /**
     * Sets the value for child leaf "in-oversize-frames",
     * using a String value.
     * @param inOversizeFramesValue used during instantiation.
     */
    public void setInOversizeFramesValue(String inOversizeFramesValue)
            throws JNCException {
        setInOversizeFramesValue(new Counter64(inOversizeFramesValue));
    }

    /**
     * Unsets the value for child leaf "in-oversize-frames".
     */
    public void unsetInOversizeFramesValue() throws JNCException {
        delete("in-oversize-frames");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-oversize-frames" leaf will not have a value.
     */
    public void addInOversizeFrames() throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "in-oversize-frames",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-oversize-frames" with operation "replace".
     */
    public void markInOversizeFramesReplace() throws JNCException {
        markLeafReplace("inOversizeFrames");
    }

    /**
     * Marks the leaf "in-oversize-frames" with operation "merge".
     */
    public void markInOversizeFramesMerge() throws JNCException {
        markLeafMerge("inOversizeFrames");
    }

    /**
     * Marks the leaf "in-oversize-frames" with operation "create".
     */
    public void markInOversizeFramesCreate() throws JNCException {
        markLeafCreate("inOversizeFrames");
    }

    /**
     * Marks the leaf "in-oversize-frames" with operation "delete".
     */
    public void markInOversizeFramesDelete() throws JNCException {
        markLeafDelete("inOversizeFrames");
    }

    /* Access methods for optional leaf child: "in-jabber-frames". */

    /**
     * Gets the value for child leaf "in-jabber-frames".
     * @return The value of the leaf.
     */
    public Counter64 getInJabberFramesValue() throws JNCException {
        return (Counter64)getValue("in-jabber-frames");
    }

    /**
     * Sets the value for child leaf "in-jabber-frames",
     * using a JNC type value.
     * @param inJabberFramesValue The value to set.
     * @param inJabberFramesValue used during instantiation.
     */
    public void setInJabberFramesValue(Counter64 inJabberFramesValue)
            throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "in-jabber-frames",
            inJabberFramesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-jabber-frames",
     * using Java primitive values.
     * @param inJabberFramesValue used during instantiation.
     */
    public void setInJabberFramesValue(BigInteger inJabberFramesValue)
            throws JNCException {
        setInJabberFramesValue(new Counter64(inJabberFramesValue));
    }

    /**
     * Sets the value for child leaf "in-jabber-frames",
     * using a String value.
     * @param inJabberFramesValue used during instantiation.
     */
    public void setInJabberFramesValue(String inJabberFramesValue)
            throws JNCException {
        setInJabberFramesValue(new Counter64(inJabberFramesValue));
    }

    /**
     * Unsets the value for child leaf "in-jabber-frames".
     */
    public void unsetInJabberFramesValue() throws JNCException {
        delete("in-jabber-frames");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-jabber-frames" leaf will not have a value.
     */
    public void addInJabberFrames() throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "in-jabber-frames",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-jabber-frames" with operation "replace".
     */
    public void markInJabberFramesReplace() throws JNCException {
        markLeafReplace("inJabberFrames");
    }

    /**
     * Marks the leaf "in-jabber-frames" with operation "merge".
     */
    public void markInJabberFramesMerge() throws JNCException {
        markLeafMerge("inJabberFrames");
    }

    /**
     * Marks the leaf "in-jabber-frames" with operation "create".
     */
    public void markInJabberFramesCreate() throws JNCException {
        markLeafCreate("inJabberFrames");
    }

    /**
     * Marks the leaf "in-jabber-frames" with operation "delete".
     */
    public void markInJabberFramesDelete() throws JNCException {
        markLeafDelete("inJabberFrames");
    }

    /* Access methods for optional leaf child: "in-fragment-frames". */

    /**
     * Gets the value for child leaf "in-fragment-frames".
     * @return The value of the leaf.
     */
    public Counter64 getInFragmentFramesValue() throws JNCException {
        return (Counter64)getValue("in-fragment-frames");
    }

    /**
     * Sets the value for child leaf "in-fragment-frames",
     * using a JNC type value.
     * @param inFragmentFramesValue The value to set.
     * @param inFragmentFramesValue used during instantiation.
     */
    public void setInFragmentFramesValue(Counter64 inFragmentFramesValue)
            throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "in-fragment-frames",
            inFragmentFramesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-fragment-frames",
     * using Java primitive values.
     * @param inFragmentFramesValue used during instantiation.
     */
    public void setInFragmentFramesValue(BigInteger inFragmentFramesValue)
            throws JNCException {
        setInFragmentFramesValue(new Counter64(inFragmentFramesValue));
    }

    /**
     * Sets the value for child leaf "in-fragment-frames",
     * using a String value.
     * @param inFragmentFramesValue used during instantiation.
     */
    public void setInFragmentFramesValue(String inFragmentFramesValue)
            throws JNCException {
        setInFragmentFramesValue(new Counter64(inFragmentFramesValue));
    }

    /**
     * Unsets the value for child leaf "in-fragment-frames".
     */
    public void unsetInFragmentFramesValue() throws JNCException {
        delete("in-fragment-frames");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-fragment-frames" leaf will not have a value.
     */
    public void addInFragmentFrames() throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "in-fragment-frames",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-fragment-frames" with operation "replace".
     */
    public void markInFragmentFramesReplace() throws JNCException {
        markLeafReplace("inFragmentFrames");
    }

    /**
     * Marks the leaf "in-fragment-frames" with operation "merge".
     */
    public void markInFragmentFramesMerge() throws JNCException {
        markLeafMerge("inFragmentFrames");
    }

    /**
     * Marks the leaf "in-fragment-frames" with operation "create".
     */
    public void markInFragmentFramesCreate() throws JNCException {
        markLeafCreate("inFragmentFrames");
    }

    /**
     * Marks the leaf "in-fragment-frames" with operation "delete".
     */
    public void markInFragmentFramesDelete() throws JNCException {
        markLeafDelete("inFragmentFrames");
    }

    /* Access methods for optional leaf child: "in-8021q-frames". */

    /**
     * Gets the value for child leaf "in-8021q-frames".
     * @return The value of the leaf.
     */
    public Counter64 getIn8021qFramesValue() throws JNCException {
        return (Counter64)getValue("in-8021q-frames");
    }

    /**
     * Sets the value for child leaf "in-8021q-frames",
     * using a JNC type value.
     * @param in8021qFramesValue The value to set.
     * @param in8021qFramesValue used during instantiation.
     */
    public void setIn8021qFramesValue(Counter64 in8021qFramesValue)
            throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "in-8021q-frames",
            in8021qFramesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-8021q-frames",
     * using Java primitive values.
     * @param in8021qFramesValue used during instantiation.
     */
    public void setIn8021qFramesValue(BigInteger in8021qFramesValue)
            throws JNCException {
        setIn8021qFramesValue(new Counter64(in8021qFramesValue));
    }

    /**
     * Sets the value for child leaf "in-8021q-frames",
     * using a String value.
     * @param in8021qFramesValue used during instantiation.
     */
    public void setIn8021qFramesValue(String in8021qFramesValue)
            throws JNCException {
        setIn8021qFramesValue(new Counter64(in8021qFramesValue));
    }

    /**
     * Unsets the value for child leaf "in-8021q-frames".
     */
    public void unsetIn8021qFramesValue() throws JNCException {
        delete("in-8021q-frames");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-8021q-frames" leaf will not have a value.
     */
    public void addIn8021qFrames() throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "in-8021q-frames",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-8021q-frames" with operation "replace".
     */
    public void markIn8021qFramesReplace() throws JNCException {
        markLeafReplace("in8021qFrames");
    }

    /**
     * Marks the leaf "in-8021q-frames" with operation "merge".
     */
    public void markIn8021qFramesMerge() throws JNCException {
        markLeafMerge("in8021qFrames");
    }

    /**
     * Marks the leaf "in-8021q-frames" with operation "create".
     */
    public void markIn8021qFramesCreate() throws JNCException {
        markLeafCreate("in8021qFrames");
    }

    /**
     * Marks the leaf "in-8021q-frames" with operation "delete".
     */
    public void markIn8021qFramesDelete() throws JNCException {
        markLeafDelete("in8021qFrames");
    }

    /* Access methods for optional leaf child: "in-crc-errors". */

    /**
     * Gets the value for child leaf "in-crc-errors".
     * @return The value of the leaf.
     */
    public Counter64 getInCrcErrorsValue() throws JNCException {
        return (Counter64)getValue("in-crc-errors");
    }

    /**
     * Sets the value for child leaf "in-crc-errors",
     * using a JNC type value.
     * @param inCrcErrorsValue The value to set.
     * @param inCrcErrorsValue used during instantiation.
     */
    public void setInCrcErrorsValue(Counter64 inCrcErrorsValue)
            throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "in-crc-errors",
            inCrcErrorsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-crc-errors",
     * using Java primitive values.
     * @param inCrcErrorsValue used during instantiation.
     */
    public void setInCrcErrorsValue(BigInteger inCrcErrorsValue)
            throws JNCException {
        setInCrcErrorsValue(new Counter64(inCrcErrorsValue));
    }

    /**
     * Sets the value for child leaf "in-crc-errors",
     * using a String value.
     * @param inCrcErrorsValue used during instantiation.
     */
    public void setInCrcErrorsValue(String inCrcErrorsValue)
            throws JNCException {
        setInCrcErrorsValue(new Counter64(inCrcErrorsValue));
    }

    /**
     * Unsets the value for child leaf "in-crc-errors".
     */
    public void unsetInCrcErrorsValue() throws JNCException {
        delete("in-crc-errors");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-crc-errors" leaf will not have a value.
     */
    public void addInCrcErrors() throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "in-crc-errors",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-crc-errors" with operation "replace".
     */
    public void markInCrcErrorsReplace() throws JNCException {
        markLeafReplace("inCrcErrors");
    }

    /**
     * Marks the leaf "in-crc-errors" with operation "merge".
     */
    public void markInCrcErrorsMerge() throws JNCException {
        markLeafMerge("inCrcErrors");
    }

    /**
     * Marks the leaf "in-crc-errors" with operation "create".
     */
    public void markInCrcErrorsCreate() throws JNCException {
        markLeafCreate("inCrcErrors");
    }

    /**
     * Marks the leaf "in-crc-errors" with operation "delete".
     */
    public void markInCrcErrorsDelete() throws JNCException {
        markLeafDelete("inCrcErrors");
    }

    /* Access methods for optional leaf child: "out-mac-control-frames". */

    /**
     * Gets the value for child leaf "out-mac-control-frames".
     * @return The value of the leaf.
     */
    public Counter64 getOutMacControlFramesValue() throws JNCException {
        return (Counter64)getValue("out-mac-control-frames");
    }

    /**
     * Sets the value for child leaf "out-mac-control-frames",
     * using a JNC type value.
     * @param outMacControlFramesValue The value to set.
     * @param outMacControlFramesValue used during instantiation.
     */
    public void setOutMacControlFramesValue(Counter64 outMacControlFramesValue)
            throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "out-mac-control-frames",
            outMacControlFramesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-mac-control-frames",
     * using Java primitive values.
     * @param outMacControlFramesValue used during instantiation.
     */
    public void setOutMacControlFramesValue(BigInteger outMacControlFramesValue)
            throws JNCException {
        setOutMacControlFramesValue(new Counter64(outMacControlFramesValue));
    }

    /**
     * Sets the value for child leaf "out-mac-control-frames",
     * using a String value.
     * @param outMacControlFramesValue used during instantiation.
     */
    public void setOutMacControlFramesValue(String outMacControlFramesValue)
            throws JNCException {
        setOutMacControlFramesValue(new Counter64(outMacControlFramesValue));
    }

    /**
     * Unsets the value for child leaf "out-mac-control-frames".
     */
    public void unsetOutMacControlFramesValue() throws JNCException {
        delete("out-mac-control-frames");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-mac-control-frames" leaf will not have a value.
     */
    public void addOutMacControlFrames() throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "out-mac-control-frames",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-mac-control-frames" with operation "replace".
     */
    public void markOutMacControlFramesReplace() throws JNCException {
        markLeafReplace("outMacControlFrames");
    }

    /**
     * Marks the leaf "out-mac-control-frames" with operation "merge".
     */
    public void markOutMacControlFramesMerge() throws JNCException {
        markLeafMerge("outMacControlFrames");
    }

    /**
     * Marks the leaf "out-mac-control-frames" with operation "create".
     */
    public void markOutMacControlFramesCreate() throws JNCException {
        markLeafCreate("outMacControlFrames");
    }

    /**
     * Marks the leaf "out-mac-control-frames" with operation "delete".
     */
    public void markOutMacControlFramesDelete() throws JNCException {
        markLeafDelete("outMacControlFrames");
    }

    /* Access methods for optional leaf child: "out-mac-pause-frames". */

    /**
     * Gets the value for child leaf "out-mac-pause-frames".
     * @return The value of the leaf.
     */
    public Counter64 getOutMacPauseFramesValue() throws JNCException {
        return (Counter64)getValue("out-mac-pause-frames");
    }

    /**
     * Sets the value for child leaf "out-mac-pause-frames",
     * using a JNC type value.
     * @param outMacPauseFramesValue The value to set.
     * @param outMacPauseFramesValue used during instantiation.
     */
    public void setOutMacPauseFramesValue(Counter64 outMacPauseFramesValue)
            throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "out-mac-pause-frames",
            outMacPauseFramesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-mac-pause-frames",
     * using Java primitive values.
     * @param outMacPauseFramesValue used during instantiation.
     */
    public void setOutMacPauseFramesValue(BigInteger outMacPauseFramesValue)
            throws JNCException {
        setOutMacPauseFramesValue(new Counter64(outMacPauseFramesValue));
    }

    /**
     * Sets the value for child leaf "out-mac-pause-frames",
     * using a String value.
     * @param outMacPauseFramesValue used during instantiation.
     */
    public void setOutMacPauseFramesValue(String outMacPauseFramesValue)
            throws JNCException {
        setOutMacPauseFramesValue(new Counter64(outMacPauseFramesValue));
    }

    /**
     * Unsets the value for child leaf "out-mac-pause-frames".
     */
    public void unsetOutMacPauseFramesValue() throws JNCException {
        delete("out-mac-pause-frames");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-mac-pause-frames" leaf will not have a value.
     */
    public void addOutMacPauseFrames() throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "out-mac-pause-frames",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-mac-pause-frames" with operation "replace".
     */
    public void markOutMacPauseFramesReplace() throws JNCException {
        markLeafReplace("outMacPauseFrames");
    }

    /**
     * Marks the leaf "out-mac-pause-frames" with operation "merge".
     */
    public void markOutMacPauseFramesMerge() throws JNCException {
        markLeafMerge("outMacPauseFrames");
    }

    /**
     * Marks the leaf "out-mac-pause-frames" with operation "create".
     */
    public void markOutMacPauseFramesCreate() throws JNCException {
        markLeafCreate("outMacPauseFrames");
    }

    /**
     * Marks the leaf "out-mac-pause-frames" with operation "delete".
     */
    public void markOutMacPauseFramesDelete() throws JNCException {
        markLeafDelete("outMacPauseFrames");
    }

    /* Access methods for optional leaf child: "out-8021q-frames". */

    /**
     * Gets the value for child leaf "out-8021q-frames".
     * @return The value of the leaf.
     */
    public Counter64 getOut8021qFramesValue() throws JNCException {
        return (Counter64)getValue("out-8021q-frames");
    }

    /**
     * Sets the value for child leaf "out-8021q-frames",
     * using a JNC type value.
     * @param out8021qFramesValue The value to set.
     * @param out8021qFramesValue used during instantiation.
     */
    public void setOut8021qFramesValue(Counter64 out8021qFramesValue)
            throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "out-8021q-frames",
            out8021qFramesValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-8021q-frames",
     * using Java primitive values.
     * @param out8021qFramesValue used during instantiation.
     */
    public void setOut8021qFramesValue(BigInteger out8021qFramesValue)
            throws JNCException {
        setOut8021qFramesValue(new Counter64(out8021qFramesValue));
    }

    /**
     * Sets the value for child leaf "out-8021q-frames",
     * using a String value.
     * @param out8021qFramesValue used during instantiation.
     */
    public void setOut8021qFramesValue(String out8021qFramesValue)
            throws JNCException {
        setOut8021qFramesValue(new Counter64(out8021qFramesValue));
    }

    /**
     * Unsets the value for child leaf "out-8021q-frames".
     */
    public void unsetOut8021qFramesValue() throws JNCException {
        delete("out-8021q-frames");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-8021q-frames" leaf will not have a value.
     */
    public void addOut8021qFrames() throws JNCException {
        setLeafValue(OcEth.NAMESPACE,
            "out-8021q-frames",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-8021q-frames" with operation "replace".
     */
    public void markOut8021qFramesReplace() throws JNCException {
        markLeafReplace("out8021qFrames");
    }

    /**
     * Marks the leaf "out-8021q-frames" with operation "merge".
     */
    public void markOut8021qFramesMerge() throws JNCException {
        markLeafMerge("out8021qFrames");
    }

    /**
     * Marks the leaf "out-8021q-frames" with operation "create".
     */
    public void markOut8021qFramesCreate() throws JNCException {
        markLeafCreate("out8021qFrames");
    }

    /**
     * Marks the leaf "out-8021q-frames" with operation "delete".
     */
    public void markOut8021qFramesDelete() throws JNCException {
        markLeafDelete("out8021qFrames");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

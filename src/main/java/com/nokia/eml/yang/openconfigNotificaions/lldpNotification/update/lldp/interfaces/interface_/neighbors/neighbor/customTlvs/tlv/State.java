/* 
 * @(#)State.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-notificaions", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigNotificaions.lldpNotification.update.lldp.interfaces.interface_.neighbors.neighbor.customTlvs.tlv;

import com.nokia.eml.yang.openconfigLldp.OcLldp;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangBinary;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangInt32;
import com.tailf.jnc.YangString;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/openconfig-notificaions
 * generated to "src/com/nokia/eml/yang/openconfigNotificaions/lldpNotification/update/lldp/interfaces/interface_/neighbors/neighbor/customTlvs/tlv/state"
 * <p>
 * See line 416 in
 * /root/nokia-yang/lldp/openconfig-lldp.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class State extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty State object.
     */
    public State() {
        super(OcLldp.NAMESPACE, "state");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public State clone() {
        return (State)cloneContent(new State());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public State cloneShallow() {
        return (State)cloneShallowContent(new State());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "type",
            "oui",
            "oui-subtype",
            "value",
        };
    }

    /* Access methods for optional leaf child: "type". */

    /**
     * Gets the value for child leaf "type".
     * @return The value of the leaf.
     */
    public YangInt32 getTypeValue() throws JNCException {
        return (YangInt32)getValue("type");
    }

    /**
     * Sets the value for child leaf "type",
     * using instance of generated typedef class.
     * @param typeValue The value to set.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(YangInt32 typeValue) throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "type",
            typeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "type",
     * using Java primitive values.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(int typeValue) throws JNCException {
        setTypeValue(new YangInt32(typeValue));
    }

    /**
     * Sets the value for child leaf "type",
     * using a String value.
     * @param typeValue used during instantiation.
     */
    public void setTypeValue(String typeValue) throws JNCException {
        setTypeValue(new YangInt32(typeValue));
    }

    /**
     * Unsets the value for child leaf "type".
     */
    public void unsetTypeValue() throws JNCException {
        delete("type");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "type" leaf will not have a value.
     */
    public void addType() throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "type",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "type" with operation "replace".
     */
    public void markTypeReplace() throws JNCException {
        markLeafReplace("type");
    }

    /**
     * Marks the leaf "type" with operation "merge".
     */
    public void markTypeMerge() throws JNCException {
        markLeafMerge("type");
    }

    /**
     * Marks the leaf "type" with operation "create".
     */
    public void markTypeCreate() throws JNCException {
        markLeafCreate("type");
    }

    /**
     * Marks the leaf "type" with operation "delete".
     */
    public void markTypeDelete() throws JNCException {
        markLeafDelete("type");
    }

    /* Access methods for optional leaf child: "oui". */

    /**
     * Gets the value for child leaf "oui".
     * @return The value of the leaf.
     */
    public YangString getOuiValue() throws JNCException {
        return (YangString)getValue("oui");
    }

    /**
     * Sets the value for child leaf "oui",
     * using instance of generated typedef class.
     * @param ouiValue The value to set.
     * @param ouiValue used during instantiation.
     */
    public void setOuiValue(YangString ouiValue) throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "oui",
            ouiValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "oui",
     * using a String value.
     * @param ouiValue used during instantiation.
     */
    public void setOuiValue(String ouiValue) throws JNCException {
        setOuiValue(new YangString(ouiValue));
    }

    /**
     * Unsets the value for child leaf "oui".
     */
    public void unsetOuiValue() throws JNCException {
        delete("oui");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "oui" leaf will not have a value.
     */
    public void addOui() throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "oui",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "oui" with operation "replace".
     */
    public void markOuiReplace() throws JNCException {
        markLeafReplace("oui");
    }

    /**
     * Marks the leaf "oui" with operation "merge".
     */
    public void markOuiMerge() throws JNCException {
        markLeafMerge("oui");
    }

    /**
     * Marks the leaf "oui" with operation "create".
     */
    public void markOuiCreate() throws JNCException {
        markLeafCreate("oui");
    }

    /**
     * Marks the leaf "oui" with operation "delete".
     */
    public void markOuiDelete() throws JNCException {
        markLeafDelete("oui");
    }

    /* Access methods for optional leaf child: "oui-subtype". */

    /**
     * Gets the value for child leaf "oui-subtype".
     * @return The value of the leaf.
     */
    public YangString getOuiSubtypeValue() throws JNCException {
        return (YangString)getValue("oui-subtype");
    }

    /**
     * Sets the value for child leaf "oui-subtype",
     * using instance of generated typedef class.
     * @param ouiSubtypeValue The value to set.
     * @param ouiSubtypeValue used during instantiation.
     */
    public void setOuiSubtypeValue(YangString ouiSubtypeValue)
            throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "oui-subtype",
            ouiSubtypeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "oui-subtype",
     * using a String value.
     * @param ouiSubtypeValue used during instantiation.
     */
    public void setOuiSubtypeValue(String ouiSubtypeValue) throws JNCException {
        setOuiSubtypeValue(new YangString(ouiSubtypeValue));
    }

    /**
     * Unsets the value for child leaf "oui-subtype".
     */
    public void unsetOuiSubtypeValue() throws JNCException {
        delete("oui-subtype");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "oui-subtype" leaf will not have a value.
     */
    public void addOuiSubtype() throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "oui-subtype",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "oui-subtype" with operation "replace".
     */
    public void markOuiSubtypeReplace() throws JNCException {
        markLeafReplace("ouiSubtype");
    }

    /**
     * Marks the leaf "oui-subtype" with operation "merge".
     */
    public void markOuiSubtypeMerge() throws JNCException {
        markLeafMerge("ouiSubtype");
    }

    /**
     * Marks the leaf "oui-subtype" with operation "create".
     */
    public void markOuiSubtypeCreate() throws JNCException {
        markLeafCreate("ouiSubtype");
    }

    /**
     * Marks the leaf "oui-subtype" with operation "delete".
     */
    public void markOuiSubtypeDelete() throws JNCException {
        markLeafDelete("ouiSubtype");
    }

    /* Access methods for optional leaf child: "value". */

    /**
     * Gets the value for child leaf "value".
     * @return The value of the leaf.
     */
    public YangBinary getValueValue() throws JNCException {
        return (YangBinary)getValue("value");
    }

    /**
     * Sets the value for child leaf "value",
     * using instance of generated typedef class.
     * @param valueValue The value to set.
     * @param valueValue used during instantiation.
     */
    public void setValueValue(YangBinary valueValue) throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "value",
            valueValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "value",
     * using a String value.
     * @param valueValue used during instantiation.
     */
    public void setValueValue(String valueValue) throws JNCException {
        setValueValue(new YangBinary(valueValue));
    }

    /**
     * Unsets the value for child leaf "value".
     */
    public void unsetValueValue() throws JNCException {
        delete("value");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "value" leaf will not have a value.
     */
    public void addValue() throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "value",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "value" with operation "replace".
     */
    public void markValueReplace() throws JNCException {
        markLeafReplace("value");
    }

    /**
     * Marks the leaf "value" with operation "merge".
     */
    public void markValueMerge() throws JNCException {
        markLeafMerge("value");
    }

    /**
     * Marks the leaf "value" with operation "create".
     */
    public void markValueCreate() throws JNCException {
        markLeafCreate("value");
    }

    /**
     * Marks the leaf "value" with operation "delete".
     */
    public void markValueDelete() throws JNCException {
        markLeafDelete("value");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

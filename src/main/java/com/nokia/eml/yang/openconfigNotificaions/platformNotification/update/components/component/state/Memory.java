/* 
 * @(#)Memory.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-notificaions", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigNotificaions.platformNotification.update.components.component.state;

import com.nokia.eml.yang.openconfigPlatform.OcPlatform;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt64;

import java.math.BigInteger;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/openconfig-notificaions
 * generated to "src/com/nokia/eml/yang/openconfigNotificaions/platformNotification/update/components/component/state/memory"
 * <p>
 * See line 424 in
 * /root/nokia-yang/platform/openconfig-platform.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class Memory extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Memory object.
     */
    public Memory() {
        super(OcPlatform.NAMESPACE, "memory");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Memory clone() {
        return (Memory)cloneContent(new Memory());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Memory cloneShallow() {
        return (Memory)cloneShallowContent(new Memory());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "available",
            "utilized",
        };
    }

    /* Access methods for optional leaf child: "available". */

    /**
     * Gets the value for child leaf "available".
     * @return The value of the leaf.
     */
    public YangUInt64 getAvailableValue() throws JNCException {
        return (YangUInt64)getValue("available");
    }

    /**
     * Sets the value for child leaf "available",
     * using instance of generated typedef class.
     * @param availableValue The value to set.
     * @param availableValue used during instantiation.
     */
    public void setAvailableValue(YangUInt64 availableValue)
            throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "available",
            availableValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "available",
     * using Java primitive values.
     * @param availableValue used during instantiation.
     */
    public void setAvailableValue(BigInteger availableValue)
            throws JNCException {
        setAvailableValue(new YangUInt64(availableValue));
    }

    /**
     * Sets the value for child leaf "available",
     * using a String value.
     * @param availableValue used during instantiation.
     */
    public void setAvailableValue(String availableValue) throws JNCException {
        setAvailableValue(new YangUInt64(availableValue));
    }

    /**
     * Unsets the value for child leaf "available".
     */
    public void unsetAvailableValue() throws JNCException {
        delete("available");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "available" leaf will not have a value.
     */
    public void addAvailable() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "available",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "available" with operation "replace".
     */
    public void markAvailableReplace() throws JNCException {
        markLeafReplace("available");
    }

    /**
     * Marks the leaf "available" with operation "merge".
     */
    public void markAvailableMerge() throws JNCException {
        markLeafMerge("available");
    }

    /**
     * Marks the leaf "available" with operation "create".
     */
    public void markAvailableCreate() throws JNCException {
        markLeafCreate("available");
    }

    /**
     * Marks the leaf "available" with operation "delete".
     */
    public void markAvailableDelete() throws JNCException {
        markLeafDelete("available");
    }

    /* Access methods for optional leaf child: "utilized". */

    /**
     * Gets the value for child leaf "utilized".
     * @return The value of the leaf.
     */
    public YangUInt64 getUtilizedValue() throws JNCException {
        return (YangUInt64)getValue("utilized");
    }

    /**
     * Sets the value for child leaf "utilized",
     * using instance of generated typedef class.
     * @param utilizedValue The value to set.
     * @param utilizedValue used during instantiation.
     */
    public void setUtilizedValue(YangUInt64 utilizedValue) throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "utilized",
            utilizedValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "utilized",
     * using Java primitive values.
     * @param utilizedValue used during instantiation.
     */
    public void setUtilizedValue(BigInteger utilizedValue) throws JNCException {
        setUtilizedValue(new YangUInt64(utilizedValue));
    }

    /**
     * Sets the value for child leaf "utilized",
     * using a String value.
     * @param utilizedValue used during instantiation.
     */
    public void setUtilizedValue(String utilizedValue) throws JNCException {
        setUtilizedValue(new YangUInt64(utilizedValue));
    }

    /**
     * Unsets the value for child leaf "utilized".
     */
    public void unsetUtilizedValue() throws JNCException {
        delete("utilized");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "utilized" leaf will not have a value.
     */
    public void addUtilized() throws JNCException {
        setLeafValue(OcPlatform.NAMESPACE,
            "utilized",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "utilized" with operation "replace".
     */
    public void markUtilizedReplace() throws JNCException {
        markLeafReplace("utilized");
    }

    /**
     * Marks the leaf "utilized" with operation "merge".
     */
    public void markUtilizedMerge() throws JNCException {
        markLeafMerge("utilized");
    }

    /**
     * Marks the leaf "utilized" with operation "create".
     */
    public void markUtilizedCreate() throws JNCException {
        markLeafCreate("utilized");
    }

    /**
     * Marks the leaf "utilized" with operation "delete".
     */
    public void markUtilizedDelete() throws JNCException {
        markLeafDelete("utilized");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

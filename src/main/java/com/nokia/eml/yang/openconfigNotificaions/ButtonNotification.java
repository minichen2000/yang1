/* 
 * @(#)ButtonNotification.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-notificaions", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigNotificaions;

import com.nokia.eml.yang.openconfigNotificaions.OcNotify;
import com.nokia.eml.yang.openconfigNotificaions.buttonNotification.Update;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/openconfig-notificaions
 * generated to "src/com/nokia/eml/yang/openconfigNotificaions/button-notification"
 * <p>
 * See line 86 in
 * /root/nokia-yang/openconfig-notificaions.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class ButtonNotification extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "update".
     */
    public Update update = null;

    /**
     * Constructor for an empty ButtonNotification object.
     */
    public ButtonNotification() {
        super(OcNotify.NAMESPACE, "button-notification");
        setDefaultPrefix();
        setPrefix(OcNotify.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public ButtonNotification clone() {
        return (ButtonNotification)cloneContent(new ButtonNotification());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public ButtonNotification cloneShallow() {
        return (ButtonNotification)cloneShallowContent(new ButtonNotification());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "update",
        };
    }

    /* Access methods for container child: "update". */

    /**
     * Adds container entry "update", using an existing object.
     * @param update The object to add.
     * @return The added child.
     */
    public Update addUpdate(Update update) throws JNCException {
        this.update = update;
        insertChild(update, childrenNames());
        return update;
    }

    /**
     * Adds container entry "update".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Update addUpdate() throws JNCException {
        Update update = new Update();
        this.update = update;
        insertChild(update, childrenNames());
        return update;
    }

    /**
     * Deletes container entry "update".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteUpdate() throws JNCException {
        this.update = null;
        String path = "update";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Update) update = (Update)child;
    }

}

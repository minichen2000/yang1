/* 
 * @(#)Counters.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-notificaions", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigNotificaions.lldpNotification.update.lldp.interfaces.interface_.state;

import com.nokia.eml.yang.ietfYangTypes.Counter64;
import com.nokia.eml.yang.ietfYangTypes.DateAndTime;
import com.nokia.eml.yang.openconfigLldp.OcLldp;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;

import java.math.BigInteger;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/openconfig-notificaions
 * generated to "src/com/nokia/eml/yang/openconfigNotificaions/lldpNotification/update/lldp/interfaces/interface_/state/counters"
 * <p>
 * See line 501 in
 * /root/nokia-yang/lldp/openconfig-lldp.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class Counters extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Counters object.
     */
    public Counters() {
        super(OcLldp.NAMESPACE, "counters");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Counters clone() {
        return (Counters)cloneContent(new Counters());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Counters cloneShallow() {
        return (Counters)cloneShallowContent(new Counters());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "frame-in",
            "frame-out",
            "frame-error-in",
            "frame-discard",
            "tlv-discard",
            "tlv-unknown",
            "last-clear",
            "frame-error-out",
        };
    }

    /* Access methods for optional leaf child: "frame-in". */

    /**
     * Gets the value for child leaf "frame-in".
     * @return The value of the leaf.
     */
    public Counter64 getFrameInValue() throws JNCException {
        return (Counter64)getValue("frame-in");
    }

    /**
     * Sets the value for child leaf "frame-in",
     * using a JNC type value.
     * @param frameInValue The value to set.
     * @param frameInValue used during instantiation.
     */
    public void setFrameInValue(Counter64 frameInValue) throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "frame-in",
            frameInValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "frame-in",
     * using Java primitive values.
     * @param frameInValue used during instantiation.
     */
    public void setFrameInValue(BigInteger frameInValue) throws JNCException {
        setFrameInValue(new Counter64(frameInValue));
    }

    /**
     * Sets the value for child leaf "frame-in",
     * using a String value.
     * @param frameInValue used during instantiation.
     */
    public void setFrameInValue(String frameInValue) throws JNCException {
        setFrameInValue(new Counter64(frameInValue));
    }

    /**
     * Unsets the value for child leaf "frame-in".
     */
    public void unsetFrameInValue() throws JNCException {
        delete("frame-in");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "frame-in" leaf will not have a value.
     */
    public void addFrameIn() throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "frame-in",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "frame-in" with operation "replace".
     */
    public void markFrameInReplace() throws JNCException {
        markLeafReplace("frameIn");
    }

    /**
     * Marks the leaf "frame-in" with operation "merge".
     */
    public void markFrameInMerge() throws JNCException {
        markLeafMerge("frameIn");
    }

    /**
     * Marks the leaf "frame-in" with operation "create".
     */
    public void markFrameInCreate() throws JNCException {
        markLeafCreate("frameIn");
    }

    /**
     * Marks the leaf "frame-in" with operation "delete".
     */
    public void markFrameInDelete() throws JNCException {
        markLeafDelete("frameIn");
    }

    /* Access methods for optional leaf child: "frame-out". */

    /**
     * Gets the value for child leaf "frame-out".
     * @return The value of the leaf.
     */
    public Counter64 getFrameOutValue() throws JNCException {
        return (Counter64)getValue("frame-out");
    }

    /**
     * Sets the value for child leaf "frame-out",
     * using a JNC type value.
     * @param frameOutValue The value to set.
     * @param frameOutValue used during instantiation.
     */
    public void setFrameOutValue(Counter64 frameOutValue) throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "frame-out",
            frameOutValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "frame-out",
     * using Java primitive values.
     * @param frameOutValue used during instantiation.
     */
    public void setFrameOutValue(BigInteger frameOutValue) throws JNCException {
        setFrameOutValue(new Counter64(frameOutValue));
    }

    /**
     * Sets the value for child leaf "frame-out",
     * using a String value.
     * @param frameOutValue used during instantiation.
     */
    public void setFrameOutValue(String frameOutValue) throws JNCException {
        setFrameOutValue(new Counter64(frameOutValue));
    }

    /**
     * Unsets the value for child leaf "frame-out".
     */
    public void unsetFrameOutValue() throws JNCException {
        delete("frame-out");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "frame-out" leaf will not have a value.
     */
    public void addFrameOut() throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "frame-out",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "frame-out" with operation "replace".
     */
    public void markFrameOutReplace() throws JNCException {
        markLeafReplace("frameOut");
    }

    /**
     * Marks the leaf "frame-out" with operation "merge".
     */
    public void markFrameOutMerge() throws JNCException {
        markLeafMerge("frameOut");
    }

    /**
     * Marks the leaf "frame-out" with operation "create".
     */
    public void markFrameOutCreate() throws JNCException {
        markLeafCreate("frameOut");
    }

    /**
     * Marks the leaf "frame-out" with operation "delete".
     */
    public void markFrameOutDelete() throws JNCException {
        markLeafDelete("frameOut");
    }

    /* Access methods for optional leaf child: "frame-error-in". */

    /**
     * Gets the value for child leaf "frame-error-in".
     * @return The value of the leaf.
     */
    public Counter64 getFrameErrorInValue() throws JNCException {
        return (Counter64)getValue("frame-error-in");
    }

    /**
     * Sets the value for child leaf "frame-error-in",
     * using a JNC type value.
     * @param frameErrorInValue The value to set.
     * @param frameErrorInValue used during instantiation.
     */
    public void setFrameErrorInValue(Counter64 frameErrorInValue)
            throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "frame-error-in",
            frameErrorInValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "frame-error-in",
     * using Java primitive values.
     * @param frameErrorInValue used during instantiation.
     */
    public void setFrameErrorInValue(BigInteger frameErrorInValue)
            throws JNCException {
        setFrameErrorInValue(new Counter64(frameErrorInValue));
    }

    /**
     * Sets the value for child leaf "frame-error-in",
     * using a String value.
     * @param frameErrorInValue used during instantiation.
     */
    public void setFrameErrorInValue(String frameErrorInValue)
            throws JNCException {
        setFrameErrorInValue(new Counter64(frameErrorInValue));
    }

    /**
     * Unsets the value for child leaf "frame-error-in".
     */
    public void unsetFrameErrorInValue() throws JNCException {
        delete("frame-error-in");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "frame-error-in" leaf will not have a value.
     */
    public void addFrameErrorIn() throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "frame-error-in",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "frame-error-in" with operation "replace".
     */
    public void markFrameErrorInReplace() throws JNCException {
        markLeafReplace("frameErrorIn");
    }

    /**
     * Marks the leaf "frame-error-in" with operation "merge".
     */
    public void markFrameErrorInMerge() throws JNCException {
        markLeafMerge("frameErrorIn");
    }

    /**
     * Marks the leaf "frame-error-in" with operation "create".
     */
    public void markFrameErrorInCreate() throws JNCException {
        markLeafCreate("frameErrorIn");
    }

    /**
     * Marks the leaf "frame-error-in" with operation "delete".
     */
    public void markFrameErrorInDelete() throws JNCException {
        markLeafDelete("frameErrorIn");
    }

    /* Access methods for optional leaf child: "frame-discard". */

    /**
     * Gets the value for child leaf "frame-discard".
     * @return The value of the leaf.
     */
    public Counter64 getFrameDiscardValue() throws JNCException {
        return (Counter64)getValue("frame-discard");
    }

    /**
     * Sets the value for child leaf "frame-discard",
     * using a JNC type value.
     * @param frameDiscardValue The value to set.
     * @param frameDiscardValue used during instantiation.
     */
    public void setFrameDiscardValue(Counter64 frameDiscardValue)
            throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "frame-discard",
            frameDiscardValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "frame-discard",
     * using Java primitive values.
     * @param frameDiscardValue used during instantiation.
     */
    public void setFrameDiscardValue(BigInteger frameDiscardValue)
            throws JNCException {
        setFrameDiscardValue(new Counter64(frameDiscardValue));
    }

    /**
     * Sets the value for child leaf "frame-discard",
     * using a String value.
     * @param frameDiscardValue used during instantiation.
     */
    public void setFrameDiscardValue(String frameDiscardValue)
            throws JNCException {
        setFrameDiscardValue(new Counter64(frameDiscardValue));
    }

    /**
     * Unsets the value for child leaf "frame-discard".
     */
    public void unsetFrameDiscardValue() throws JNCException {
        delete("frame-discard");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "frame-discard" leaf will not have a value.
     */
    public void addFrameDiscard() throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "frame-discard",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "frame-discard" with operation "replace".
     */
    public void markFrameDiscardReplace() throws JNCException {
        markLeafReplace("frameDiscard");
    }

    /**
     * Marks the leaf "frame-discard" with operation "merge".
     */
    public void markFrameDiscardMerge() throws JNCException {
        markLeafMerge("frameDiscard");
    }

    /**
     * Marks the leaf "frame-discard" with operation "create".
     */
    public void markFrameDiscardCreate() throws JNCException {
        markLeafCreate("frameDiscard");
    }

    /**
     * Marks the leaf "frame-discard" with operation "delete".
     */
    public void markFrameDiscardDelete() throws JNCException {
        markLeafDelete("frameDiscard");
    }

    /* Access methods for optional leaf child: "tlv-discard". */

    /**
     * Gets the value for child leaf "tlv-discard".
     * @return The value of the leaf.
     */
    public Counter64 getTlvDiscardValue() throws JNCException {
        return (Counter64)getValue("tlv-discard");
    }

    /**
     * Sets the value for child leaf "tlv-discard",
     * using a JNC type value.
     * @param tlvDiscardValue The value to set.
     * @param tlvDiscardValue used during instantiation.
     */
    public void setTlvDiscardValue(Counter64 tlvDiscardValue)
            throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "tlv-discard",
            tlvDiscardValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tlv-discard",
     * using Java primitive values.
     * @param tlvDiscardValue used during instantiation.
     */
    public void setTlvDiscardValue(BigInteger tlvDiscardValue)
            throws JNCException {
        setTlvDiscardValue(new Counter64(tlvDiscardValue));
    }

    /**
     * Sets the value for child leaf "tlv-discard",
     * using a String value.
     * @param tlvDiscardValue used during instantiation.
     */
    public void setTlvDiscardValue(String tlvDiscardValue) throws JNCException {
        setTlvDiscardValue(new Counter64(tlvDiscardValue));
    }

    /**
     * Unsets the value for child leaf "tlv-discard".
     */
    public void unsetTlvDiscardValue() throws JNCException {
        delete("tlv-discard");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tlv-discard" leaf will not have a value.
     */
    public void addTlvDiscard() throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "tlv-discard",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tlv-discard" with operation "replace".
     */
    public void markTlvDiscardReplace() throws JNCException {
        markLeafReplace("tlvDiscard");
    }

    /**
     * Marks the leaf "tlv-discard" with operation "merge".
     */
    public void markTlvDiscardMerge() throws JNCException {
        markLeafMerge("tlvDiscard");
    }

    /**
     * Marks the leaf "tlv-discard" with operation "create".
     */
    public void markTlvDiscardCreate() throws JNCException {
        markLeafCreate("tlvDiscard");
    }

    /**
     * Marks the leaf "tlv-discard" with operation "delete".
     */
    public void markTlvDiscardDelete() throws JNCException {
        markLeafDelete("tlvDiscard");
    }

    /* Access methods for optional leaf child: "tlv-unknown". */

    /**
     * Gets the value for child leaf "tlv-unknown".
     * @return The value of the leaf.
     */
    public Counter64 getTlvUnknownValue() throws JNCException {
        return (Counter64)getValue("tlv-unknown");
    }

    /**
     * Sets the value for child leaf "tlv-unknown",
     * using a JNC type value.
     * @param tlvUnknownValue The value to set.
     * @param tlvUnknownValue used during instantiation.
     */
    public void setTlvUnknownValue(Counter64 tlvUnknownValue)
            throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "tlv-unknown",
            tlvUnknownValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "tlv-unknown",
     * using Java primitive values.
     * @param tlvUnknownValue used during instantiation.
     */
    public void setTlvUnknownValue(BigInteger tlvUnknownValue)
            throws JNCException {
        setTlvUnknownValue(new Counter64(tlvUnknownValue));
    }

    /**
     * Sets the value for child leaf "tlv-unknown",
     * using a String value.
     * @param tlvUnknownValue used during instantiation.
     */
    public void setTlvUnknownValue(String tlvUnknownValue) throws JNCException {
        setTlvUnknownValue(new Counter64(tlvUnknownValue));
    }

    /**
     * Unsets the value for child leaf "tlv-unknown".
     */
    public void unsetTlvUnknownValue() throws JNCException {
        delete("tlv-unknown");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "tlv-unknown" leaf will not have a value.
     */
    public void addTlvUnknown() throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "tlv-unknown",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "tlv-unknown" with operation "replace".
     */
    public void markTlvUnknownReplace() throws JNCException {
        markLeafReplace("tlvUnknown");
    }

    /**
     * Marks the leaf "tlv-unknown" with operation "merge".
     */
    public void markTlvUnknownMerge() throws JNCException {
        markLeafMerge("tlvUnknown");
    }

    /**
     * Marks the leaf "tlv-unknown" with operation "create".
     */
    public void markTlvUnknownCreate() throws JNCException {
        markLeafCreate("tlvUnknown");
    }

    /**
     * Marks the leaf "tlv-unknown" with operation "delete".
     */
    public void markTlvUnknownDelete() throws JNCException {
        markLeafDelete("tlvUnknown");
    }

    /* Access methods for optional leaf child: "last-clear". */

    /**
     * Gets the value for child leaf "last-clear".
     * @return The value of the leaf.
     */
    public DateAndTime getLastClearValue() throws JNCException {
        return (DateAndTime)getValue("last-clear");
    }

    /**
     * Sets the value for child leaf "last-clear",
     * using a JNC type value.
     * @param lastClearValue The value to set.
     * @param lastClearValue used during instantiation.
     */
    public void setLastClearValue(DateAndTime lastClearValue)
            throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "last-clear",
            lastClearValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "last-clear",
     * using a String value.
     * @param lastClearValue used during instantiation.
     */
    public void setLastClearValue(String lastClearValue) throws JNCException {
        setLastClearValue(new DateAndTime(lastClearValue));
    }

    /**
     * Unsets the value for child leaf "last-clear".
     */
    public void unsetLastClearValue() throws JNCException {
        delete("last-clear");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "last-clear" leaf will not have a value.
     */
    public void addLastClear() throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "last-clear",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "last-clear" with operation "replace".
     */
    public void markLastClearReplace() throws JNCException {
        markLeafReplace("lastClear");
    }

    /**
     * Marks the leaf "last-clear" with operation "merge".
     */
    public void markLastClearMerge() throws JNCException {
        markLeafMerge("lastClear");
    }

    /**
     * Marks the leaf "last-clear" with operation "create".
     */
    public void markLastClearCreate() throws JNCException {
        markLeafCreate("lastClear");
    }

    /**
     * Marks the leaf "last-clear" with operation "delete".
     */
    public void markLastClearDelete() throws JNCException {
        markLeafDelete("lastClear");
    }

    /* Access methods for optional leaf child: "frame-error-out". */

    /**
     * Gets the value for child leaf "frame-error-out".
     * @return The value of the leaf.
     */
    public Counter64 getFrameErrorOutValue() throws JNCException {
        return (Counter64)getValue("frame-error-out");
    }

    /**
     * Sets the value for child leaf "frame-error-out",
     * using a JNC type value.
     * @param frameErrorOutValue The value to set.
     * @param frameErrorOutValue used during instantiation.
     */
    public void setFrameErrorOutValue(Counter64 frameErrorOutValue)
            throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "frame-error-out",
            frameErrorOutValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "frame-error-out",
     * using Java primitive values.
     * @param frameErrorOutValue used during instantiation.
     */
    public void setFrameErrorOutValue(BigInteger frameErrorOutValue)
            throws JNCException {
        setFrameErrorOutValue(new Counter64(frameErrorOutValue));
    }

    /**
     * Sets the value for child leaf "frame-error-out",
     * using a String value.
     * @param frameErrorOutValue used during instantiation.
     */
    public void setFrameErrorOutValue(String frameErrorOutValue)
            throws JNCException {
        setFrameErrorOutValue(new Counter64(frameErrorOutValue));
    }

    /**
     * Unsets the value for child leaf "frame-error-out".
     */
    public void unsetFrameErrorOutValue() throws JNCException {
        delete("frame-error-out");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "frame-error-out" leaf will not have a value.
     */
    public void addFrameErrorOut() throws JNCException {
        setLeafValue(OcLldp.NAMESPACE,
            "frame-error-out",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "frame-error-out" with operation "replace".
     */
    public void markFrameErrorOutReplace() throws JNCException {
        markLeafReplace("frameErrorOut");
    }

    /**
     * Marks the leaf "frame-error-out" with operation "merge".
     */
    public void markFrameErrorOutMerge() throws JNCException {
        markLeafMerge("frameErrorOut");
    }

    /**
     * Marks the leaf "frame-error-out" with operation "create".
     */
    public void markFrameErrorOutCreate() throws JNCException {
        markLeafCreate("frameErrorOut");
    }

    /**
     * Marks the leaf "frame-error-out" with operation "delete".
     */
    public void markFrameErrorOutDelete() throws JNCException {
        markLeafDelete("frameErrorOut");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

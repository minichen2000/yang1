/* 
 * @(#)Channel.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-notificaions", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigNotificaions.terminalDeviceNotification.update.terminalDevice.logicalChannels;

import com.nokia.eml.yang.openconfigNotificaions.terminalDeviceNotification.update.terminalDevice.logicalChannels.channel.Config;
import com.nokia.eml.yang.openconfigNotificaions.terminalDeviceNotification.update.terminalDevice.logicalChannels.channel.Ethernet;
import com.nokia.eml.yang.openconfigNotificaions.terminalDeviceNotification.update.terminalDevice.logicalChannels.channel.Ingress;
import com.nokia.eml.yang.openconfigNotificaions.terminalDeviceNotification.update.terminalDevice.logicalChannels.channel.LogicalChannelAssignments;
import com.nokia.eml.yang.openconfigNotificaions.terminalDeviceNotification.update.terminalDevice.logicalChannels.channel.Otn;
import com.nokia.eml.yang.openconfigNotificaions.terminalDeviceNotification.update.terminalDevice.logicalChannels.channel.State;
import com.nokia.eml.yang.openconfigTerminalDevice.OcOptTerm;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt32;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/openconfig-notificaions
 * generated to "src/com/nokia/eml/yang/openconfigNotificaions/terminalDeviceNotification/update/terminalDevice/logicalChannels/channel"
 * <p>
 * See line 793 in
 * /root/nokia-yang/optical-transport/openconfig-terminal-device.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class Channel extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "config".
     */
    public Config config = null;

    /**
     * Field for child container "state".
     */
    public State state = null;

    /**
     * Field for child container "otn".
     */
    public Otn otn = null;

    /**
     * Field for child container "ethernet".
     */
    public Ethernet ethernet = null;

    /**
     * Field for child container "ingress".
     */
    public Ingress ingress = null;

    /**
     * Field for child container "logical-channel-assignments".
     */
    public LogicalChannelAssignments logicalChannelAssignments = null;

    /**
     * Constructor for an empty Channel object.
     */
    public Channel() {
        super(OcOptTerm.NAMESPACE, "channel");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Channel clone() {
        return (Channel)cloneContent(new Channel());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Channel cloneShallow() {
        return (Channel)cloneShallowContent(new Channel());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "index",
            "config",
            "state",
            "otn",
            "ethernet",
            "ingress",
            "logical-channel-assignments",
        };
    }

    /* Access methods for leaf child: "index". */

    /**
     * Gets the value for child leaf "index".
     * @return The value of the leaf.
     */
    public YangUInt32 getIndexValue() throws JNCException {
        return (YangUInt32)getValue("index");
    }

    /**
     * Sets the value for child leaf "index",
     * using instance of generated typedef class.
     * @param indexValue The value to set.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(YangUInt32 indexValue) throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "index",
            indexValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "index",
     * using Java primitive values.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(long indexValue) throws JNCException {
        setIndexValue(new YangUInt32(indexValue));
    }

    /**
     * Sets the value for child leaf "index",
     * using a String value.
     * @param indexValue used during instantiation.
     */
    public void setIndexValue(String indexValue) throws JNCException {
        setIndexValue(new YangUInt32(indexValue));
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "index" leaf will not have a value.
     */
    public void addIndex() throws JNCException {
        setLeafValue(OcOptTerm.NAMESPACE,
            "index",
            null,
            childrenNames());
    }

    /* Access methods for container child: "config". */

    /**
     * Adds container entry "config", using an existing object.
     * @param config The object to add.
     * @return The added child.
     */
    public Config addConfig(Config config) throws JNCException {
        this.config = config;
        insertChild(config, childrenNames());
        return config;
    }

    /**
     * Adds container entry "config".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Config addConfig() throws JNCException {
        Config config = new Config();
        this.config = config;
        insertChild(config, childrenNames());
        return config;
    }

    /**
     * Deletes container entry "config".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteConfig() throws JNCException {
        this.config = null;
        String path = "config";
        return delete(path);
    }

    /* Access methods for container child: "state". */

    /**
     * Adds container entry "state", using an existing object.
     * @param state The object to add.
     * @return The added child.
     */
    public State addState(State state) throws JNCException {
        this.state = state;
        insertChild(state, childrenNames());
        return state;
    }

    /**
     * Adds container entry "state".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public State addState() throws JNCException {
        State state = new State();
        this.state = state;
        insertChild(state, childrenNames());
        return state;
    }

    /**
     * Deletes container entry "state".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteState() throws JNCException {
        this.state = null;
        String path = "state";
        return delete(path);
    }

    /* Access methods for container child: "otn". */

    /**
     * Adds container entry "otn", using an existing object.
     * @param otn The object to add.
     * @return The added child.
     */
    public Otn addOtn(Otn otn) throws JNCException {
        this.otn = otn;
        insertChild(otn, childrenNames());
        return otn;
    }

    /**
     * Adds container entry "otn".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Otn addOtn() throws JNCException {
        Otn otn = new Otn();
        this.otn = otn;
        insertChild(otn, childrenNames());
        return otn;
    }

    /**
     * Deletes container entry "otn".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteOtn() throws JNCException {
        this.otn = null;
        String path = "otn";
        return delete(path);
    }

    /* Access methods for container child: "ethernet". */

    /**
     * Adds container entry "ethernet", using an existing object.
     * @param ethernet The object to add.
     * @return The added child.
     */
    public Ethernet addEthernet(Ethernet ethernet) throws JNCException {
        this.ethernet = ethernet;
        insertChild(ethernet, childrenNames());
        return ethernet;
    }

    /**
     * Adds container entry "ethernet".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Ethernet addEthernet() throws JNCException {
        Ethernet ethernet = new Ethernet();
        this.ethernet = ethernet;
        insertChild(ethernet, childrenNames());
        return ethernet;
    }

    /**
     * Deletes container entry "ethernet".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteEthernet() throws JNCException {
        this.ethernet = null;
        String path = "ethernet";
        return delete(path);
    }

    /* Access methods for container child: "ingress". */

    /**
     * Adds container entry "ingress", using an existing object.
     * @param ingress The object to add.
     * @return The added child.
     */
    public Ingress addIngress(Ingress ingress) throws JNCException {
        this.ingress = ingress;
        insertChild(ingress, childrenNames());
        return ingress;
    }

    /**
     * Adds container entry "ingress".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Ingress addIngress() throws JNCException {
        Ingress ingress = new Ingress();
        this.ingress = ingress;
        insertChild(ingress, childrenNames());
        return ingress;
    }

    /**
     * Deletes container entry "ingress".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteIngress() throws JNCException {
        this.ingress = null;
        String path = "ingress";
        return delete(path);
    }

    /* Access methods for container child: "logical-channel-assignments". */

    /**
     * Adds container entry "logicalChannelAssignments", using an existing object.
     * @param logicalChannelAssignments The object to add.
     * @return The added child.
     */
    public LogicalChannelAssignments addLogicalChannelAssignments(LogicalChannelAssignments logicalChannelAssignments)
            throws JNCException {
        this.logicalChannelAssignments = logicalChannelAssignments;
        insertChild(logicalChannelAssignments, childrenNames());
        return logicalChannelAssignments;
    }

    /**
     * Adds container entry "logicalChannelAssignments".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public LogicalChannelAssignments addLogicalChannelAssignments()
            throws JNCException {
        LogicalChannelAssignments logicalChannelAssignments = new LogicalChannelAssignments();
        this.logicalChannelAssignments = logicalChannelAssignments;
        insertChild(logicalChannelAssignments, childrenNames());
        return logicalChannelAssignments;
    }

    /**
     * Deletes container entry "logicalChannelAssignments".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteLogicalChannelAssignments() throws JNCException {
        this.logicalChannelAssignments = null;
        String path = "logical-channel-assignments";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Config) config = (Config)child;
        else if (child instanceof State) state = (State)child;
        else if (child instanceof Otn) otn = (Otn)child;
        else if (child instanceof Ethernet) ethernet = (Ethernet)child;
        else if (child instanceof Ingress) ingress = (Ingress)child;
        else if (child instanceof LogicalChannelAssignments) logicalChannelAssignments = (LogicalChannelAssignments)child;
    }

}

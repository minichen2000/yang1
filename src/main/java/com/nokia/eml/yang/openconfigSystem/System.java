/* 
 * @(#)System.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-system", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigSystem;

import com.nokia.eml.yang.openconfigSystem.OcSys;
import com.nokia.eml.yang.openconfigSystem.system.Alarms;
import com.nokia.eml.yang.openconfigSystem.system.Clock;
import com.nokia.eml.yang.openconfigSystem.system.Config;
import com.nokia.eml.yang.openconfigSystem.system.Cpus;
import com.nokia.eml.yang.openconfigSystem.system.Dns;
import com.nokia.eml.yang.openconfigSystem.system.Logging;
import com.nokia.eml.yang.openconfigSystem.system.Memory;
import com.nokia.eml.yang.openconfigSystem.system.Ntp;
import com.nokia.eml.yang.openconfigSystem.system.Processes;
import com.nokia.eml.yang.openconfigSystem.system.SshServer;
import com.nokia.eml.yang.openconfigSystem.system.State;
import com.nokia.eml.yang.openconfigSystem.system.TelnetServer;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.NodeSet;
import com.tailf.jnc.YangElement;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/system
 * generated to "src/com/nokia/eml/yang/openconfigSystem/system"
 * <p>
 * See line 950 in
 * /root/nokia-yang/system/openconfig-system.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class System extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Field for child container "config".
     */
    public Config config = null;

    /**
     * Field for child container "state".
     */
    public State state = null;

    /**
     * Field for child container "clock".
     */
    public Clock clock = null;

    /**
     * Field for child container "dns".
     */
    public Dns dns = null;

    /**
     * Field for child container "ntp".
     */
    public Ntp ntp = null;

    /**
     * Field for child container "ssh-server".
     */
    public SshServer sshServer = null;

    /**
     * Field for child container "telnet-server".
     */
    public TelnetServer telnetServer = null;

    /**
     * Field for child container "logging".
     */
    public Logging logging = null;

    /**
     * Field for child container "memory".
     */
    public Memory memory = null;

    /**
     * Field for child container "cpus".
     */
    public Cpus cpus = null;

    /**
     * Field for child container "processes".
     */
    public Processes processes = null;

    /**
     * Field for child container "alarms".
     */
    public Alarms alarms = null;

    /**
     * Constructor for an empty System object.
     */
    public System() {
        super(OcSys.NAMESPACE, "system");
        setDefaultPrefix();
        setPrefix(OcSys.PREFIX);
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public System clone() {
        return (System)cloneContent(new System());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public System cloneShallow() {
        return (System)cloneShallowContent(new System());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "config",
            "state",
            "clock",
            "dns",
            "ntp",
            "ssh-server",
            "telnet-server",
            "logging",
            "memory",
            "cpus",
            "processes",
            "alarms",
        };
    }

    /* Access methods for container child: "config". */

    /**
     * Adds container entry "config", using an existing object.
     * @param config The object to add.
     * @return The added child.
     */
    public Config addConfig(Config config) throws JNCException {
        this.config = config;
        insertChild(config, childrenNames());
        return config;
    }

    /**
     * Adds container entry "config".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Config addConfig() throws JNCException {
        Config config = new Config();
        this.config = config;
        insertChild(config, childrenNames());
        return config;
    }

    /**
     * Deletes container entry "config".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteConfig() throws JNCException {
        this.config = null;
        String path = "config";
        return delete(path);
    }

    /* Access methods for container child: "state". */

    /**
     * Adds container entry "state", using an existing object.
     * @param state The object to add.
     * @return The added child.
     */
    public State addState(State state) throws JNCException {
        this.state = state;
        insertChild(state, childrenNames());
        return state;
    }

    /**
     * Adds container entry "state".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public State addState() throws JNCException {
        State state = new State();
        this.state = state;
        insertChild(state, childrenNames());
        return state;
    }

    /**
     * Deletes container entry "state".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteState() throws JNCException {
        this.state = null;
        String path = "state";
        return delete(path);
    }

    /* Access methods for container child: "clock". */

    /**
     * Adds container entry "clock", using an existing object.
     * @param clock The object to add.
     * @return The added child.
     */
    public Clock addClock(Clock clock) throws JNCException {
        this.clock = clock;
        insertChild(clock, childrenNames());
        return clock;
    }

    /**
     * Adds container entry "clock".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Clock addClock() throws JNCException {
        Clock clock = new Clock();
        this.clock = clock;
        insertChild(clock, childrenNames());
        return clock;
    }

    /**
     * Deletes container entry "clock".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteClock() throws JNCException {
        this.clock = null;
        String path = "clock";
        return delete(path);
    }

    /* Access methods for container child: "dns". */

    /**
     * Adds container entry "dns", using an existing object.
     * @param dns The object to add.
     * @return The added child.
     */
    public Dns addDns(Dns dns) throws JNCException {
        this.dns = dns;
        insertChild(dns, childrenNames());
        return dns;
    }

    /**
     * Adds container entry "dns".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Dns addDns() throws JNCException {
        Dns dns = new Dns();
        this.dns = dns;
        insertChild(dns, childrenNames());
        return dns;
    }

    /**
     * Deletes container entry "dns".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteDns() throws JNCException {
        this.dns = null;
        String path = "dns";
        return delete(path);
    }

    /* Access methods for container child: "ntp". */

    /**
     * Adds container entry "ntp", using an existing object.
     * @param ntp The object to add.
     * @return The added child.
     */
    public Ntp addNtp(Ntp ntp) throws JNCException {
        this.ntp = ntp;
        insertChild(ntp, childrenNames());
        return ntp;
    }

    /**
     * Adds container entry "ntp".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Ntp addNtp() throws JNCException {
        Ntp ntp = new Ntp();
        this.ntp = ntp;
        insertChild(ntp, childrenNames());
        return ntp;
    }

    /**
     * Deletes container entry "ntp".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteNtp() throws JNCException {
        this.ntp = null;
        String path = "ntp";
        return delete(path);
    }

    /* Access methods for container child: "ssh-server". */

    /**
     * Adds container entry "sshServer", using an existing object.
     * @param sshServer The object to add.
     * @return The added child.
     */
    public SshServer addSshServer(SshServer sshServer) throws JNCException {
        this.sshServer = sshServer;
        insertChild(sshServer, childrenNames());
        return sshServer;
    }

    /**
     * Adds container entry "sshServer".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public SshServer addSshServer() throws JNCException {
        SshServer sshServer = new SshServer();
        this.sshServer = sshServer;
        insertChild(sshServer, childrenNames());
        return sshServer;
    }

    /**
     * Deletes container entry "sshServer".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteSshServer() throws JNCException {
        this.sshServer = null;
        String path = "ssh-server";
        return delete(path);
    }

    /* Access methods for container child: "telnet-server". */

    /**
     * Adds container entry "telnetServer", using an existing object.
     * @param telnetServer The object to add.
     * @return The added child.
     */
    public TelnetServer addTelnetServer(TelnetServer telnetServer)
            throws JNCException {
        this.telnetServer = telnetServer;
        insertChild(telnetServer, childrenNames());
        return telnetServer;
    }

    /**
     * Adds container entry "telnetServer".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public TelnetServer addTelnetServer() throws JNCException {
        TelnetServer telnetServer = new TelnetServer();
        this.telnetServer = telnetServer;
        insertChild(telnetServer, childrenNames());
        return telnetServer;
    }

    /**
     * Deletes container entry "telnetServer".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteTelnetServer() throws JNCException {
        this.telnetServer = null;
        String path = "telnet-server";
        return delete(path);
    }

    /* Access methods for container child: "logging". */

    /**
     * Adds container entry "logging", using an existing object.
     * @param logging The object to add.
     * @return The added child.
     */
    public Logging addLogging(Logging logging) throws JNCException {
        this.logging = logging;
        insertChild(logging, childrenNames());
        return logging;
    }

    /**
     * Adds container entry "logging".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Logging addLogging() throws JNCException {
        Logging logging = new Logging();
        this.logging = logging;
        insertChild(logging, childrenNames());
        return logging;
    }

    /**
     * Deletes container entry "logging".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteLogging() throws JNCException {
        this.logging = null;
        String path = "logging";
        return delete(path);
    }

    /* Access methods for container child: "memory". */

    /**
     * Adds container entry "memory", using an existing object.
     * @param memory The object to add.
     * @return The added child.
     */
    public Memory addMemory(Memory memory) throws JNCException {
        this.memory = memory;
        insertChild(memory, childrenNames());
        return memory;
    }

    /**
     * Adds container entry "memory".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Memory addMemory() throws JNCException {
        Memory memory = new Memory();
        this.memory = memory;
        insertChild(memory, childrenNames());
        return memory;
    }

    /**
     * Deletes container entry "memory".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteMemory() throws JNCException {
        this.memory = null;
        String path = "memory";
        return delete(path);
    }

    /* Access methods for container child: "cpus". */

    /**
     * Adds container entry "cpus", using an existing object.
     * @param cpus The object to add.
     * @return The added child.
     */
    public Cpus addCpus(Cpus cpus) throws JNCException {
        this.cpus = cpus;
        insertChild(cpus, childrenNames());
        return cpus;
    }

    /**
     * Adds container entry "cpus".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Cpus addCpus() throws JNCException {
        Cpus cpus = new Cpus();
        this.cpus = cpus;
        insertChild(cpus, childrenNames());
        return cpus;
    }

    /**
     * Deletes container entry "cpus".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteCpus() throws JNCException {
        this.cpus = null;
        String path = "cpus";
        return delete(path);
    }

    /* Access methods for container child: "processes". */

    /**
     * Adds container entry "processes", using an existing object.
     * @param processes The object to add.
     * @return The added child.
     */
    public Processes addProcesses(Processes processes) throws JNCException {
        this.processes = processes;
        insertChild(processes, childrenNames());
        return processes;
    }

    /**
     * Adds container entry "processes".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Processes addProcesses() throws JNCException {
        Processes processes = new Processes();
        this.processes = processes;
        insertChild(processes, childrenNames());
        return processes;
    }

    /**
     * Deletes container entry "processes".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteProcesses() throws JNCException {
        this.processes = null;
        String path = "processes";
        return delete(path);
    }

    /* Access methods for container child: "alarms". */

    /**
     * Adds container entry "alarms", using an existing object.
     * @param alarms The object to add.
     * @return The added child.
     */
    public Alarms addAlarms(Alarms alarms) throws JNCException {
        this.alarms = alarms;
        insertChild(alarms, childrenNames());
        return alarms;
    }

    /**
     * Adds container entry "alarms".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public Alarms addAlarms() throws JNCException {
        Alarms alarms = new Alarms();
        this.alarms = alarms;
        insertChild(alarms, childrenNames());
        return alarms;
    }

    /**
     * Deletes container entry "alarms".
     * @return An array of the deleted element nodes.
     */
    public NodeSet deleteAlarms() throws JNCException {
        this.alarms = null;
        String path = "alarms";
        return delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
        if (child instanceof Config) config = (Config)child;
        else if (child instanceof State) state = (State)child;
        else if (child instanceof Clock) clock = (Clock)child;
        else if (child instanceof Dns) dns = (Dns)child;
        else if (child instanceof Ntp) ntp = (Ntp)child;
        else if (child instanceof SshServer) sshServer = (SshServer)child;
        else if (child instanceof TelnetServer) telnetServer = (TelnetServer)child;
        else if (child instanceof Logging) logging = (Logging)child;
        else if (child instanceof Memory) memory = (Memory)child;
        else if (child instanceof Cpus) cpus = (Cpus)child;
        else if (child instanceof Processes) processes = (Processes)child;
        else if (child instanceof Alarms) alarms = (Alarms)child;
    }

}

/* 
 * @(#)NtpKeys.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "openconfig-system", revision: "2018-06-06".
 */

package com.nokia.eml.yang.openconfigSystem.system.ntp;

import com.nokia.eml.yang.openconfigSystem.OcSys;
import com.nokia.eml.yang.openconfigSystem.system.ntp.ntpKeys.NtpKey;
import com.tailf.jnc.Element;
import com.tailf.jnc.ElementChildrenIterator;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;
import com.tailf.jnc.YangUInt16;

/**
 * This class represents an element from 
 * the namespace http://openconfig.net/yang/system
 * generated to "src/com/nokia/eml/yang/openconfigSystem/system/ntp/ntp-keys"
 * <p>
 * See line 669 in
 * /root/nokia-yang/system/openconfig-system.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class NtpKeys extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty NtpKeys object.
     */
    public NtpKeys() {
        super(OcSys.NAMESPACE, "ntp-keys");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public NtpKeys clone() {
        return (NtpKeys)cloneContent(new NtpKeys());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public NtpKeys cloneShallow() {
        return (NtpKeys)cloneShallowContent(new NtpKeys());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "ntp-key",
        };
    }

    /* Access methods for list child: "ntp-key". */

    /**
     * Gets list entry "ntpKey", with specified keys.
     * @param keyIdValue Key argument of child.
     */
    public NtpKey getNtpKey(YangUInt16 keyIdValue) throws JNCException {
        String path = "ntp-key[keyId='" + keyIdValue + "']";
        return (NtpKey)searchOne(path);
    }

    /**
     * Gets list entry "ntpKey", with specified keys.
     * The keys are specified as strings.
     * @param keyIdValue Key argument of child.
     */
    public NtpKey getNtpKey(String keyIdValue) throws JNCException {
        String path = "ntp-key[keyId='" + keyIdValue + "']";
        return (NtpKey)searchOne(path);
    }

    /**
     * Iterator method for the list "ntp-key".
     * @return An iterator for the list.
     */
    public ElementChildrenIterator ntpKeyIterator() {
        return new ElementChildrenIterator(children, "ntp-key");
    }

    /**
     * Adds list entry "ntpKey", using an existing object.
     * @param ntpKey The object to add.
     * @return The added child.
     */
    public NtpKey addNtpKey(NtpKey ntpKey) throws JNCException {
        insertChild(ntpKey, childrenNames());
        return ntpKey;
    }

    /**
     * Adds list entry "ntpKey", with specified keys.
     * @param keyIdValue Key argument of child.
     * @return The added child.
     */
    public NtpKey addNtpKey(YangUInt16 keyIdValue) throws JNCException {
        NtpKey ntpKey = new NtpKey(keyIdValue);
        return addNtpKey(ntpKey);
    }

    /**
     * Adds list entry "ntpKey", with specified keys.
     * The keys are specified as strings.
     * @param keyIdValue Key argument of child.
     * @return The added child.
     */
    public NtpKey addNtpKey(String keyIdValue) throws JNCException {
        NtpKey ntpKey = new NtpKey(keyIdValue);
        return addNtpKey(ntpKey);
    }

    /**
     * Adds list entry "ntpKey".
     * This method is used for creating subtree filters.
     * @return The added child.
     */
    public NtpKey addNtpKey() throws JNCException {
        NtpKey ntpKey = new NtpKey();
        insertChild(ntpKey, childrenNames());
        return ntpKey;
    }

    /**
     * Deletes list entry "ntpKey", with specified keys.
     * @param keyIdValue Key argument of child.
     */
    public void deleteNtpKey(YangUInt16 keyIdValue) throws JNCException {
        String path = "ntp-key[keyId='" + keyIdValue + "']";
        delete(path);
    }

    /**
     * Deletes list entry "ntpKey", with specified keys.
     * The keys are specified as strings.
     * @param keyIdValue Key argument of child.
     */
    public void deleteNtpKey(String keyIdValue) throws JNCException {
        String path = "ntp-key[keyId='" + keyIdValue + "']";
        delete(path);
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}

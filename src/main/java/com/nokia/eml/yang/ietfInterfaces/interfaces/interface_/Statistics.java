/* 
 * @(#)Statistics.java        1.0 15/06/18
 *
 * This file has been auto-generated by JNC, the
 * Java output format plug-in of pyang.
 * Origin: module "ietf-interfaces", revision: "2018-02-20".
 */

package com.nokia.eml.yang.ietfInterfaces.interfaces.interface_;

import com.nokia.eml.yang.ietfInterfaces.JIf;
import com.nokia.eml.yang.ietfYangTypes.Counter32;
import com.nokia.eml.yang.ietfYangTypes.Counter64;
import com.nokia.eml.yang.ietfYangTypes.DateAndTime;
import com.tailf.jnc.Element;
import com.tailf.jnc.JNCException;
import com.tailf.jnc.YangElement;

import java.math.BigInteger;

/**
 * This class represents an element from 
 * the namespace urn:ietf:params:xml:ns:yang:ietf-interfaces
 * generated to "src/com/nokia/eml/yang/ietfInterfaces/interfaces/interface_/statistics"
 * <p>
 * See line 409 in
 * /root/pyang-pyang-1.7.5/modules/ietf/ietf-interfaces.yang
 *
 * @version 1.0 2018-06-15
 * @author Auto Generated
 */
public class Statistics extends YangElement {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor for an empty Statistics object.
     */
    public Statistics() {
        super(JIf.NAMESPACE, "statistics");
    }

    /**
     * Clones this object, returning an exact copy.
     * @return A clone of the object.
     */
    public Statistics clone() {
        return (Statistics)cloneContent(new Statistics());
    }

    /**
     * Clones this object, returning a shallow copy.
     * @return A clone of the object. Children are not included.
     */
    public Statistics cloneShallow() {
        return (Statistics)cloneShallowContent(new Statistics());
    }

    /**
     * @return An array with the identifiers of any key children
     */
    public String[] keyNames() {
        return null;
    }

    /**
     * @return An array with the identifiers of any children, in order.
     */
    public String[] childrenNames() {
        return new String[] {
            "discontinuity-time",
            "in-octets",
            "in-unicast-pkts",
            "in-broadcast-pkts",
            "in-multicast-pkts",
            "in-discards",
            "in-errors",
            "in-unknown-protos",
            "out-octets",
            "out-unicast-pkts",
            "out-broadcast-pkts",
            "out-multicast-pkts",
            "out-discards",
            "out-errors",
        };
    }

    /* Access methods for optional leaf child: "discontinuity-time". */

    /**
     * Gets the value for child leaf "discontinuity-time".
     * @return The value of the leaf.
     */
    public DateAndTime getDiscontinuityTimeValue() throws JNCException {
        return (DateAndTime)getValue("discontinuity-time");
    }

    /**
     * Sets the value for child leaf "discontinuity-time",
     * using a JNC type value.
     * @param discontinuityTimeValue The value to set.
     * @param discontinuityTimeValue used during instantiation.
     */
    public void setDiscontinuityTimeValue(DateAndTime discontinuityTimeValue)
            throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "discontinuity-time",
            discontinuityTimeValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "discontinuity-time",
     * using a String value.
     * @param discontinuityTimeValue used during instantiation.
     */
    public void setDiscontinuityTimeValue(String discontinuityTimeValue)
            throws JNCException {
        setDiscontinuityTimeValue(new DateAndTime(discontinuityTimeValue));
    }

    /**
     * Unsets the value for child leaf "discontinuity-time".
     */
    public void unsetDiscontinuityTimeValue() throws JNCException {
        delete("discontinuity-time");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "discontinuity-time" leaf will not have a value.
     */
    public void addDiscontinuityTime() throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "discontinuity-time",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "discontinuity-time" with operation "replace".
     */
    public void markDiscontinuityTimeReplace() throws JNCException {
        markLeafReplace("discontinuityTime");
    }

    /**
     * Marks the leaf "discontinuity-time" with operation "merge".
     */
    public void markDiscontinuityTimeMerge() throws JNCException {
        markLeafMerge("discontinuityTime");
    }

    /**
     * Marks the leaf "discontinuity-time" with operation "create".
     */
    public void markDiscontinuityTimeCreate() throws JNCException {
        markLeafCreate("discontinuityTime");
    }

    /**
     * Marks the leaf "discontinuity-time" with operation "delete".
     */
    public void markDiscontinuityTimeDelete() throws JNCException {
        markLeafDelete("discontinuityTime");
    }

    /* Access methods for optional leaf child: "in-octets". */

    /**
     * Gets the value for child leaf "in-octets".
     * @return The value of the leaf.
     */
    public Counter64 getInOctetsValue() throws JNCException {
        return (Counter64)getValue("in-octets");
    }

    /**
     * Sets the value for child leaf "in-octets",
     * using a JNC type value.
     * @param inOctetsValue The value to set.
     * @param inOctetsValue used during instantiation.
     */
    public void setInOctetsValue(Counter64 inOctetsValue) throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "in-octets",
            inOctetsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-octets",
     * using Java primitive values.
     * @param inOctetsValue used during instantiation.
     */
    public void setInOctetsValue(BigInteger inOctetsValue) throws JNCException {
        setInOctetsValue(new Counter64(inOctetsValue));
    }

    /**
     * Sets the value for child leaf "in-octets",
     * using a String value.
     * @param inOctetsValue used during instantiation.
     */
    public void setInOctetsValue(String inOctetsValue) throws JNCException {
        setInOctetsValue(new Counter64(inOctetsValue));
    }

    /**
     * Unsets the value for child leaf "in-octets".
     */
    public void unsetInOctetsValue() throws JNCException {
        delete("in-octets");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-octets" leaf will not have a value.
     */
    public void addInOctets() throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "in-octets",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-octets" with operation "replace".
     */
    public void markInOctetsReplace() throws JNCException {
        markLeafReplace("inOctets");
    }

    /**
     * Marks the leaf "in-octets" with operation "merge".
     */
    public void markInOctetsMerge() throws JNCException {
        markLeafMerge("inOctets");
    }

    /**
     * Marks the leaf "in-octets" with operation "create".
     */
    public void markInOctetsCreate() throws JNCException {
        markLeafCreate("inOctets");
    }

    /**
     * Marks the leaf "in-octets" with operation "delete".
     */
    public void markInOctetsDelete() throws JNCException {
        markLeafDelete("inOctets");
    }

    /* Access methods for optional leaf child: "in-unicast-pkts". */

    /**
     * Gets the value for child leaf "in-unicast-pkts".
     * @return The value of the leaf.
     */
    public Counter64 getInUnicastPktsValue() throws JNCException {
        return (Counter64)getValue("in-unicast-pkts");
    }

    /**
     * Sets the value for child leaf "in-unicast-pkts",
     * using a JNC type value.
     * @param inUnicastPktsValue The value to set.
     * @param inUnicastPktsValue used during instantiation.
     */
    public void setInUnicastPktsValue(Counter64 inUnicastPktsValue)
            throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "in-unicast-pkts",
            inUnicastPktsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-unicast-pkts",
     * using Java primitive values.
     * @param inUnicastPktsValue used during instantiation.
     */
    public void setInUnicastPktsValue(BigInteger inUnicastPktsValue)
            throws JNCException {
        setInUnicastPktsValue(new Counter64(inUnicastPktsValue));
    }

    /**
     * Sets the value for child leaf "in-unicast-pkts",
     * using a String value.
     * @param inUnicastPktsValue used during instantiation.
     */
    public void setInUnicastPktsValue(String inUnicastPktsValue)
            throws JNCException {
        setInUnicastPktsValue(new Counter64(inUnicastPktsValue));
    }

    /**
     * Unsets the value for child leaf "in-unicast-pkts".
     */
    public void unsetInUnicastPktsValue() throws JNCException {
        delete("in-unicast-pkts");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-unicast-pkts" leaf will not have a value.
     */
    public void addInUnicastPkts() throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "in-unicast-pkts",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-unicast-pkts" with operation "replace".
     */
    public void markInUnicastPktsReplace() throws JNCException {
        markLeafReplace("inUnicastPkts");
    }

    /**
     * Marks the leaf "in-unicast-pkts" with operation "merge".
     */
    public void markInUnicastPktsMerge() throws JNCException {
        markLeafMerge("inUnicastPkts");
    }

    /**
     * Marks the leaf "in-unicast-pkts" with operation "create".
     */
    public void markInUnicastPktsCreate() throws JNCException {
        markLeafCreate("inUnicastPkts");
    }

    /**
     * Marks the leaf "in-unicast-pkts" with operation "delete".
     */
    public void markInUnicastPktsDelete() throws JNCException {
        markLeafDelete("inUnicastPkts");
    }

    /* Access methods for optional leaf child: "in-broadcast-pkts". */

    /**
     * Gets the value for child leaf "in-broadcast-pkts".
     * @return The value of the leaf.
     */
    public Counter64 getInBroadcastPktsValue() throws JNCException {
        return (Counter64)getValue("in-broadcast-pkts");
    }

    /**
     * Sets the value for child leaf "in-broadcast-pkts",
     * using a JNC type value.
     * @param inBroadcastPktsValue The value to set.
     * @param inBroadcastPktsValue used during instantiation.
     */
    public void setInBroadcastPktsValue(Counter64 inBroadcastPktsValue)
            throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "in-broadcast-pkts",
            inBroadcastPktsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-broadcast-pkts",
     * using Java primitive values.
     * @param inBroadcastPktsValue used during instantiation.
     */
    public void setInBroadcastPktsValue(BigInteger inBroadcastPktsValue)
            throws JNCException {
        setInBroadcastPktsValue(new Counter64(inBroadcastPktsValue));
    }

    /**
     * Sets the value for child leaf "in-broadcast-pkts",
     * using a String value.
     * @param inBroadcastPktsValue used during instantiation.
     */
    public void setInBroadcastPktsValue(String inBroadcastPktsValue)
            throws JNCException {
        setInBroadcastPktsValue(new Counter64(inBroadcastPktsValue));
    }

    /**
     * Unsets the value for child leaf "in-broadcast-pkts".
     */
    public void unsetInBroadcastPktsValue() throws JNCException {
        delete("in-broadcast-pkts");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-broadcast-pkts" leaf will not have a value.
     */
    public void addInBroadcastPkts() throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "in-broadcast-pkts",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-broadcast-pkts" with operation "replace".
     */
    public void markInBroadcastPktsReplace() throws JNCException {
        markLeafReplace("inBroadcastPkts");
    }

    /**
     * Marks the leaf "in-broadcast-pkts" with operation "merge".
     */
    public void markInBroadcastPktsMerge() throws JNCException {
        markLeafMerge("inBroadcastPkts");
    }

    /**
     * Marks the leaf "in-broadcast-pkts" with operation "create".
     */
    public void markInBroadcastPktsCreate() throws JNCException {
        markLeafCreate("inBroadcastPkts");
    }

    /**
     * Marks the leaf "in-broadcast-pkts" with operation "delete".
     */
    public void markInBroadcastPktsDelete() throws JNCException {
        markLeafDelete("inBroadcastPkts");
    }

    /* Access methods for optional leaf child: "in-multicast-pkts". */

    /**
     * Gets the value for child leaf "in-multicast-pkts".
     * @return The value of the leaf.
     */
    public Counter64 getInMulticastPktsValue() throws JNCException {
        return (Counter64)getValue("in-multicast-pkts");
    }

    /**
     * Sets the value for child leaf "in-multicast-pkts",
     * using a JNC type value.
     * @param inMulticastPktsValue The value to set.
     * @param inMulticastPktsValue used during instantiation.
     */
    public void setInMulticastPktsValue(Counter64 inMulticastPktsValue)
            throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "in-multicast-pkts",
            inMulticastPktsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-multicast-pkts",
     * using Java primitive values.
     * @param inMulticastPktsValue used during instantiation.
     */
    public void setInMulticastPktsValue(BigInteger inMulticastPktsValue)
            throws JNCException {
        setInMulticastPktsValue(new Counter64(inMulticastPktsValue));
    }

    /**
     * Sets the value for child leaf "in-multicast-pkts",
     * using a String value.
     * @param inMulticastPktsValue used during instantiation.
     */
    public void setInMulticastPktsValue(String inMulticastPktsValue)
            throws JNCException {
        setInMulticastPktsValue(new Counter64(inMulticastPktsValue));
    }

    /**
     * Unsets the value for child leaf "in-multicast-pkts".
     */
    public void unsetInMulticastPktsValue() throws JNCException {
        delete("in-multicast-pkts");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-multicast-pkts" leaf will not have a value.
     */
    public void addInMulticastPkts() throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "in-multicast-pkts",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-multicast-pkts" with operation "replace".
     */
    public void markInMulticastPktsReplace() throws JNCException {
        markLeafReplace("inMulticastPkts");
    }

    /**
     * Marks the leaf "in-multicast-pkts" with operation "merge".
     */
    public void markInMulticastPktsMerge() throws JNCException {
        markLeafMerge("inMulticastPkts");
    }

    /**
     * Marks the leaf "in-multicast-pkts" with operation "create".
     */
    public void markInMulticastPktsCreate() throws JNCException {
        markLeafCreate("inMulticastPkts");
    }

    /**
     * Marks the leaf "in-multicast-pkts" with operation "delete".
     */
    public void markInMulticastPktsDelete() throws JNCException {
        markLeafDelete("inMulticastPkts");
    }

    /* Access methods for optional leaf child: "in-discards". */

    /**
     * Gets the value for child leaf "in-discards".
     * @return The value of the leaf.
     */
    public Counter32 getInDiscardsValue() throws JNCException {
        return (Counter32)getValue("in-discards");
    }

    /**
     * Sets the value for child leaf "in-discards",
     * using a JNC type value.
     * @param inDiscardsValue The value to set.
     * @param inDiscardsValue used during instantiation.
     */
    public void setInDiscardsValue(Counter32 inDiscardsValue)
            throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "in-discards",
            inDiscardsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-discards",
     * using Java primitive values.
     * @param inDiscardsValue used during instantiation.
     */
    public void setInDiscardsValue(long inDiscardsValue) throws JNCException {
        setInDiscardsValue(new Counter32(inDiscardsValue));
    }

    /**
     * Sets the value for child leaf "in-discards",
     * using a String value.
     * @param inDiscardsValue used during instantiation.
     */
    public void setInDiscardsValue(String inDiscardsValue) throws JNCException {
        setInDiscardsValue(new Counter32(inDiscardsValue));
    }

    /**
     * Unsets the value for child leaf "in-discards".
     */
    public void unsetInDiscardsValue() throws JNCException {
        delete("in-discards");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-discards" leaf will not have a value.
     */
    public void addInDiscards() throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "in-discards",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-discards" with operation "replace".
     */
    public void markInDiscardsReplace() throws JNCException {
        markLeafReplace("inDiscards");
    }

    /**
     * Marks the leaf "in-discards" with operation "merge".
     */
    public void markInDiscardsMerge() throws JNCException {
        markLeafMerge("inDiscards");
    }

    /**
     * Marks the leaf "in-discards" with operation "create".
     */
    public void markInDiscardsCreate() throws JNCException {
        markLeafCreate("inDiscards");
    }

    /**
     * Marks the leaf "in-discards" with operation "delete".
     */
    public void markInDiscardsDelete() throws JNCException {
        markLeafDelete("inDiscards");
    }

    /* Access methods for optional leaf child: "in-errors". */

    /**
     * Gets the value for child leaf "in-errors".
     * @return The value of the leaf.
     */
    public Counter32 getInErrorsValue() throws JNCException {
        return (Counter32)getValue("in-errors");
    }

    /**
     * Sets the value for child leaf "in-errors",
     * using a JNC type value.
     * @param inErrorsValue The value to set.
     * @param inErrorsValue used during instantiation.
     */
    public void setInErrorsValue(Counter32 inErrorsValue) throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "in-errors",
            inErrorsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-errors",
     * using Java primitive values.
     * @param inErrorsValue used during instantiation.
     */
    public void setInErrorsValue(long inErrorsValue) throws JNCException {
        setInErrorsValue(new Counter32(inErrorsValue));
    }

    /**
     * Sets the value for child leaf "in-errors",
     * using a String value.
     * @param inErrorsValue used during instantiation.
     */
    public void setInErrorsValue(String inErrorsValue) throws JNCException {
        setInErrorsValue(new Counter32(inErrorsValue));
    }

    /**
     * Unsets the value for child leaf "in-errors".
     */
    public void unsetInErrorsValue() throws JNCException {
        delete("in-errors");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-errors" leaf will not have a value.
     */
    public void addInErrors() throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "in-errors",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-errors" with operation "replace".
     */
    public void markInErrorsReplace() throws JNCException {
        markLeafReplace("inErrors");
    }

    /**
     * Marks the leaf "in-errors" with operation "merge".
     */
    public void markInErrorsMerge() throws JNCException {
        markLeafMerge("inErrors");
    }

    /**
     * Marks the leaf "in-errors" with operation "create".
     */
    public void markInErrorsCreate() throws JNCException {
        markLeafCreate("inErrors");
    }

    /**
     * Marks the leaf "in-errors" with operation "delete".
     */
    public void markInErrorsDelete() throws JNCException {
        markLeafDelete("inErrors");
    }

    /* Access methods for optional leaf child: "in-unknown-protos". */

    /**
     * Gets the value for child leaf "in-unknown-protos".
     * @return The value of the leaf.
     */
    public Counter32 getInUnknownProtosValue() throws JNCException {
        return (Counter32)getValue("in-unknown-protos");
    }

    /**
     * Sets the value for child leaf "in-unknown-protos",
     * using a JNC type value.
     * @param inUnknownProtosValue The value to set.
     * @param inUnknownProtosValue used during instantiation.
     */
    public void setInUnknownProtosValue(Counter32 inUnknownProtosValue)
            throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "in-unknown-protos",
            inUnknownProtosValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "in-unknown-protos",
     * using Java primitive values.
     * @param inUnknownProtosValue used during instantiation.
     */
    public void setInUnknownProtosValue(long inUnknownProtosValue)
            throws JNCException {
        setInUnknownProtosValue(new Counter32(inUnknownProtosValue));
    }

    /**
     * Sets the value for child leaf "in-unknown-protos",
     * using a String value.
     * @param inUnknownProtosValue used during instantiation.
     */
    public void setInUnknownProtosValue(String inUnknownProtosValue)
            throws JNCException {
        setInUnknownProtosValue(new Counter32(inUnknownProtosValue));
    }

    /**
     * Unsets the value for child leaf "in-unknown-protos".
     */
    public void unsetInUnknownProtosValue() throws JNCException {
        delete("in-unknown-protos");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "in-unknown-protos" leaf will not have a value.
     */
    public void addInUnknownProtos() throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "in-unknown-protos",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "in-unknown-protos" with operation "replace".
     */
    public void markInUnknownProtosReplace() throws JNCException {
        markLeafReplace("inUnknownProtos");
    }

    /**
     * Marks the leaf "in-unknown-protos" with operation "merge".
     */
    public void markInUnknownProtosMerge() throws JNCException {
        markLeafMerge("inUnknownProtos");
    }

    /**
     * Marks the leaf "in-unknown-protos" with operation "create".
     */
    public void markInUnknownProtosCreate() throws JNCException {
        markLeafCreate("inUnknownProtos");
    }

    /**
     * Marks the leaf "in-unknown-protos" with operation "delete".
     */
    public void markInUnknownProtosDelete() throws JNCException {
        markLeafDelete("inUnknownProtos");
    }

    /* Access methods for optional leaf child: "out-octets". */

    /**
     * Gets the value for child leaf "out-octets".
     * @return The value of the leaf.
     */
    public Counter64 getOutOctetsValue() throws JNCException {
        return (Counter64)getValue("out-octets");
    }

    /**
     * Sets the value for child leaf "out-octets",
     * using a JNC type value.
     * @param outOctetsValue The value to set.
     * @param outOctetsValue used during instantiation.
     */
    public void setOutOctetsValue(Counter64 outOctetsValue) throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "out-octets",
            outOctetsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-octets",
     * using Java primitive values.
     * @param outOctetsValue used during instantiation.
     */
    public void setOutOctetsValue(BigInteger outOctetsValue)
            throws JNCException {
        setOutOctetsValue(new Counter64(outOctetsValue));
    }

    /**
     * Sets the value for child leaf "out-octets",
     * using a String value.
     * @param outOctetsValue used during instantiation.
     */
    public void setOutOctetsValue(String outOctetsValue) throws JNCException {
        setOutOctetsValue(new Counter64(outOctetsValue));
    }

    /**
     * Unsets the value for child leaf "out-octets".
     */
    public void unsetOutOctetsValue() throws JNCException {
        delete("out-octets");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-octets" leaf will not have a value.
     */
    public void addOutOctets() throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "out-octets",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-octets" with operation "replace".
     */
    public void markOutOctetsReplace() throws JNCException {
        markLeafReplace("outOctets");
    }

    /**
     * Marks the leaf "out-octets" with operation "merge".
     */
    public void markOutOctetsMerge() throws JNCException {
        markLeafMerge("outOctets");
    }

    /**
     * Marks the leaf "out-octets" with operation "create".
     */
    public void markOutOctetsCreate() throws JNCException {
        markLeafCreate("outOctets");
    }

    /**
     * Marks the leaf "out-octets" with operation "delete".
     */
    public void markOutOctetsDelete() throws JNCException {
        markLeafDelete("outOctets");
    }

    /* Access methods for optional leaf child: "out-unicast-pkts". */

    /**
     * Gets the value for child leaf "out-unicast-pkts".
     * @return The value of the leaf.
     */
    public Counter64 getOutUnicastPktsValue() throws JNCException {
        return (Counter64)getValue("out-unicast-pkts");
    }

    /**
     * Sets the value for child leaf "out-unicast-pkts",
     * using a JNC type value.
     * @param outUnicastPktsValue The value to set.
     * @param outUnicastPktsValue used during instantiation.
     */
    public void setOutUnicastPktsValue(Counter64 outUnicastPktsValue)
            throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "out-unicast-pkts",
            outUnicastPktsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-unicast-pkts",
     * using Java primitive values.
     * @param outUnicastPktsValue used during instantiation.
     */
    public void setOutUnicastPktsValue(BigInteger outUnicastPktsValue)
            throws JNCException {
        setOutUnicastPktsValue(new Counter64(outUnicastPktsValue));
    }

    /**
     * Sets the value for child leaf "out-unicast-pkts",
     * using a String value.
     * @param outUnicastPktsValue used during instantiation.
     */
    public void setOutUnicastPktsValue(String outUnicastPktsValue)
            throws JNCException {
        setOutUnicastPktsValue(new Counter64(outUnicastPktsValue));
    }

    /**
     * Unsets the value for child leaf "out-unicast-pkts".
     */
    public void unsetOutUnicastPktsValue() throws JNCException {
        delete("out-unicast-pkts");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-unicast-pkts" leaf will not have a value.
     */
    public void addOutUnicastPkts() throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "out-unicast-pkts",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-unicast-pkts" with operation "replace".
     */
    public void markOutUnicastPktsReplace() throws JNCException {
        markLeafReplace("outUnicastPkts");
    }

    /**
     * Marks the leaf "out-unicast-pkts" with operation "merge".
     */
    public void markOutUnicastPktsMerge() throws JNCException {
        markLeafMerge("outUnicastPkts");
    }

    /**
     * Marks the leaf "out-unicast-pkts" with operation "create".
     */
    public void markOutUnicastPktsCreate() throws JNCException {
        markLeafCreate("outUnicastPkts");
    }

    /**
     * Marks the leaf "out-unicast-pkts" with operation "delete".
     */
    public void markOutUnicastPktsDelete() throws JNCException {
        markLeafDelete("outUnicastPkts");
    }

    /* Access methods for optional leaf child: "out-broadcast-pkts". */

    /**
     * Gets the value for child leaf "out-broadcast-pkts".
     * @return The value of the leaf.
     */
    public Counter64 getOutBroadcastPktsValue() throws JNCException {
        return (Counter64)getValue("out-broadcast-pkts");
    }

    /**
     * Sets the value for child leaf "out-broadcast-pkts",
     * using a JNC type value.
     * @param outBroadcastPktsValue The value to set.
     * @param outBroadcastPktsValue used during instantiation.
     */
    public void setOutBroadcastPktsValue(Counter64 outBroadcastPktsValue)
            throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "out-broadcast-pkts",
            outBroadcastPktsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-broadcast-pkts",
     * using Java primitive values.
     * @param outBroadcastPktsValue used during instantiation.
     */
    public void setOutBroadcastPktsValue(BigInteger outBroadcastPktsValue)
            throws JNCException {
        setOutBroadcastPktsValue(new Counter64(outBroadcastPktsValue));
    }

    /**
     * Sets the value for child leaf "out-broadcast-pkts",
     * using a String value.
     * @param outBroadcastPktsValue used during instantiation.
     */
    public void setOutBroadcastPktsValue(String outBroadcastPktsValue)
            throws JNCException {
        setOutBroadcastPktsValue(new Counter64(outBroadcastPktsValue));
    }

    /**
     * Unsets the value for child leaf "out-broadcast-pkts".
     */
    public void unsetOutBroadcastPktsValue() throws JNCException {
        delete("out-broadcast-pkts");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-broadcast-pkts" leaf will not have a value.
     */
    public void addOutBroadcastPkts() throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "out-broadcast-pkts",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-broadcast-pkts" with operation "replace".
     */
    public void markOutBroadcastPktsReplace() throws JNCException {
        markLeafReplace("outBroadcastPkts");
    }

    /**
     * Marks the leaf "out-broadcast-pkts" with operation "merge".
     */
    public void markOutBroadcastPktsMerge() throws JNCException {
        markLeafMerge("outBroadcastPkts");
    }

    /**
     * Marks the leaf "out-broadcast-pkts" with operation "create".
     */
    public void markOutBroadcastPktsCreate() throws JNCException {
        markLeafCreate("outBroadcastPkts");
    }

    /**
     * Marks the leaf "out-broadcast-pkts" with operation "delete".
     */
    public void markOutBroadcastPktsDelete() throws JNCException {
        markLeafDelete("outBroadcastPkts");
    }

    /* Access methods for optional leaf child: "out-multicast-pkts". */

    /**
     * Gets the value for child leaf "out-multicast-pkts".
     * @return The value of the leaf.
     */
    public Counter64 getOutMulticastPktsValue() throws JNCException {
        return (Counter64)getValue("out-multicast-pkts");
    }

    /**
     * Sets the value for child leaf "out-multicast-pkts",
     * using a JNC type value.
     * @param outMulticastPktsValue The value to set.
     * @param outMulticastPktsValue used during instantiation.
     */
    public void setOutMulticastPktsValue(Counter64 outMulticastPktsValue)
            throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "out-multicast-pkts",
            outMulticastPktsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-multicast-pkts",
     * using Java primitive values.
     * @param outMulticastPktsValue used during instantiation.
     */
    public void setOutMulticastPktsValue(BigInteger outMulticastPktsValue)
            throws JNCException {
        setOutMulticastPktsValue(new Counter64(outMulticastPktsValue));
    }

    /**
     * Sets the value for child leaf "out-multicast-pkts",
     * using a String value.
     * @param outMulticastPktsValue used during instantiation.
     */
    public void setOutMulticastPktsValue(String outMulticastPktsValue)
            throws JNCException {
        setOutMulticastPktsValue(new Counter64(outMulticastPktsValue));
    }

    /**
     * Unsets the value for child leaf "out-multicast-pkts".
     */
    public void unsetOutMulticastPktsValue() throws JNCException {
        delete("out-multicast-pkts");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-multicast-pkts" leaf will not have a value.
     */
    public void addOutMulticastPkts() throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "out-multicast-pkts",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-multicast-pkts" with operation "replace".
     */
    public void markOutMulticastPktsReplace() throws JNCException {
        markLeafReplace("outMulticastPkts");
    }

    /**
     * Marks the leaf "out-multicast-pkts" with operation "merge".
     */
    public void markOutMulticastPktsMerge() throws JNCException {
        markLeafMerge("outMulticastPkts");
    }

    /**
     * Marks the leaf "out-multicast-pkts" with operation "create".
     */
    public void markOutMulticastPktsCreate() throws JNCException {
        markLeafCreate("outMulticastPkts");
    }

    /**
     * Marks the leaf "out-multicast-pkts" with operation "delete".
     */
    public void markOutMulticastPktsDelete() throws JNCException {
        markLeafDelete("outMulticastPkts");
    }

    /* Access methods for optional leaf child: "out-discards". */

    /**
     * Gets the value for child leaf "out-discards".
     * @return The value of the leaf.
     */
    public Counter32 getOutDiscardsValue() throws JNCException {
        return (Counter32)getValue("out-discards");
    }

    /**
     * Sets the value for child leaf "out-discards",
     * using a JNC type value.
     * @param outDiscardsValue The value to set.
     * @param outDiscardsValue used during instantiation.
     */
    public void setOutDiscardsValue(Counter32 outDiscardsValue)
            throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "out-discards",
            outDiscardsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-discards",
     * using Java primitive values.
     * @param outDiscardsValue used during instantiation.
     */
    public void setOutDiscardsValue(long outDiscardsValue) throws JNCException {
        setOutDiscardsValue(new Counter32(outDiscardsValue));
    }

    /**
     * Sets the value for child leaf "out-discards",
     * using a String value.
     * @param outDiscardsValue used during instantiation.
     */
    public void setOutDiscardsValue(String outDiscardsValue)
            throws JNCException {
        setOutDiscardsValue(new Counter32(outDiscardsValue));
    }

    /**
     * Unsets the value for child leaf "out-discards".
     */
    public void unsetOutDiscardsValue() throws JNCException {
        delete("out-discards");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-discards" leaf will not have a value.
     */
    public void addOutDiscards() throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "out-discards",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-discards" with operation "replace".
     */
    public void markOutDiscardsReplace() throws JNCException {
        markLeafReplace("outDiscards");
    }

    /**
     * Marks the leaf "out-discards" with operation "merge".
     */
    public void markOutDiscardsMerge() throws JNCException {
        markLeafMerge("outDiscards");
    }

    /**
     * Marks the leaf "out-discards" with operation "create".
     */
    public void markOutDiscardsCreate() throws JNCException {
        markLeafCreate("outDiscards");
    }

    /**
     * Marks the leaf "out-discards" with operation "delete".
     */
    public void markOutDiscardsDelete() throws JNCException {
        markLeafDelete("outDiscards");
    }

    /* Access methods for optional leaf child: "out-errors". */

    /**
     * Gets the value for child leaf "out-errors".
     * @return The value of the leaf.
     */
    public Counter32 getOutErrorsValue() throws JNCException {
        return (Counter32)getValue("out-errors");
    }

    /**
     * Sets the value for child leaf "out-errors",
     * using a JNC type value.
     * @param outErrorsValue The value to set.
     * @param outErrorsValue used during instantiation.
     */
    public void setOutErrorsValue(Counter32 outErrorsValue) throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "out-errors",
            outErrorsValue,
            childrenNames());
    }

    /**
     * Sets the value for child leaf "out-errors",
     * using Java primitive values.
     * @param outErrorsValue used during instantiation.
     */
    public void setOutErrorsValue(long outErrorsValue) throws JNCException {
        setOutErrorsValue(new Counter32(outErrorsValue));
    }

    /**
     * Sets the value for child leaf "out-errors",
     * using a String value.
     * @param outErrorsValue used during instantiation.
     */
    public void setOutErrorsValue(String outErrorsValue) throws JNCException {
        setOutErrorsValue(new Counter32(outErrorsValue));
    }

    /**
     * Unsets the value for child leaf "out-errors".
     */
    public void unsetOutErrorsValue() throws JNCException {
        delete("out-errors");
    }

    /**
     * This method is used for creating a subtree filter.
     * The added "out-errors" leaf will not have a value.
     */
    public void addOutErrors() throws JNCException {
        setLeafValue(JIf.NAMESPACE,
            "out-errors",
            null,
            childrenNames());
    }

    /**
     * Marks the leaf "out-errors" with operation "replace".
     */
    public void markOutErrorsReplace() throws JNCException {
        markLeafReplace("outErrors");
    }

    /**
     * Marks the leaf "out-errors" with operation "merge".
     */
    public void markOutErrorsMerge() throws JNCException {
        markLeafMerge("outErrors");
    }

    /**
     * Marks the leaf "out-errors" with operation "create".
     */
    public void markOutErrorsCreate() throws JNCException {
        markLeafCreate("outErrors");
    }

    /**
     * Marks the leaf "out-errors" with operation "delete".
     */
    public void markOutErrorsDelete() throws JNCException {
        markLeafDelete("outErrors");
    }

    /**
     * Support method for addChild.
     * Adds a child to this object.
     * 
     * @param child The child to add
     */
    public void addChild(Element child) {
        super.addChild(child);
    }

}
